
#Область ОбработчикиФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ВариантРаботыСклада = Перечисления.мс_ВариантыРаботыСкладовМаркетов.СоСклада;
	УстановитьСписокДоступныхМагазинов();
КонецПроцедуры

#Область ОбработчикиКоманд

&НаСервере
Процедура ОбновитьОстаткиФБСНаСервере()
	мс_РаботаСОзон.ОбновитьОстаткиФБС();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОстаткиФБС(Команда)
	ОбновитьОстаткиФБСНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьОстаткиМоделиНаСервере()
	Маркет	 = ЗначениеНастроекПовтИсп.МаркетОзон();
	Если Не ЗначениеЗаполнено(Маркет) Тогда
		Сообщить("Не заполено значение общей константы ""МаркетОзон"".");
		Возврат;
	КонецЕсли;	

	мс_РаботаСОзон.ОбновитьОстаткиМодели(Модель, Магазин, Номенклатура, ВариантРаботыСклада);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОстаткиМодели(Команда)
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	ОбновитьОстаткиМоделиНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьЦеныФБСНаСервере()
	мс_РаботаСОзон.ОбновитьЦеныФБС();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЦеныФБС(Команда)
	ОбновитьЦеныФБСНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьЦеныМоделиНаСервере()
	Маркет	 = ЗначениеНастроекПовтИсп.МаркетОзон();
	Если Не ЗначениеЗаполнено(Маркет) Тогда
		Сообщить("Не заполено значение общей константы ""МаркетОзон"".");
		Возврат;
	КонецЕсли;	
	мс_РаботаСОзон.ОбновитьЦеныМодели(Модель, Магазин, Номенклатура);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЦеныМодели(Команда)
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	ОбновитьЦеныМоделиНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПолучитьСписокТоваровНаСервере()
	Маркет = ЗначениеНастроекПовтИсп.МаркетОзон();
	Если Не ЗначениеЗаполнено(Маркет) Тогда
		Сообщить("Не заполено значение общей константы ""МаркетОзон"".");
		Возврат;
	КонецЕсли;	
	Модель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Магазин, "Модель");
	Если Не ЗначениеЗаполнено(Модель) Тогда
		ТекстСообщения = СтрШаблон("В магазине %1 не указана модель", Магазин);
		Сообщить(ТекстСообщения);
		Возврат;
	КонецЕсли;	
	
	ИдОбмена = СокрЛП(Новый УникальныйИдентификатор);

	мс_РаботаСОзон.ПолучитьСписокТоваровМодели(Модель, Магазин, ИдОбмена);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСписокТоваров(Команда)
	ПолучитьСписокТоваровНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьЗаказыМоделиНаСервере()
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Магазин, "Модель");
	Если Не ЗначениеЗаполнено(ЗначенияРеквизитов.Модель) Тогда
		Сообщить("В магазине не указана модель");
		Возврат;
	КонецЕсли;	
	мс_РаботаСОзон.ЗагрузитьЗаказыМодели(ЗначенияРеквизитов.Модель, Магазин);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗаказыМодели(Команда)
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	ЗагрузитьЗаказыМоделиНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоКатегорийНаСервере()
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Магазин, "Модель");
	Если Не ЗначениеЗаполнено(ЗначенияРеквизитов.Модель) Тогда
		Сообщить("В магазине не указана модель");
		Возврат;
	КонецЕсли;	
	ДанныеДереваКатегорий = мс_РаботаСОзон.ПолучитьДеревоКатегорий(Магазин, Неопределено);
	
	ВыбранныеКатегории.ПолучитьЭлементы().Очистить();
	ДЗ = РеквизитФормыВЗначение("ДеревоКатегорий");
	ДЗ = ИнициализироватьДеревоКатегорийРекурсивноНаСервере(ДЗ, ДанныеДереваКатегорий.result);
	Категории.Сортировать("Наименование");
	ЗначениеВРеквизитФормы(ДЗ, "ДеревоКатегорий");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДеревоКатегорий(Команда)
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	Категории.Очистить();
	ЗаполнитьДеревоКатегорийНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчкиСобытийЭлементовФормы

&НаСервере
Процедура НоменклатураПриИзмененииНаСервере()
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
КонецПроцедуры

&НаКлиенте
Процедура КатегорииОтметкаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Категории.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДанныеКатегории = Новый Структура("ИдКатегории, Наименование");
	ЗаполнитьЗначенияСвойств(ДанныеКатегории, ТекущиеДанные);
	Если ТекущиеДанные.Отметка Тогда
		ДобавитьВыбраннуюКатегориюНаСервере(ДанныеКатегории);
	Иначе
		УдалитьВыбраннуюКатегориюНаСервере(ДанныеКатегории.ИдКатегории)
	КонецЕсли;	
	Категории.Сортировать("Отметка Убыв, Наименование");
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("СоответствиеКатегорийОтобратьКатегорииСайта", 0.3, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеКатегорииПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("ОтобратьДоступныеКатегории", 0.3, Истина);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ИнициализироватьДеревоКатегорийРекурсивноНаСервере(СтрокаПриемника, СтрокаИсточника, КорневаяКатегория = Неопределено)
	Для Каждого Категория Из СтрокаИсточника Цикл
		ДанныеКатегории = Новый Структура("ИдКатегории, Наименование, КорневаяКатегория", Категория.category_id, Категория.title, КорневаяКатегория);
		НоваяСтрока = СтрокаПриемника.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеКатегории);
		Если НоваяСтрока.Уровень() = 0 Тогда
			ЗаполнитьЗначенияСвойств(Категории.Добавить(), ДанныеКатегории);
			КорневаяКатегория = Категория.category_id;
		КонецЕсли;	
		Если ТипЗнч(Категория.children) = Тип("Массив") и Категория.children.Количество() > 0 Тогда			
			ИнициализироватьДеревоКатегорийРекурсивноНаСервере(НоваяСтрока, Категория.children, КорневаяКатегория);
		Иначе
			ЗаполнитьЗначенияСвойств(ДоступныеКатегории.Добавить(), ДанныеКатегории);
		КонецЕсли;		
	КонецЦикла;
	СтрокаПриемника.Строки.Сортировать("Наименование"); 
	
	Возврат СтрокаПриемника;
КонецФункции

&НаСервере
Функция ДобавитьВыбраннуюКатегориюРекурсивно(СтрокаПриемника, СтрокаИсточника)
	Для Каждого Категория Из СтрокаИсточника Цикл
		ДанныеКатегории = Новый Структура("ИдКатегории, Наименование", Категория.ИдКатегории, Категория.Наименование);
		НоваяСтрока = СтрокаПриемника.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеКатегории);
		Если Категория.Строки.Количество() > 0 Тогда			
			ДобавитьВыбраннуюКатегориюРекурсивно(НоваяСтрока, Категория.Строки);
		Иначе
			Если ОбязательныеХарактеристики.НайтиСтроки(Новый Структура("ИдКатегории", ДанныеКатегории.ИдКатегории)).Количество() = 0 Тогда
				ЗаполнитьЗначенияСвойств(ДобавленныеКатегории.Добавить(), Новый Структура("ИдКатегории", ДанныеКатегории.ИдКатегории));
			КонецЕсли;	
		КонецЕсли;		
	КонецЦикла;
	СтрокаПриемника.Строки.Сортировать("Наименование"); 
	
	Возврат СтрокаПриемника;
КонецФункции

&НаСервере
Процедура УдалитьВыбраннуюКатегориюНаСервере(ИдКатегории)
	ВыбранныеКатегорииДЗ = РеквизитФормыВЗначение("ВыбранныеКатегории");
	Для Каждого НайденнаяСтрока Из ВыбранныеКатегорииДЗ.Строки.НайтиСтроки(Новый Структура("ИдКатегории", ИдКатегории)) Цикл
		ВыбранныеКатегорииДЗ.Строки.Удалить(НайденнаяСтрока);
	КонецЦикла;	
	ЗначениеВРеквизитФормы(ВыбранныеКатегорииДЗ, "ВыбранныеКатегории");
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СоответствиеКатегорийОтобратьКатегорииСайта() Экспорт
	//ТекущиеДанные = Элементы.СоответствиеКатегорийДеревоКатегорийОзон.ТекущиеДанные;
	//Если ТекущиеДанные = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	//ВыбИдКатегория = ТекущиеДанные.ИдКатегории;
	//Если СписокИдентификаторовКатегорий.НайтиПозначению(ВыбИдКатегория.ИдКатегории) <> Неопределено Тогда
	//	Элементы.ОбязательныеХарактеристики.ОтборСтрок = Новый ФиксированнаяСтруктура("ИДКатегории", ВыбИдКатегория.ИдКатегории);
	//КонецЕсли;	
КонецПроцедуры	

&НаСервере
Процедура ДобавитьВыбраннуюКатегориюНаСервере(ДанныеКатегории)
	ДеревоКатегорийДЗ = РеквизитФормыВЗначение("ДеревоКатегорий");
	ДеревоКатегорийСтрокаДЗ = ДеревоКатегорийДЗ.Строки.НайтиСтроки(Новый Структура("ИдКатегории", ДанныеКатегории.ИдКатегории));
	Если ДеревоКатегорийСтрокаДЗ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ВыбранныеКатегорииДЗ = РеквизитФормыВЗначение("ВыбранныеКатегории");
	ВыбранныеКатегорииДЗ = ДобавитьВыбраннуюКатегориюРекурсивно(ВыбранныеКатегорииДЗ, ДеревоКатегорийСтрокаДЗ);
	ЗначениеВРеквизитФормы(ВыбранныеКатегорииДЗ, "ВыбранныеКатегории");
	Если ДобавленныеКатегории.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	//ДобавитьХарактеристикиНаСервере(ДобавленныеКатегории.Выгрузить());
КонецПроцедуры	

&НаКлиенте
Процедура ОтобратьДоступныеКатегории() Экспорт
	ТекущиеДанные = Элементы.ВыбранныеКатегории.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Элементы.ОбязательныеХарактеристики.ОтборСтрок = Новый ФиксированнаяСтруктура("ИДКатегории", ТекущиеДанные.ИдКатегории);
	Если ДоступныеКатегории.НайтиСтроки(Новый Структура("ИДКатегории", ТекущиеДанные.ИдКатегории)).Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ОбновитьОбязательныеХарактеристикиНаСервере(ТекущиеДанные.ИдКатегории);
КонецПроцедуры	

&НаСервере
Процедура ОбновитьОбязательныеХарактеристикиНаСервере(ИдКатегории)
	ОбязательныеХарактеристикиТЗ = РеквизитФормыВЗначение("ОбязательныеХарактеристики");
	НайденныеСтроки = ОбязательныеХарактеристикиТЗ.НайтиСтроки(Новый Структура("ИДКатегории", ИДКатегории));
	Если НайденныеСтроки.Количество() = 0 Тогда
		Характеристики = мс_РаботаСОзон.ПолучитьХарактеристики(Магазин, ИДКатегории);
		Если Характеристики = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Для Каждого ТекКатегория Из Характеристики.result Цикл
			Для Каждого ТекХарактеристика Из ТекКатегория.attributes Цикл
				ЗаполнитьЗначенияСвойств(ОбязательныеХарактеристикиТЗ.Добавить(), Новый Структура("Наименование, Значение, ИдКатегории, ИдХарактеристики", ТекХарактеристика.name, "", ТекКатегория.category_id, ТекХарактеристика.id));
			КонецЦикла;
		КонецЦикла;
		ЗначениеВРеквизитФормы(ОбязательныеХарактеристикиТЗ, "ОбязательныеХарактеристики"); 
	КонецЕсли; 	
КонецПроцедуры	

&НаСервереБезКонтекста
Процедура ОбязательныеХарактеристикиЗначениеНачалоВыбораИзСпискаНаСервере()
	
КонецПроцедуры

&НаКлиенте
Процедура ОбязательныеХарактеристикиЗначениеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Элемент.СписокВыбора = ПолучитьЗначенияЗарактеристики(Элемент.Текущиеданные.ИдКатегории, Элемент.Текущиеданные.ИдХарактеристики);
	ОбязательныеХарактеристикиЗначениеНачалоВыбораИзСпискаНаСервере();
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначенияЗарактеристики(ИдКатегории, ИдХарактеристики)
	ЗначенияЗарактеристики = Новый СписокЗначений;
	ЗначенияЗарактеристики = мс_РаботаСОзон.ПолучитьЗначенияХарактеристики(Магазин, ИдКатегории, ИдХарактеристики);

	Возврат ЗначенияЗарактеристики;
КонецФункции	

&НаКлиенте
Процедура ОбязательныеХарактеристикиЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ОбязательныеХарактеристики.ТекущиеДанные;
	Элемент.СписокВыбора = ПолучитьЗначенияЗарактеристики(Текущиеданные.ИдКатегории, Текущиеданные.ИдХарактеристики);
КонецПроцедуры

&НаСервере
Процедура УстановитьСписокДоступныхМагазинов()
	Запрос = Новый Запрос(
	#Область ТекстЗапроса
		"ВЫБРАТЬ
		|	мс_МаркетПлейсы.Ссылка КАК Магазин,
		|	ПРЕДСТАВЛЕНИЕ(мс_МаркетПлейсы.Ссылка) КАК МагазинПредставление
		|ИЗ
		|	Справочник.мс_МаркетПлейсы КАК мс_МаркетПлейсы
		|ГДЕ
		|	мс_МаркетПлейсы.Контрагент = &Контрагент");
	#КонецОбласти
	Запрос.Параметры.Вставить("Контрагент", ЗначениеНастроекПовтИсп.МаркетОзон());
	Результат = Запрос.Выполнить();
	СписокВыбора = Элементы.Магазин.СписокВыбора;
	Если Результат.Пустой() Тогда
		СписокВыбора.Очистить();
		Возврат
	КонецЕсли;	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокВыбора.Добавить(Выборка.Магазин, Выборка.МагазинПредставление);
	КонецЦикла;	
КонецПроцедуры	

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	#Если Сервер И Не Сервер Тогда
		ПроверяемыеРеквизиты = Новый Массив;
	#КонецЕсли
	Маркет = ЗначениеНастроекПовтИсп.МаркетОзон();
	Если Не ЗначениеЗаполнено(Маркет) Тогда
		Сообщить("Не заполено значение общей константы ""МаркетОзон"".");
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Модель) И Не ЗначениеЗаполнено(ВариантРаботыСклада) И Не ЗначениеЗаполнено(Магазин) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Не указаны ни модель, ни вариант работы магазина, ни магазин.";
		Сообщение.Поле = "Модель";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить();
		
		Отказ = Истина;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Модель) Тогда
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Модель"));
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ВариантРаботыСклада) Тогда
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ВариантРаботыСклада"));
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Магазин) Тогда
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Магазин"));
	КонецЕсли;
КонецПроцедуры
