
#Область ПрикладныеПроцедурыИФункции

#Область ОбменСОзон

Процедура ОбновитьОстатки(ДанныеМагазина, Номенклатура = Неопределено, Регистратор) Экспорт
	#Если Сервер И Не Сервер Тогда
		Регистратор = Документы.мс_РегистраторИсторииОбменовСМаркетами.СоздатьДокумент();
	#КонецЕсли
	ТаблицаОстатков = ПолучитьМенеджерСТаблицейОстатков(ДанныеМагазина, Номенклатура, Регистратор);
	Если ТаблицаОстатков = Неопределено Тогда
		ОбновлениеОстатковОшибкаПолученияМенеджераСТаблицейОстатков(ДанныеМагазина, Номенклатура);
		Регистратор.УстановитьРезультатОбменаСОшибками( , "Озон");
		
		Возврат;
	КонецЕсли;
	ОбновитьОстаткиДанными(ДанныеМагазина, ТаблицаОстатков, Регистратор);
КонецПроцедуры

Процедура ОбновитьЦены(ДанныеМагазина, Номенклатура = Неопределено, Регистратор) Экспорт
	#Если Сервер И Не Сервер Тогда
		Регистратор = Документы.мс_РегистраторИсторииОбменовСМаркетами.СоздатьДокумент();
	#КонецЕсли
	ТаблицаЦен = ПолучитьМенеджерСТаблицейЦен(ДанныеМагазина, Номенклатура, Регистратор);
	Если ТаблицаЦен = Неопределено Тогда
		ОбновлениеЦенОшибкаПолученияМенеджераСТаблицейЦен(ДанныеМагазина, Номенклатура);
		Возврат;
	КонецЕсли;
	ОбновитьЦеныДанными(ДанныеМагазина, ТаблицаЦен, Регистратор);
КонецПроцедуры

Процедура ЗагрузитьЗаказы(ДанныеМагазина, Регистратор) Экспорт
	#Если Сервер И Не Сервер Тогда
		Регистратор = Документы.мс_РегистраторИсторииОбменовСМаркетами.СоздатьДокумент();
	#КонецЕсли
	Сессия = ПолучитьСессию(ДанныеМагазина);
	
	ПараметрыЗапроса = ПолучитьПараметрыЗапросаПолученияЗаказов(ДанныеМагазина);
	ДанныеЗаказов = ВыполнитьЗапросПолученияДанныхНеобработанныхЗаказов(Сессия, ДанныеМагазина, ПараметрыЗапроса, Регистратор);
	Если ДанныеЗаказов = Неопределено Тогда
		Регистратор.УстановитьРезультатОбменаСОшибками( , "Озон");
		
		Возврат;
	КонецЕсли;
	
	Если ДанныеЗаказов.result.count = 0 Тогда
		СтрокаДанныхЗапросовAPI = Регистратор.ДобавитьСтрокуДанныхЗапросовAPI( , Перечисления.мс_ВидыОбменовСМаркетами.РезультатЗапросаAPIПолученияДанныхНеобработанныхЗаказов);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.НетДанных, СтрокаДанныхЗапросовAPI);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.НетДанных);
		
		Возврат;
	КонецЕсли;
	
	СоставыЗаказов = ПолучитьСоставыЗаказов(ДанныеЗаказов.result.postings, Регистратор);
	Если СоставыЗаказов = Неопределено Тогда
		Регистратор.УстановитьРезультатОбменаСОшибками( , "Озон");
		
		Возврат;
	КонецЕсли;
	#Если Сервер И Не Сервер Тогда
		СоставыЗаказов = Новый ТаблицаЗначений;
	#КонецЕсли
	
	НоменклатураКодовТоваров = СоставыЗаказов.СкопироватьКолонки("Номенклатура, КодОзон");
	НоменклатураКодовТоваров.Свернуть("Номенклатура, КодОзон");
	ОбновитьКодыМаркетаНоменклатуры(ДанныеМагазина.Маркет, НоменклатураКодовТоваров, Регистратор);
	
	СоздатьЗаказы(Сессия, ДанныеМагазина, СоставыЗаказов, Регистратор);
КонецПроцедуры

Процедура ПодтвердитьКомплектациюЗаказа(ДанныеМагазина, ДанныеЗаказа, Регистратор) Экспорт
	Сессия = ПолучитьСессию(ДанныеМагазина);
	МенеджерВТ = СоставЗаказа(ДанныеМагазина, ДанныеЗаказа.Ссылка, Сессия, Регистратор);
	Если МенеджерВТ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбработатьМаркируемуюНоменклатуру(ДанныеМагазина, ДанныеЗаказа, МенеджерВТ, Сессия, Регистратор) Тогда
		Возврат;
	КонецЕсли;
	
	СоставЗаказа     = МенеджерВТ.Таблицы.Найти("ВТ_СоставЗаказа").ПолучитьДанные().Выгрузить();
	ПараметрыЗапроса = ПараметрыЗапросаПодтвержденияКомплектации(ДанныеМагазина, СоставЗаказа, ДанныеЗаказа.мс_НомерОзон);
	ВыполнитьЗапросПодтвержденияКомплектацииЗаказа(Сессия, ДанныеМагазина, ПараметрыЗапроса, , Регистратор, ДанныеЗаказа.Ссылка);
КонецПроцедуры

Функция ОбработатьМаркируемуюНоменклатуру(Знач ДанныеМагазина, Знач ДанныеЗаказа, Знач МенеджерВТ, Сессия, СеансОбменаОбъект)
	#Если Сервер И Не Сервер Тогда
		СеансОбменаОбъект = Документы.мс_РегистраторИсторииОбменовСМаркетами.СоздатьДокумент();
	#КонецЕсли
	//Возможно стоит выполнять эти запросы при загрузке заказа и хранить результат в РС
	//Получаем массив кодов номенклатуры Озон требующей передачи маркировки
	МаркируемыеТовары = МаркируемыеТоварыЗаказа(ДанныеМагазина, ДанныеЗаказа.мс_НомерОзон, Сессия, СеансОбменаОбъект);
	Если МаркируемыеТовары = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	#Если Сервер И Не Сервер Тогда
		МаркируемыеТовары = Новый Массив;
	#КонецЕсли
	Если МаркируемыеТовары.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	//Для каждой упаковки маркируемой номенклатуры получаем ИД
	//Получаем структуру
	//products [
	//  product_id (код номенклатуры Озон)
	//  exemplars [
	//    exemplar_id (ИД упаковки)
	//  ]
	//]
	ИдентификаторыУпаковок = ИдентификаторыУпаковок(ДанныеМагазина, ДанныеЗаказа.мс_НомерОзон, Сессия, СеансОбменаОбъект);
	Если ИдентификаторыУпаковок = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//Для маркируемой номенклатуры получаем соответствие:
	//Ключ     - код номенклатуры Озон
	//Значение - массив структур:
	//mandatory_mark - данные маркировки)
	//exemplar_id    - ИД упаковки)
	ДанныеМаркировки = ДанныеМаркировкиЗаказа(ДанныеЗаказа.Ссылка, МенеджерВТ, МаркируемыеТовары, СеансОбменаОбъект);
	Если ДанныеМаркировки = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьИдентификаторыУпаковок(ДанныеМаркировки, ИдентификаторыУпаковок);
	
	//Передаем данные маркировки
	//Асинхронно отправляем данные маркировок
	ПараметрыЗапроса  = ПолучитьПараметрыЗапросаДляПередачиДанныхМаркировкиЗаказа(ДанныеМагазина, ДанныеМаркировки, ДанныеЗаказа.мс_НомерОзон);
	РезультатПередачи = ВыполнитьЗапросПередачиДанныхМаркировкиЗаказа(Сессия, ДанныеМагазина, ПараметрыЗапроса, СеансОбменаОбъект);
	Если РезультатПередачи = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтрокаДанныхЗапросовAPI = СеансОбменаОбъект.ДобавитьСтрокуДанныхЗапросовAPI( , Перечисления.мс_ВидыОбменовСМаркетами.РезультатЗапросаAPIПередачиДанныхМаркировкиЗаказа);
	Если Не РезультатПередачи.result Тогда
		СеансОбменаОбъект.УстановитьРезультатОбменаСОшибками(СтрокаДанныхЗапросовAPI, "Озон");
		
		Возврат Ложь;
	КонецЕсли;
	СеансОбменаОбъект.УстановитьРезультатОбменаУспешно(СтрокаДанныхЗапросовAPI, "Озон");
	
	//Пауза перед получением статуса
	мс_ОбщегоНазначения.Пауза(1);
	
	СтатусПередачиДанныхМаркировки = СтатусПередачиДанныхМаркировки(ДанныеМагазина, ДанныеЗаказа.мс_НомерОзон, СеансОбменаОбъект, Сессия);
	
	Возврат СтатусПередачиДанныхМаркировки;
КонецФункции

Процедура ЗаполнитьИдентификаторыУпаковок(ДанныеМаркировки, ИдентификаторыУпаковок)
	Для Каждого УпаковкиНоменклатуры Из ИдентификаторыУпаковок Цикл
		КИЗы = ДанныеМаркировки.Получить(УпаковкиНоменклатуры.product_id);
		Если КИЗы = Неопределено Тогда
			//Ошибка. Не найдена маркируемая номенклатура
			Отказ = Истина;
			
			Возврат;
		КонецЕсли;
		#Если Сервер И Не Сервер Тогда
			КИЗы = Новый Массив;
		#КонецЕсли
		Если КИЗы.Количество() <> УпаковкиНоменклатуры.exemplars.Количество() Тогда
			//Ошибка. Количество КИЗов не соответствует количеству экземпляров
			Отказ = Истина;
			
			Возврат;
		КонецЕсли;
		Для Инд = 0 По КИЗы.ВГраница() Цикл
			КИЗ = КИЗы.Получить(Инд);
			ИД = УпаковкиНоменклатуры.exemplars.Получить(Инд).exemplar_id;
			КИЗ.exemplar_id = ИД;
		КонецЦикла;
		ДанныеМаркировки.Вставить(УпаковкиНоменклатуры.product_id, КИЗы);
	КонецЦикла;
КонецПроцедуры

Функция ПередатьДанныеМаркировки(Знач ДанныеМагазина, Знач ДанныеМаркировки, Знач НомерОтправления, Сессия = Неопределено, СеансОбменаОбъект)
	#Если Сервер И Не Сервер Тогда
		СеансОбменаОбъект = Документы.мс_РегистраторИсторииОбменовСМаркетами.СоздатьДокумент();
	#КонецЕсли
	Если Сессия = Неопределено Тогда
		Сессия = ПолучитьСессию(ДанныеМагазина);
	КонецЕсли;
	//Асинхронно отправляем данные маркировок
	ПараметрыЗапроса = ПолучитьПараметрыЗапросаДляПередачиДанныхМаркировкиЗаказа(ДанныеМагазина, ДанныеМаркировки, НомерОтправления);
	РезультатПередачи = ВыполнитьЗапросПередачиДанныхМаркировкиЗаказа(Сессия, ДанныеМагазина, ПараметрыЗапроса, СеансОбменаОбъект);
	Если РезультатПередачи = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокаДанныхЗапросовAPI = СеансОбменаОбъект.ДобавитьСтрокуДанныхЗапросовAPI( , Перечисления.мс_ВидыОбменовСМаркетами.РезультатЗапросаAPIПередачиДанныхМаркировкиЗаказа);
	Если Не РезультатПередачи.result Тогда
		СеансОбменаОбъект.УстановитьРезультатОбменаСОшибками(СтрокаДанныхЗапросовAPI, "Озон");
		
		Возврат Неопределено;
	КонецЕсли;
	СеансОбменаОбъект.УстановитьРезультатОбменаУспешно(СтрокаДанныхЗапросовAPI, "Озон");
	
	Возврат Истина;
КонецФункции

Функция СтатусПередачиДанныхМаркировки(ДанныеМагазина, НомерОтправления, Регистратор, Сессия) Экспорт
	#Если Сервер И Не Сервер Тогда
		Регистратор = Документы.мс_РегистраторИсторииОбменовСМаркетами.СоздатьДокумент();
	#КонецЕсли
	//тут мы должны дождаться результата запроса
	ПараметрыЗапроса = ПолучитьПараметрыЗапросаПолученияСтатусаПередачиДанныхМаркировкиЗаказа(НомерОтправления);
	Для Попыток = 1 По МаксимальноеКоличествоПопытокПолученияСтатусаПередачиДанныхМаркировки() Цикл
		СтатусПередачиДанныхМаркировки = ВыполнитьЗапросПолученияСтатусаПередачиДанныхМаркировкиЗаказа(Сессия, ДанныеМагазина, ПараметрыЗапроса, Попыток, Регистратор);
		Если СтатусПередачиДанныхМаркировки = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		Если СтатусПередачиДанныхМаркировки.status = СтатусДобавленияЭкземпляраСборкаНедоступна() Тогда
			СтрокаДанныхЗапросовAPI = Регистратор.ДобавитьСтрокуДанныхЗапросовAPI( , Перечисления.мс_ВидыОбменовСМаркетами.РезультатЗапросаAPIПередачиДанныхМаркировкиЗаказа);
			
			Регистратор.УстановитьДанныеРезультатаЗапросаAPIGZip(СтатусПередачиДанныхМаркировки.status, СтрокаДанныхЗапросовAPI);
			
			Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.СборкаНедоступна, СтрокаДанныхЗапросовAPI);
			Регистратор.УстановитьРезультатОбменаСОшибками( , "Озон");
			
			Возврат Ложь;
		КонецЕсли;
		Если СтатусПередачиДанныхМаркировки.status = СтатусДобавленияЭкземпляраСборкаДоступна() Тогда
			СтрокаДанныхЗапросовAPI = Регистратор.ДобавитьСтрокуДанныхЗапросовAPI( , Перечисления.мс_ВидыОбменовСМаркетами.РезультатЗапросаAPIПередачиДанныхМаркировкиЗаказа);
			
			Регистратор.УстановитьДанныеРезультатаЗапросаAPIGZip(СтатусПередачиДанныхМаркировки.status, СтрокаДанныхЗапросовAPI);
			
			Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.СборкаДоступна, СтрокаДанныхЗапросовAPI);
			
			Возврат Истина;
		КонецЕсли;
		Если СтатусПередачиДанныхМаркировки.status <> СтатусДобавленияЭкземпляраНаПроверке() Тогда
			СтрокаДанныхЗапросовAPI = Регистратор.ДобавитьСтрокуДанныхЗапросовAPI( , Перечисления.мс_ВидыОбменовСМаркетами.РезультатЗапросаAPIПередачиДанныхМаркировкиЗаказа);
			Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.НеизвестныйСтатус, СтрокаДанныхЗапросовAPI);
			
			Регистратор.УстановитьДанныеРезультатаЗапросаAPIGZip(СтатусПередачиДанныхМаркировки.status, СтрокаДанныхЗапросовAPI);
			
			Регистратор.УстановитьРезультатОбменаСОшибками( , "Озон");
			
			Возврат Ложь;
		КонецЕсли;
		
		мс_ОбщегоНазначения.Пауза(1);
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

Функция ПолучитьЭтикетку(ДанныеМагазина, НомерОтправления, Регистратор, Заказ) Экспорт
	Сессия = ПолучитьСессию(ДанныеМагазина);

	ПараметрыЗапроса = ПолучитьПараметрыЗапросаПолученияЭтикетки(ДанныеМагазина, НомерОтправления);
	Этикетка = ВыполнитьЗапросПолученияЭтикетки(Сессия, ДанныеМагазина, ПараметрыЗапроса, Регистратор, Заказ);

	Возврат Этикетка;
КонецФункции

Функция ПолучитьАктПриемаПередачи(ИдОбмена) Экспорт
КонецФункции

Функция ПолучитьДеревоКатегорий(ДанныеМагазина, ИдКатегории = Неопределено, ИдОбмена) Экспорт
	Сессия = ПолучитьСессию(ДанныеМагазина);

	ПараметрыЗапроса = ПолучитьПараметрыЗапросаПолученияДереваКатегорий(ДанныеМагазина, ИдКатегории);
	ДеревоКатегорий = ВыполнитьЗапросПолученияДереваКатегорий(Сессия, ДанныеМагазина, ПараметрыЗапроса);

	Возврат ДеревоКатегорий;
КонецФункции

Функция ПолучитьХарактеристики(ДанныеМагазина, ИдКатегории) Экспорт
	Сессия = ПолучитьСессию(ДанныеМагазина);

	ПараметрыЗапроса = ПолучитьПараметрыЗапросаПолученияХарактеристик(ДанныеМагазина, ИдКатегории);
	Характеристики = ВыполнитьЗапросПолученияХарактеристик(Сессия, ДанныеМагазина, ПараметрыЗапроса);

	Возврат Характеристики;
КонецФункции

Функция ПолучитьЗначенияХарактеристики(ДанныеМагазина, ИдКатегории, ИдСправочника) Экспорт
	Сессия = ПолучитьСессию(ДанныеМагазина);

	ПараметрыЗапроса = ПолучитьПараметрыЗапросаПолученияЗначенияХарактеристики(ДанныеМагазина, ИдКатегории, ИдСправочника);
	ЗначенияХарактеристики = ВыполнитьЗапросПолученияЗначенияХарактеристики(Сессия, ДанныеМагазина, ПараметрыЗапроса);

	Возврат ЗначенияХарактеристики;
КонецФункции

Функция ПолучитьСтатусЗаказа(ДанныеМагазина, НомерОтправления, Регистратор, Заказ) Экспорт
	Сессия = ПолучитьСессию(ДанныеМагазина);
	ПараметрыЗапроса = ПолучитьПараметрыЗапросаПолученияСтатусаЗаказа(НомерОтправления);
	Результат = ВыполнитьЗапросПолученияСтатусаЗаказа(Сессия, ДанныеМагазина, ПараметрыЗапроса, Регистратор);
	Если Результат = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	СтатусЗаказа = Результат.result.status;
	
	Возврат СтатусЗаказа;
КонецФункции

Функция Акции(ДанныеМагазина, Регистратор) Экспорт
	Сессия = ПолучитьСессию(ДанныеМагазина);
	Результат = ВыполнитьЗапросПолученияАкций(Сессия, ДанныеМагазина, Регистратор);
	Если Результат = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если Результат.result.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеАкций = ДанныеАкций();
	#Если Сервер И Не Сервер Тогда
		ДанныеАкций = Новый ТаблицаЗначений;
	#КонецЕсли
	Для Каждого ДанныеАкции Из Результат.result Цикл
		НоваяСтрока = ДанныеАкций.Добавить();
		НоваяСтрока.Идентификатор             = ДанныеАкции.id;
		НоваяСтрока.Наименование              = ДанныеАкции.title;
		НоваяСтрока.Тип                       = ДанныеАкции.action_type;
		НоваяСтрока.Описание                  = ДанныеАкции.description;
		НоваяСтрока.ДатаНачала                = ДанныеАкции.date_start;
		НоваяСтрока.ДатаОкончания             = ДанныеАкции.date_end;
		Если ЗначениеЗаполнено(ДанныеАкции.freeze_date) Тогда
			НоваяСтрока.ДатаПриостановки      = XMLЗначение(Тип("Дата"), ДанныеАкции.freeze_date);
		Иначе
			НоваяСтрока.ДатаПриостановки      = Дата(1, 1, 1);
		КонецЕсли;
		НоваяСтрока.КоличествоДоступных       = ДанныеАкции.potential_products_count;
		НоваяСтрока.КоличествоУчаствующих     = ДанныеАкции.participating_products_count;
		НоваяСтрока.Участвуем                 = ДанныеАкции.is_participating;
		НоваяСтрока.НуженПромокод             = ДанныеАкции.is_voucher_action;
		НоваяСтрока.КоличествоЗаблокированных = ДанныеАкции.banned_products_count;
		НоваяСтрока.СЦелевой                  = ДанныеАкции.with_targeting;
		НоваяСтрока.СуммаЗаказа               = ДанныеАкции.order_amount;
		НоваяСтрока.ТипСкидки                 = ДанныеАкции.discount_type;
		НоваяСтрока.РазмерСкидки              = ДанныеАкции.discount_value;
	КонецЦикла;
	
	Возврат ДанныеАкций;
КонецФункции

Функция ЗагрузитьЦены(ДанныеМагазина, СеансОбменаОбъект) Экспорт
	#Если Сервер И Не Сервер Тогда
		СеансОбменаОбъект = Документы.мс_РегистраторИсторииОбменовСМаркетами.СоздатьДокумент();
	#КонецЕсли
	
	ДанныеЦенТоваров = ДанныеЦенТоваров(ДанныеМагазина, СеансОбменаОбъект);
	
	Если ДанныеЦенТоваров = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	#Если Сервер И Не Сервер Тогда
		ДанныеЦенТоваров = Новый ТаблицаЗначений;
	#КонецЕсли
	
	Если ДанныеЦенТоваров.Количество() = 0 Тогда
		Возврат ДанныеЦенТоваров;
	КонецЕсли;
	
	ДополнитьДанныеЦенТоваров(ДанныеЦенТоваров, СеансОбменаОбъект);
	
	Возврат ДанныеЦенТоваров;
КонецФункции

#КонецОбласти

#Область ОбменССайтом

Функция ПолучитьДанныеФида(ДанныеМагазина) Экспорт
	ИдМагазина = СокрЛП(ДанныеМагазина.Идентификатор);
	АдресФида = СокрЛП(ДанныеМагазина.АдресФида);
	//ИдМагазина = "0";
	//АдресФида = "https://power-water.ru/export/goods.xml";
	Попытка
		Результат = КоннекторHTTP.Get(АдресФида, , Новый Структура("ПроверятьSSL", Ложь));
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	#Область ЧтениеДокументаДОМ
	//Читаем файл из временного хранилища
	Поток = Результат.Тело.ОткрытьПотокДляЧтения();
	ЧтениеХМЛ = Новый ЧтениеXML;
	ЧтениеХМЛ.ОткрытьПоток(Поток);
	ПостроительДОМ = Новый ПостроительDOM;
	ДокументДОМ	= ПостроительДОМ.Прочитать(ЧтениеХМЛ);
	ЧтениеХМЛ.Закрыть();
	Поток.Закрыть();
	#КонецОбласти

	//#Область ОбходДереваДОМ
	//Обходим дерево ДОМ
	ОбходДереваDOM = Новый ОбходДереваDOM(ДокументДОМ);
	//Получаем корневой узел
	ОбходДереваDOM.СледующийУзел();
	//Получаем первый вложенный узел
	УзелDOM = ОбходДереваDOM.СледующийУзел();
	Если УзелDOM = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	ДанныеФида = Новый ТаблицаЗначений;
	ДанныеФида.Колонки.Добавить("ИдБитрикс", ОбщегоНазначения.ОписаниеТипаСтрока(80));
	ДанныеФида.Колонки.Добавить("Остаток", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	ДанныеФида.Индексы.Добавить("ИдБитрикс");
	Для Каждого МагазинDOM Из УзелDOM.ДочерниеУзлы Цикл
		Для Каждого ПозицииDOM Из МагазинDOM.ДочерниеУзлы Цикл
			Если ПозицииDOM.ИмяУзла <> "offers" Тогда
				Продолжить;
			КонецЕсли;
			Для Каждого ПозицияDOM Из ПозицииDOM.ДочерниеУзлы Цикл
				ИдБитрикс = ПозицияDOM.Атрибуты.ПолучитьИменованныйЭлемент("id").Значение;
				Для Каждого ДанныеПозицииDOM Из ПозицияDOM.ДочерниеУзлы Цикл
					Если ДанныеПозицииDOM.ИмяУзла <> "outlets" Тогда
						Продолжить;
					КонецЕсли;
					Для Каждого СкладDOM Из ДанныеПозицииDOM.ДочерниеУзлы Цикл
						//Если СкладDOM.Атрибуты.ПолучитьИменованныйЭлемент("id").Значение <> ИдМагазина Тогда
						//	Продолжить;
						//КонецЕсли;
						ОстатокСтрокой = СкладDOM.Атрибуты.ПолучитьИменованныйЭлемент("instock").Значение;
						Остаток = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ОстатокСтрокой);
						НайденныеСтроки = ДанныеФида.НайтиСтроки(Новый Структура("ИдБитрикс", ИдБитрикс));
						Если НайденныеСтроки.Количество() > 0 Тогда
							НайденнаяСтрока = НайденныеСтроки[0];
							НайденнаяСтрока.ИдБитрикс = ИдБитрикс;
							НайденнаяСтрока.Остаток = НайденнаяСтрока.Остаток + Остаток;
						Иначе
							НоваяСтрока = ДанныеФида.Добавить();
							НоваяСтрока.ИдБитрикс = ИдБитрикс;
							НоваяСтрока.Остаток = Остаток;
						КонецЕсли;

						Прервать;
					КонецЦикла;

					Прервать;
				КонецЦикла;
			КонецЦикла;

			Прервать;
		КонецЦикла;
	КонецЦикла;

	Возврат ДанныеФида;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции
 
#Область ЗаполениеОбъектов

Функция СоздатьЗаказ(НоменклатураЗаказа, ДанныеМагазина)
	ДокументОбъект = Документы.Заказ.СоздатьДокумент();
	СуммаОплатыМаркет = 0;
	Для Каждого ТекСтрока Из НоменклатураЗаказа Цикл
		НоваяСтрока = ДокументОбъект.Партии.Добавить();
		Если ТекСтрока.Квант > 0 Тогда
			НоваяСтрока.Цена		 = ТекСтрока.Цена / ТекСтрока.Квант;
			НоваяСтрока.Количество	 = ТекСтрока.Количество * ТекСтрока.Квант;
		Иначе
			НоваяСтрока.Цена		 = ТекСтрока.Цена;
			НоваяСтрока.Количество	 = ТекСтрока.Количество;
		КонецЕсли;
		НоваяСтрока.Номенклатура = ТекСтрока.Номенклатура;
		ДокументОбъект.РассчитатьСуммыПоСтрокеТЧ(НоваяСтрока);
		СуммаОплатыМаркет = СуммаОплатыМаркет + ТекСтрока.СуммаОплатыМаркет;
	КонецЦикла;
	
	//Из данных последней строки заполним шапку
	ЗаполнитьЗначенияСвойств(ДокументОбъект, ЗначениеНастроекПовтИсп.НастройкиРаботыССервисомOzon());
	ДокументОбъект.Дата	= ТекСтрока.ДатаЗаказа;
	ДокументОбъект.УстановитьНовыйНомер();
	ДокументОбъект.мс_НомерОзон		= ТекСтрока.НомерОтправления;
	ДокументОбъект.НомерОтправления = ТекСтрока.НомерЗаказа;
	ДокументОбъект.грНомерЗаказаССайта = СтрШаблон("OZ_%1", ТекСтрока.НомерЗаказа);
	ДокументОбъект.ДатаДоставки 	= ТекСтрока.ДатаДоставки;
	ДокументОбъект.ВремяДоставкиС	= ДанныеМагазина.ВремяДоставкиС;
	ДокументОбъект.ВремяДоставкиДо	= ДанныеМагазина.ВремяДоставкиДо;
	ДокументОбъект.Логист			= ДанныеМагазина.Логист;
	ДокументОбъект.СтатусДокумента	= Перечисления.СтатусыДвиженияЗаказа.Новый;
	ДокументОбъект.ТоварСоСклада	= Истина;
	ДокументОбъект.КоличествоМест	= 1;
	ДокументОбъект.ТипЦены			= Справочники.ТипыЦен.Интернет;
	ДокументОбъект.ТипОплаты		= Перечисления.ТипыОплаты.мс_ОнлайнОзон;
	ДокументОбъект.АдресСтрокой		= ТекСтрока.АдресСтрокой;
	ДокументОбъект.Телефон			= ТекСтрока.Телефон;
	ДокументОбъект.мс_ФИО			= ТекСтрока.ФИО;
	ДокументОбъект.мс_ИДМагазина	= ДанныеМагазина.Ссылка;
	ДокументОбъект.мс_ИдСкладаОзон	= ТекСтрока.ИдСклада;
	Если ЗначениеЗаполнено(ДокументОбъект.Фирма) Тогда
		НалогообложениеНДС = ЗначениеНастроекПовтИсп.ПолучитьНалогообложениеНДС(ДокументОбъект.Фирма); 	
		ДокументОбъект.УчитыватьНДС = НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	КонецЕсли;

	ДокументОбъект.ОбновитьТЧТоварыПоДаннымТЧПартии();
	ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(ДокументОбъект.Партии);
	СуммаВебОплаты = 0;
	Если СуммаОплатыМаркет > 0 Тогда
		ЗаполнитьЗначенияСвойств(ДокументОбъект.грОплаты.Добавить(), Новый Структура("ВидыОплаты, Сумма", Справочники.грВидыОплат.ОнлайнОзон, СуммаОплатыМаркет));
		СуммаВебОплаты = СуммаВебОплаты + СуммаОплатыМаркет; 
	КонецЕсли;
	СуммаДокумента = ДокументОбъект.Товары.Итог("Всего");
	ДокументОбъект.СуммаВебОплаты = СуммаВебОплаты;
	ДокументОбъект.СуммаНал 	  = СуммаДокумента - СуммаВебОплаты;
	ДокументОбъект.СуммаДокумента = СуммаДокумента;

	Возврат ДокументОбъект;
КонецФункции

#КонецОбласти

#Область ПолучениеДанныхБД

#Область ПолучениеДанныхОстатков

Процедура ОбновитьОстаткиДанными(ДанныеМагазина, ДанныеОстатков, Регистратор)
	#Если Сервер И Не Сервер Тогда
		Регистратор = Документы.мс_РегистраторИсторииОбменовСМаркетами.СоздатьДокумент();
	#КонецЕсли
	Сессия = ПолучитьСессию(ДанныеМагазина);
	Если ДанныеОстатков.КоличествоЗаписей > РекомендуемоеКоличествоВПорцииНоменклатуры() Тогда
		ВыраженияПолей = Новый Структура("Идентификатор, Ресурс", "Код", "Остаток");
		Если ДанныеОстатков.Свойство("Менеджер") Тогда
			ПорцииДанныеОстатков = РазбитьТаблицуИзМенеджераНаПорции(ДанныеОстатков, РекомендуемоеКоличествоВПорцииНоменклатуры(), ВыраженияПолей);
		ИначеЕсли ДанныеОстатков.Свойство("Таблица") Тогда
			ПорцииДанныеОстатков = РазбитьТЗНаПорции(ДанныеОстатков, РекомендуемоеКоличествоВПорцииНоменклатуры(), ВыраженияПолей);
		Иначе
			ОбновлениеОстатковДаннымиНеизвестныйИсточникДанных(ДанныеОстатков);
			//Регистратор.ДобавитьЗапись
			Возврат;
		КонецЕсли;
		НомерПорции = 1;
		ВыборкаПорции = ПорцииДанныеОстатков.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПорции.Следующий() Цикл
			ПараметрыЗапроса = ПолучитьПараметрыЗапросаОбновленияОстатков(ДанныеМагазина, ВыборкаПорции);
			Результат = ВыполнитьЗапросОбновленияОстатков(Сессия, ДанныеМагазина, ПараметрыЗапроса, Регистратор, НомерПорции);
			Если Результат = Неопределено Тогда
				НомерПорции = НомерПорции + 1;
				Продолжить;
			КонецЕсли;
			ОбработыватьРезультатОбновленияОстаков = Истина;
			Если ОбработыватьРезультатОбновленияОстаков Тогда
				ОбработатьРезультатОбновленияОстатков(ДанныеМагазина, НомерПорции, ПараметрыЗапроса.ОстаткиНоменклатуры, Результат.result);
			КонецЕсли;
			НомерПорции = НомерПорции + 1;
		КонецЦикла;
	Иначе
		Если ДанныеОстатков.Свойство("Менеджер") Тогда
			ВыборкаПорции = ДанныеОстатков.Менеджер.Таблицы.Найти("ВТ_Данные").ПолучитьДанные();
			ПараметрыЗапроса = ПолучитьПараметрыЗапросаОбновленияОстатков(ДанныеМагазина, ВыборкаПорции);
			Результат = ВыполнитьЗапросОбновленияОстатков(Сессия, ДанныеМагазина, ПараметрыЗапроса, Регистратор);
			Если Результат = Неопределено Тогда
				Возврат;
			КонецЕсли;
			ОбработыватьРезультатОбновленияОстаков = Истина;
			Если ОбработыватьРезультатОбновленияОстаков Тогда
				ОбработатьРезультатОбновленияОстатков(ДанныеМагазина, НомерПорции, ПараметрыЗапроса.ОстаткиНоменклатуры, Результат.result);
			КонецЕсли;
		ИначеЕсли ДанныеОстатков.Свойство("Таблица") Тогда

		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьМенеджерСТаблицейОстатков(ДанныеМагазина, Номенклатура, Регистратор)
	#Если Сервер И Не Сервер Тогда
		Регистратор = Документы.мс_РегистраторИсторииОбменовСМаркетами.СоздатьДокумент();
	#КонецЕсли
	Запрос = ПолучитьЗапросОстатки(ДанныеМагазина, Номенклатура, Регистратор);
	Если Запрос = Неопределено Тогда
		ОбновлениеОстатковОшибкаПолученияЗапросаОстатков(ДанныеМагазина, Номенклатура);

		Возврат Неопределено;
	КонецЕсли;

	СтрокаДанныхЗапросовБД = Регистратор.ДобавитьСтрокуДанныхЗапросовБД(Перечисления.мс_ВидыОбменовСМаркетами.ВыполнениеЗапросаПолученияОстатков);
	Регистратор.УстановитьДанныеЗапросаБДGZip(Запрос, СтрокаДанныхЗапросовБД);

	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Результат = Запрос.ВыполнитьПакет();
	КоличествоЗаписей = Результат[Результат.ВГраница()].Выгрузить()[0].Количество;
	Если КоличествоЗаписей = 0 Тогда
		ПолучениеМенеджераСТаблицейОстатковПустойРезультат(Номенклатура);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.ПустойРезультатЗапроса, СтрокаДанныхЗапросовБД);

		Возврат Неопределено;
	КонецЕсли;

	Регистратор.УстановитьРезультатЗапросаGZip(Запрос.МенеджерВременныхТаблиц, СтрокаДанныхЗапросовБД);
	Регистратор.УстановитьРезультатОбменаУспешно(СтрокаДанныхЗапросовБД, "Озон");

	Возврат Новый Структура("Менеджер, КоличествоЗаписей", Запрос.МенеджерВременныхТаблиц, КоличествоЗаписей);
КонецФункции

Функция ПолучитьЗапросОстатки(ДанныеМагазина, Номенклатура, Регистратор)
	#Если Сервер И Не Сервер Тогда
		Регистратор = Документы.мс_РегистраторИсторииОбменовСМаркетами.СоздатьДокумент();
	#КонецЕсли
	Макет = ПолучитьМакетКомпоновкиОстатки(ДанныеМагазина, Номенклатура, мс_РаботаСОзонКлиентСервер.ИмяВариантаВыгрузкиОстатков(), Регистратор);
	Если Макет = Неопределено Тогда
		ОбновлениеОстатковОшибкаПолученияМакетаСКД(ДанныеМагазина, Номенклатура);
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокаДанныхЗапросовБД = Регистратор.ДобавитьСтрокуДанныхЗапросовБД(Перечисления.мс_ВидыОбменовСМаркетами.СозданиеЗапросаБДПолученияОстатков);
	
	ТекстЗапроса = Макет.НаборыДанных.ОсновнойНаборДанных.Запрос;
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Запрос = Новый Запрос(ПолучитьДоработанныйТекстЗапросаТаблицыОстатков(ТекстЗапроса));
		Запрос.Параметры.Вставить("Номенклатура", Номенклатура);
		
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.СозданЗапросБДПолученияОстатковДляНоменклатуры, СтрокаДанныхЗапросовБД);
	Иначе
		Запрос = Новый Запрос(ЗаменитьТаблицуФида(ТекстЗапроса));
		ДанныеФида = ТоварыМагазина(ДанныеМагазина, Регистратор);
		Если ДанныеФида = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		Запрос.Параметры.Вставить("ДанныеФида", ДанныеФида);
		
		Регистратор.УстановитьРезультатОбменаУспешно(СтрокаДанныхЗапросовБД, "Озон");
	КонецЕсли;
	Для Каждого Параметр Из Макет.ЗначенияПараметров Цикл
		Запрос.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
	КонецЦикла;
	
	Возврат Запрос;
КонецФункции

Функция ПолучитьМакетКомпоновкиОстатки(ДанныеМагазина, Номенклатура, ИмяВарианта = "Основной", Регистратор) Экспорт
	#Если Сервер И Не Сервер Тогда
		Регистратор = Документы.мс_РегистраторИсторииОбменовСМаркетами.СоздатьДокумент();
	#КонецЕсли
	СтрокаДанныхЗапросовБД = Регистратор.ДобавитьСтрокуДанныхЗапросовБД(Перечисления.мс_ВидыОбменовСМаркетами.ПолучениеМакетаКомпоновки);

	Если Не ЗначениеЗаполнено(ДанныеМагазина.Модель) Или ЭтоФБС(ДанныеМагазина) Тогда
		Схема = ПолучитьМакет("ОстаткиИЦеныФБС");
	ИначеЕсли ДанныеМагазина.Модель = Перечисления.мс_МодельМаркетплейса.ДБС Тогда
		Схема = ПолучитьМакет("ОстаткиИЦеныДБС");
	Иначе
		//ОбновлениеОстатковОшибкаПолученияМакетаСхемыСКД(Модель);
		Регистратор.УстановитьРезультатОбменаСОшибками(СтрокаДанныхЗапросовБД, "Озон");

		Возврат Неопределено;
	КонецЕсли;
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
	Настройки = Схема.НастройкиПоУмолчанию;
	Для Каждого ТекВариант Из Схема.ВариантыНастроек Цикл
		Если ТекВариант.Имя <> ИмяВарианта Тогда
			Продолжить;
		КонецЕсли;
		Настройки = ТекВариант.Настройки;
		Прервать;
	КонецЦикла;
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	ЗаполнитьНастройкиКомпоновщика(КомпоновщикНастроек, Номенклатура, ДанныеМагазина);
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

	Макет = КомпоновщикМакета.Выполнить(Схема, КомпоновщикНастроек.ПолучитьНастройки());

	Регистратор.УстановитьРезультатОбменаУспешно(СтрокаДанныхЗапросовБД, "Озон");

	Возврат Макет;
КонецФункции

#КонецОбласти

#Область ПолучениеДанныхЦен

Процедура ОбновитьЦеныДанными(ДанныеМагазина, ДанныеЦен, Регистратор)
	Сессия = ПолучитьСессию(ДанныеМагазина);
	Если ДанныеЦен.КоличествоЗаписей > РекомендуемоеКоличествоВПорцииНоменклатуры() Тогда
		ВыраженияПолей = Новый Структура("Идентификатор, Ресурс", "Код", "Цена");
		Если ДанныеЦен.Свойство("Менеджер") Тогда
			ПорцииДанныеЦен = РазбитьТаблицуИзМенеджераНаПорции(ДанныеЦен, РекомендуемоеКоличествоВПорцииНоменклатуры(), ВыраженияПолей);
		ИначеЕсли ДанныеЦен.Свойство("Таблица") Тогда
			ПорцииДанныеЦен = РазбитьТЗНаПорции(ДанныеЦен, РекомендуемоеКоличествоВПорцииНоменклатуры(), ВыраженияПолей);
		Иначе
			Отказ = Истина;
			ОбновлениеЦенДаннымиНеизвестныйИсточникДанных(ДанныеЦен);
			Возврат;
		КонецЕсли;
		НомерПорции = 1;
		ВыборкаПорции = ПорцииДанныеЦен.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПорции.Следующий() Цикл
			ПараметрыЗапроса = ПолучитьПараметрыЗапросаОбновленияЦен(ДанныеМагазина, ВыборкаПорции);
			Результат = ВыполнитьЗапросОбновленияЦен(Сессия, ДанныеМагазина, ПараметрыЗапроса, НомерПорции, Регистратор);
			НомерПорции = НомерПорции + 1;
			Если Результат = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			//ОбработатьРезультатОбновленияЦен(Результат);
		КонецЦикла;
	Иначе
		Если ДанныеЦен.Свойство("Менеджер") Тогда
			ВыборкаПорции = ДанныеЦен.Менеджер.Таблицы.Найти("ВТ_Данные").ПолучитьДанные();
			ПараметрыЗапроса = ПолучитьПараметрыЗапросаОбновленияЦен(ДанныеМагазина, ВыборкаПорции);
			Отказ = Ложь;
			Результат = ВыполнитьЗапросОбновленияЦен(Сессия, ДанныеМагазина, ПараметрыЗапроса, Неопределено, Регистратор);
			Если Результат = Неопределено Тогда
				Возврат;
			КонецЕсли;
			//ОбработатьРезультатОбновленияЦен(Результат);
		ИначеЕсли ДанныеЦен.Свойство("Таблица") Тогда

		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьМенеджерСТаблицейЦен(ДанныеМагазина, Номенклатура, Регистратор)
	#Если Сервер И Не Сервер Тогда
		Регистратор = Документы.мс_РегистраторИсторииОбменовСМаркетами.СоздатьДокумент();
	#КонецЕсли
	Запрос = ПолучитьЗапросЦены(ДанныеМагазина, Номенклатура, Регистратор);
	Если Запрос = Неопределено Тогда
		ОбновлениеЦенОшибкаПолученияЗапросаЦен(ДанныеМагазина, Номенклатура);

		Возврат Неопределено;
	КонецЕсли;

	СтрокаДанныхЗапросовБД = Регистратор.ДобавитьСтрокуДанныхЗапросовБД(Перечисления.мс_ВидыОбменовСМаркетами.ВыполнениеЗапросаПолученияЦен);
	Регистратор.УстановитьДанныеЗапросаБДGZip(Запрос, СтрокаДанныхЗапросовБД);

	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Результат = Запрос.ВыполнитьПакет();
	КоличествоЗаписей = Результат[Результат.ВГраница()].Выгрузить()[0].Количество;
	Если КоличествоЗаписей = 0 Тогда
		ПолучениеМенеджераСТаблицейЦенПустойРезультат(Номенклатура);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.ПустойРезультатЗапроса, СтрокаДанныхЗапросовБД);

		Возврат Неопределено;
	КонецЕсли;

	Регистратор.УстановитьРезультатЗапросаGZip(Запрос.МенеджерВременныхТаблиц, СтрокаДанныхЗапросовБД);
	Регистратор.УстановитьРезультатОбменаУспешно(СтрокаДанныхЗапросовБД, "Озон");

	Возврат Новый Структура("Менеджер, КоличествоЗаписей", Запрос.МенеджерВременныхТаблиц, КоличествоЗаписей);
КонецФункции

Функция ПолучитьЗапросЦены(ДанныеМагазина, Номенклатура, Регистратор)
	#Если Сервер И Не Сервер Тогда
		Регистратор = Документы.мс_РегистраторИсторииОбменовСМаркетами.СоздатьДокумент();
	#КонецЕсли
	Макет = ПолучитьМакетКомпоновкиЦены(ДанныеМагазина, Номенклатура, "ДляВыгрузкиЦен", Регистратор);
	Если Макет = Неопределено Тогда
		ОбновлениеЦенОшибкаПолученияМакетаСКД(ДанныеМагазина, Номенклатура);
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокаДанныхЗапросовБД = Регистратор.ДобавитьСтрокуДанныхЗапросовБД(Перечисления.мс_ВидыОбменовСМаркетами.СозданиеЗапросаБДПолученияОстатков);
	
	ТекстЗапроса = Макет.НаборыДанных.ОсновнойНаборДанных.Запрос;
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Запрос = Новый Запрос(ПолучитьДоработанныйТекстЗапросаТаблицыОстатков(ТекстЗапроса));
		Запрос.Параметры.Вставить("Номенклатура", Номенклатура);
		
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.СозданЗапросБДПолученияЦенДляНоменклатуры, СтрокаДанныхЗапросовБД);
	Иначе
		Запрос = Новый Запрос(ЗаменитьТаблицуФида(ТекстЗапроса));
		ДанныеФида = ТоварыМагазина(ДанныеМагазина, Регистратор);
		Если ДанныеФида = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		Запрос.Параметры.Вставить("ДанныеФида", ДанныеФида);
		
		Регистратор.УстановитьРезультатОбменаУспешно(СтрокаДанныхЗапросовБД, "Озон");
	КонецЕсли;
	Для Каждого Параметр Из Макет.ЗначенияПараметров Цикл
		Запрос.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
	КонецЦикла;
	
	Возврат Запрос;
КонецФункции

Функция ПолучитьМакетКомпоновкиЦены(ДанныеМагазина, Номенклатура, ИмяВарианта = "Основной", Регистратор) Экспорт
	#Если Сервер И Не Сервер Тогда
		Регистратор = Документы.мс_РегистраторИсторииОбменовСМаркетами.СоздатьДокумент();
	#КонецЕсли
	Если Не ЗначениеЗаполнено(ДанныеМагазина.Модель) Или ЭтоФБС(ДанныеМагазина) Тогда
		Схема = ПолучитьМакет("ОстаткиИЦеныФБС");
	ИначеЕсли ДанныеМагазина.Модель = Перечисления.мс_МодельМаркетплейса.ДБС Тогда
		Схема = ПолучитьМакет("ОстаткиИЦеныДБС");
	Иначе
		Регистратор.РезультатОбмена = Перечисления.мс_РезультатыОбменов.НеУдалосьОпределитьМакетКомпоновки;
		Регистратор.Записать();
		//ОбновлениеОстатковОшибкаПолученияМакетаСхемыСКД(Модель);
		Возврат Неопределено;
	КонецЕсли;
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
	Настройки = Схема.НастройкиПоУмолчанию;
	Для Каждого ТекВариант Из Схема.ВариантыНастроек Цикл
		Если ТекВариант.Имя <> ИмяВарианта Тогда
			Продолжить;
		КонецЕсли;
		Настройки = ТекВариант.Настройки;
		Прервать;
	КонецЦикла;
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	ЗаполнитьНастройкиКомпоновщика(КомпоновщикНастроек, Номенклатура, ДанныеМагазина);
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

	Макет = КомпоновщикМакета.Выполнить(Схема, КомпоновщикНастроек.ПолучитьНастройки());

	Возврат Макет;
КонецФункции

Функция ПолучитьНаценку_ДБС() Экспорт
	Наценка = ЗначениеНастроекПовтИсп.ПолучитьЗначениеОбщейКонстанты(ПланыВидовХарактеристик.мс_ОбщиеКонстанты.НаценкаОзонДБС);
	Если Не ЗначениеЗаполнено(Наценка) Тогда
		Наценка = 1;
	КонецЕсли;

	Возврат Наценка;
КонецФункции

Функция ПолучитьСкидку_ДБС() Экспорт
	Скидка = ЗначениеНастроекПовтИсп.ПолучитьЗначениеОбщейКонстанты(ПланыВидовХарактеристик.мс_ОбщиеКонстанты.СкидкаОзонДБС);
	Если Не ЗначениеЗаполнено(Скидка) Тогда
		Скидка = 1;
	КонецЕсли;

	Возврат Скидка;
КонецФункции

#КонецОбласти

#Область ПолучениеСпискаТоваров

Функция ТоварыМагазина(ДанныеМагазина, Регистратор) Экспорт
	#Если Сервер И Не Сервер Тогда
		Регистратор = Документы.мс_РегистраторИсторииОбменовСМаркетами.СоздатьДокумент();
	#КонецЕсли
	
	Сессия = ПолучитьСессию(ДанныеМагазина);
	
	СтрокаДанныхЗапросовБД = Регистратор.ДобавитьСтрокуДанныхЗапросовБД(Перечисления.мс_ВидыОбменовСМаркетами.ПолучениеДанныхФидаДляОстатков);
	
	КодыМаркета      = КодыМаркета();
	НомерПорции      = 1;
	ПараметрыЗапроса = ПараметрыЗапросаПолученияСпискаТоваров();
	
	Пока Истина Цикл
		СписокТоваров = ВыполнитьЗапросПолученияСпискаТоваров(Сессия, ДанныеМагазина, ПараметрыЗапроса, НомерПорции, Регистратор);
		Если СписокТоваров = Неопределено Тогда
			Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.НеУдалосьПолучитьДанныеФидаДляОстатков, СтрокаДанныхЗапросовБД);
			
			Возврат Неопределено;
		КонецЕсли;
		
		Для Каждого ТекТовар Из СписокТоваров.result.items Цикл
			ЗаполнитьЗначенияСвойств(КодыМаркета.Добавить(), Новый Структура("Код", ТекТовар.offer_id));
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(СписокТоваров.result.last_id) Тогда
			Прервать;
		КонецЕсли;
		
		НомерПорции              = НомерПорции + 1;
		ПараметрыЗапроса.last_id = СписокТоваров.result.last_id;
	КонецЦикла;
	
	Регистратор.УстановитьРезультатОбменаУспешно(СтрокаДанныхЗапросовБД, "Озон");
	
	Возврат КодыМаркета;
КонецФункции

Функция КодыМаркетаПоИдентификаторам(ДанныеМагазина, КодыТоваров, Сессия, Регистратор) Экспорт
	ПараметрыЗапроса = ПараметрыЗапросаПолученияСпискаТоваровПоИдентификаторам(КодыТоваров);
	СписокТоваров    = ВыполнитьЗапросПолученияСпискаТоваровПоИдентификаторам(Сессия, ДанныеМагазина, ПараметрыЗапроса, , Регистратор);
	Если СписокТоваров = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КодыМаркета = КодыМаркета();
	#Если Сервер И Не Сервер Тогда
		КодыМаркета = Новый ТаблицаЗначений;
	#КонецЕсли
	Для Каждого ТекТовар Из СписокТоваров.Получить("result").Получить("items") Цикл
		КодМаркета = ТекТовар.Получить("fbs_sku");
		Если Не ЗначениеЗаполнено(КодМаркета) Тогда
			КодМаркета = ТекТовар.Получить("sku");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(КодыМаркета.Добавить(), Новый Структура("Код, КодМаркета", ТекТовар.Получить("offer_id"), КодМаркета));
	КонецЦикла;
	
	КодыМаркета.Свернуть("Код, КодМаркета");
	
	Возврат КодыМаркета;
КонецФункции

Функция ПолучитьМенеджерСТаблицейТоваров(ДанныеМагазина, Номенклатура)
	Возврат Новый Структура("Менеджер, КоличествоЗаписей", , );
КонецФункции

#КонецОбласти

#Область ПолучениеДанныхЗаказов

Функция СоставЗаказа(Знач ДанныеМагазина, Знач Заказ, Сессия, Регистратор)
	#Если Сервер И Не Сервер Тогда
		Регистратор = Документы.мс_РегистраторИсторииОбменовСМаркетами.СоздатьДокумент();
	#КонецЕсли
	Запрос = Новый Запрос(
	#Область ТекстЗапроса
		"ВЫБРАТЬ
		|	ЗаказПартии.Номенклатура КАК Номенклатура,
		|	ЗаказПартии.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	МАКСИМУМ(ЗаказПартии.Номенклатура.Код) КАК Код,
		|	МАКСИМУМ(ЕСТЬNULL(мс_КодыТоваровМаркетов.КодМаркета, ВЫРАЗИТЬ(0 КАК ЧИСЛО(19, 0)))) КАК КодМаркета,
		|	СУММА(ЗаказПартии.Количество) КАК Количество
		|ПОМЕСТИТЬ ВТ_СоставЗаказа
		|ИЗ
		|	Документ.Заказ.Партии КАК ЗаказПартии
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.мс_КодыТоваровМаркетов КАК мс_КодыТоваровМаркетов
		|		ПО (мс_КодыТоваровМаркетов.Маркет = &Маркет)
		|			И ЗаказПартии.Номенклатура = мс_КодыТоваровМаркетов.Номенклатура
		|ГДЕ
		|	ЗаказПартии.Ссылка = &Заказ
		|	И ЗаказПартии.ТипНоменклатуры <> &РекламнаяПродукция
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказПартии.Номенклатура,
		|	ЗаказПартии.ИдентификаторСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СоставЗаказа.Код КАК Код
		|ИЗ
		|	ВТ_СоставЗаказа КАК ВТ_СоставЗаказа
		|ГДЕ
		|	ВТ_СоставЗаказа.КодМаркета = 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_СоставЗаказа.Код");
	#КонецОбласти
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Параметры.Вставить("Заказ", Заказ);
	Запрос.Параметры.Вставить("Маркет", ДанныеМагазина.Маркет);
	Запрос.Параметры.Вставить("РекламнаяПродукция", ЗначениеНастроекПовтИсп.ТипНоменклатурыРекламнаяПродукция());
	
	СтрокаДанныхЗапросовБД = Регистратор.ДобавитьСтрокуДанныхЗапросовБД(Перечисления.мс_ВидыОбменовСМаркетами.ВыполнениеЗапросаБДПолученияДанныхЗаказа);
	Регистратор.УстановитьДанныеЗапросаБДGZip(Запрос, СтрокаДанныхЗапросовБД);
	
	//ОбщегоНазначения.ЗапросВСтрокуXML(Запрос)
	Результат = Запрос.ВыполнитьПакет();
	Если Результат[0].Пустой() Тогда
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.ПустойРезультатЗапроса, СтрокаДанныхЗапросовБД);
		Регистратор.УстановитьРезультатОбменаСОшибками( , "Озон");
		
		Возврат Неопределено;
	КонецЕсли;
	
	Регистратор.УстановитьРезультатЗапросаGZip(Результат, СтрокаДанныхЗапросовБД);
	Регистратор.УстановитьРезультатОбменаУспешно(СтрокаДанныхЗапросовБД);
	
	Если Результат[1].Пустой() Тогда
		Возврат Запрос.МенеджерВременныхТаблиц;
	КонецЕсли;
	
	КодыНоменклатурыБезКодаМаркета = Результат[1].Выгрузить().ВыгрузитьКолонку("Код");
	
	КодыМаркета = КодыМаркетаПоИдентификаторам(ДанныеМагазина, КодыНоменклатурыБезКодаМаркета, Сессия, Регистратор);
	Если КодыМаркета = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДополнитьСоставЗаказа(Запрос.МенеджерВременныхТаблиц, КодыМаркета, Регистратор);
	
	Возврат Запрос.МенеджерВременныхТаблиц;
КонецФункции

Процедура ДополнитьСоставЗаказа(МенеджерВТ, КодыМаркета, Регистратор)
	#Если Сервер И Не Сервер Тогда
		Регистратор = Документы.мс_РегистраторИсторииОбменовСМаркетами.СоздатьДокумент();
	#КонецЕсли
	
	//Обновляем данные во временной таблице
	Запрос = Новый Запрос(
	#Область ТекстЗапроса
		"ВЫБРАТЬ
		|	КодыМаркета.КодМаркета КАК КодМаркета,
		|	КодыМаркета.Код КАК Код
		|ПОМЕСТИТЬ ВТ_КодыМаркета
		|ИЗ
		|	&КодыМаркета КАК КодыМаркета
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Код
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СоставЗаказа.Номенклатура КАК Номенклатура,
		|	ВТ_СоставЗаказа.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ВТ_СоставЗаказа.Код КАК Код,
		|	ЕСТЬNULL(ВТ_КодыМаркета.КодМаркета, 0) КАК КодМаркета,
		|	ВТ_СоставЗаказа.Количество КАК Количество
		|ПОМЕСТИТЬ ВТ_СоставЗаказаТемп
		|ИЗ
		|	ВТ_СоставЗаказа КАК ВТ_СоставЗаказа
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КодыМаркета КАК ВТ_КодыМаркета
		|		ПО ВТ_СоставЗаказа.Код = ВТ_КодыМаркета.Код
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_СоставЗаказа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СоставЗаказаТемп.Номенклатура КАК Номенклатура,
		|	ВТ_СоставЗаказаТемп.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ВТ_СоставЗаказаТемп.Код КАК Код,
		|	ВТ_СоставЗаказаТемп.КодМаркета КАК КодМаркета,
		|	ВТ_СоставЗаказаТемп.Количество КАК Количество
		|ПОМЕСТИТЬ ВТ_СоставЗаказа
		|ИЗ
		|	ВТ_СоставЗаказаТемп КАК ВТ_СоставЗаказаТемп
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_СоставЗаказаТемп
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_КодыМаркета");
	#КонецОбласти
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Параметры.Вставить("КодыМаркета", КодыМаркета);
	
	СтрокаДанныхЗапросовБД = Регистратор.ДобавитьСтрокуДанныхЗапросовБД(Перечисления.мс_ВидыОбменовСМаркетами.ОбработкаДанныхЗапросаБДПолученияДанныхЗаказа);
	Регистратор.УстановитьДанныеЗапросаБДGZip(Запрос, СтрокаДанныхЗапросовБД);
	
	//ОбщегоНазначения.ЗапросВСтрокуXML(Запрос)
	Запрос.Выполнить();
	
	Регистратор.УстановитьРезультатЗапросаGZip(МенеджерВТ, СтрокаДанныхЗапросовБД);
	Регистратор.УстановитьРезультатОбменаУспешно(СтрокаДанныхЗапросовБД);
КонецПроцедуры

Функция ПолучитьСоставыЗаказов(ДанныеЗаказов, Регистратор)
	#Если Сервер И Не Сервер Тогда
		Регистратор = Документы.мс_РегистраторИсторииОбменовСМаркетами.СоздатьДокумент();
	#КонецЕсли
	//Инициализируем таблицу значений
	СоставыЗаказов = СоздатьТаблицуСоставЗаказов();
	Для Каждого ДанныеЗаказа Из ДанныеЗаказов Цикл
		Для Каждого СтрокаЗаказа Из ДанныеЗаказа.products Цикл
			//Каждый ключ структуры должен соответствовать колонке ТЗ СоставыЗаказов
			ДанныеЗаполнения = Новый Структура;
			ДанныеЗаполнения.Вставить("ИдЗаказа",          Формат(ДанныеЗаказа.order_id, "ЧГ=0"));
			ДанныеЗаполнения.Вставить("ИдСклада",          ДанныеЗаказа.delivery_method.warehouse_id);
			ДанныеЗаполнения.Вставить("НомерОтправления",  ДанныеЗаказа.posting_number);
			ДанныеЗаполнения.Вставить("НомерЗаказа",       ДанныеЗаказа.order_number);
			ДанныеЗаполнения.Вставить("ДатаЗаказа",        ДанныеЗаказа.in_process_at);
			ДанныеЗаполнения.Вставить("ДатаДоставки",      ДанныеЗаказа.shipment_date);
			ДанныеЗаполнения.Вставить("КодТовара",         СтрокаЗаказа.offer_id);
			ДанныеЗаполнения.Вставить("КодОзон",           Формат(СтрокаЗаказа.sku, "ЧГ=0"));
			Если ЗначениеЗаполнено(ДанныеЗаказа.barcodes) Тогда
				ДанныеЗаполнения.Вставить("ШК1", Формат(ДанныеЗаказа.barcodes.upper_barcode, "ЧГ=0"));
				ДанныеЗаполнения.Вставить("ШК2", Формат(ДанныеЗаказа.barcodes.lower_barcode, "ЧГ=0"));
			КонецЕсли;
			ДанныеЗаполнения.Вставить("Количество",        СтрокаЗаказа.quantity);
			ДанныеЗаполнения.Вставить("Цена",              СтрокаЗаказа.price);
			ДанныеЗаполнения.Вставить("СуммаОплатыМаркет", СтрокаЗаказа.price * СтрокаЗаказа.quantity);
			ЗаполнитьЗначенияСвойств(СоставыЗаказов.Добавить(), ДанныеЗаполнения);
		КонецЦикла;
	КонецЦикла;
	
	СтрокаДанныхЗапросовБД = Регистратор.ДобавитьСтрокуДанныхЗапросовБД(Перечисления.мс_ВидыОбменовСМаркетами.ПолучениеСоставаЗаказовБД);
	
	Если СоставыЗаказов.Количество() = 0 Тогда
		ПолучениеСоставаЗаказовПустойРезультат(ДанныеЗаказов);
		Регистратор.УстановитьРезультатОбменаСОшибками(СтрокаДанныхЗапросовБД, "Озон");
		
		Возврат Неопределено;
	КонецЕсли;
	
	Регистратор.УстановитьРезультатОбменаУспешно(СтрокаДанныхЗапросовБД, "Озон");
	
	ДополнитьДанныеЗаказовНоменклатурой(СоставыЗаказов, Регистратор);
	
	Возврат СоставыЗаказов;
КонецФункции

Процедура ДополнитьДанныеЗаказовНоменклатурой(ЗаказыСИдНоменклатуры, Регистратор)
	#Если Сервер И Не Сервер Тогда
		Регистратор = Документы.мс_РегистраторИсторииОбменовСМаркетами.СоздатьДокумент();
	#КонецЕсли
	Запрос = Новый Запрос(
	#Область ТекстЗапроса
		"ВЫБРАТЬ
		|	КодыНоменклатуры.КодТовара КАК КодТовара
		|ПОМЕСТИТЬ ВТ_КодыНоменклатуры
		|ИЗ
		|	&КодыНоменклатуры КАК КодыНоменклатуры
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КодТовара
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_КодыНоменклатуры.КодТовара КАК КодТовара,
		|	ЕСТЬNULL(Номенклатура.Ссылка, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА Номенклатура.Ссылка ЕСТЬ NULL
		|			ТОГДА 0
		|		ИНАЧЕ Номенклатура.мс_Квант
		|	КОНЕЦ КАК Квант
		|ИЗ
		|	ВТ_КодыНоменклатуры КАК ВТ_КодыНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|		ПО ВТ_КодыНоменклатуры.КодТовара = Номенклатура.Код");
	#КонецОбласти
	#Если Сервер И Не Сервер Тогда
		ЗаказыСИдНоменклатуры = Новый ТаблицаЗначений;
	#КонецЕсли
	КодыНоменклатуры = ЗаказыСИдНоменклатуры.Скопировать( , "КодТовара");
	КодыНоменклатуры.Свернуть("КодТовара");
	Запрос.Параметры.Вставить("КодыНоменклатуры", КодыНоменклатуры);
	
	СтрокаДанныхЗапросовБД = Регистратор.ДобавитьСтрокуДанныхЗапросовБД(Перечисления.мс_ВидыОбменовСМаркетами.ВыполнениеЗапросаПолученияНоменклатурыЗаказовБД);
	Регистратор.УстановитьДанныеЗапросаБДGZip(Запрос, СтрокаДанныхЗапросовБД);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.ПустойРезультатЗапроса, СтрокаДанныхЗапросовБД);
		
		Возврат;
	КонецЕсли;
	
	Регистратор.УстановитьРезультатЗапросаGZip(Результат, СтрокаДанныхЗапросовБД);
	Регистратор.УстановитьРезультатОбменаУспешно(СтрокаДанныхЗапросовБД, "Озон");
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Для Каждого ТекСтрока Из ЗаказыСИдНоменклатуры.НайтиСтроки(Новый Структура("КодТовара", Выборка.КодТовара)) Цикл
			ТекСтрока.Номенклатура = Выборка.Номенклатура;
			ТекСтрока.Квант        = Выборка.Квант;
		КонецЦикла;
	КонецЦикла;
	
	СтрокаДанныхЗапросовБД = Регистратор.ДобавитьСтрокуДанныхЗапросовБД(Перечисления.мс_ВидыОбменовСМаркетами.ДополнениеДанныеЗаказовНоменклатурой);
	Регистратор.УстановитьРезультатОбменаУспешно(СтрокаДанныхЗапросовБД, "Озон");
КонецПроцедуры

Функция СведенияОбОтправлениях(Отправления, Регистратор)
	#Если Сервер И Не Сервер Тогда
		Регистратор = Документы.мс_РегистраторИсторииОбменовСМаркетами.СоздатьДокумент();
	#КонецЕсли
	ИмяКолонки = ИмяКолонкиИдЗаказа();
	ТекстЗапроса = мс_РаботаСОзонПовтИсп.ТекстЗапросаПолученияДанныхТоваров(ИмяКолонки);
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("Отправления", Отправления);
	
	СтрокаДанныхЗапросовБД = Регистратор.ДобавитьСтрокуДанныхЗапросовБД(Перечисления.мс_ВидыОбменовСМаркетами.ПолучениеДанныхЗаказов);
	Регистратор.УстановитьДанныеЗапросаБДGZip(Запрос, СтрокаДанныхЗапросовБД);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ПолучениеИдЗаказовПустойРезультатЗапроса(Запрос);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.ПустойРезультатЗапроса, СтрокаДанныхЗапросовБД);
		
		Возврат Неопределено;
	КонецЕсли;
	
	Регистратор.УстановитьРезультатЗапросаGZip(Результат, СтрокаДанныхЗапросовБД);
	Регистратор.УстановитьРезультатОбменаУспешно(СтрокаДанныхЗапросовБД, "Озон");
	
	Возврат Результат.Выгрузить();
КонецФункции

Процедура СоздатьЗаказы(Сессия, ДанныеМагазина, СоставыЗаказов, Регистратор)
	#Если Сервер И Не Сервер Тогда
		Регистратор = Документы.мс_РегистраторИсторииОбменовСМаркетами.СоздатьДокумент();
	#КонецЕсли
	
	ИмяКолонки = ИмяКолонкиИдЗаказа();
	НомераОтправлений = СоставыЗаказов.Скопировать( , ИмяКолонки);
	НомераОтправлений.Свернуть(ИмяКолонки);
	Отправления = СведенияОбОтправлениях(НомераОтправлений, Регистратор);
	Если Отправления = Неопределено Тогда
		Регистратор.УстановитьРезультатОбменаСОшибками( , "Озон");
		
		Возврат;
	КонецЕсли;
	
	ЗаказыВНапоминания = Новый Массив;
	Для Каждого Отправление Из Отправления Цикл
		Если ЗаказУжеСоздан(Отправление, Регистратор) Тогда
			Продолжить;
		КонецЕсли;
		
		СоставЗаказа = ПолучитьСоставЗаказа(СоставыЗаказов, Отправление, Регистратор);
		Если Не ЗначениеЗаполнено(СоставЗаказа) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаказОбъект = СоздатьЗаказ(СоставЗаказа, ДанныеМагазина);
		
		Отказ = Ложь;
		ЗаписатьЗаказ(ЗаказОбъект, ЗаказОбъект[ИмяКолонкиИдЗаказа()], Регистратор, Отказ);
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДобавлятьЗаказыВНапоминания(ДанныеМагазина) Тогда
			ЗаказыВНапоминания.Добавить(ЗаказОбъект.Ссылка);
		КонецЕсли;
		
		//Тут тоже надо логировать, но пока не знаю, как добавить две одинаковых операции
		Если ДолженБытьШК(ДанныеМагазина) Тогда
			Если ЗначениеЗаполнено(СоставЗаказа[0].ШК1) Тогда
				ШК = ОбщегоНазначенияВызовСервера.ПолучитьНомерНаПечать(СоставЗаказа[0].ШК1, Истина);
				ЗаписатьШтрихкодЗаказа(ШК, ЗаказОбъект.Ссылка, Регистратор);
			КонецЕсли;
			Если ЗначениеЗаполнено(СоставЗаказа[0].ШК2) Тогда
				ШК = ОбщегоНазначенияВызовСервера.ПолучитьНомерНаПечать(СоставЗаказа[0].ШК2, Истина);
				ЗаписатьШтрихкодЗаказа(ШК, ЗаказОбъект.Ссылка, Регистратор);
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;
	
	Если ЗаказыВНапоминания.Количество() > 0 Тогда
		СоздатьНапоминанияПроЗаказыФБС(ЗаказыВНапоминания);
	КонецЕсли;
КонецПроцедуры

Функция ЗаказУжеСоздан(ДанныеЗаказа, Регистратор)
	#Если Сервер И Не Сервер Тогда
		Регистратор = Документы.мс_РегистраторИсторииОбменовСМаркетами.СоздатьДокумент();
	#КонецЕсли
	СтрокаДанныхЗапросовБД = Регистратор.ДобавитьСтрокуДанныхЗапросовБД(Перечисления.мс_ВидыОбменовСМаркетами.ПроверкаОтсутствияЗаказа);
	
	Если ДанныеЗаказа.УжеСоздан Тогда
		ОбработкаДанныхЗаказовЗаказУжеСоздан(ДанныеЗаказа);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.ЗаказУжеСоздан, СтрокаДанныхЗапросовБД);
		
		Возврат Истина;
	КонецЕсли;
	
	Регистратор.УстановитьРезультатОбменаУспешно(СтрокаДанныхЗапросовБД, "Озон");
	
	Возврат Ложь;
КонецФункции

Функция ПолучитьСоставЗаказа(СоставыЗаказов, ДанныеЗаказа, Регистратор)
	#Если Сервер И Не Сервер Тогда
		Регистратор = Документы.мс_РегистраторИсторииОбменовСМаркетами.СоздатьДокумент();
	#КонецЕсли
	ИмяКолонки = ИмяКолонкиИдЗаказа();
	СтрокаДанныхЗапросовБД = Регистратор.ДобавитьСтрокуДанныхЗапросовБД(Перечисления.мс_ВидыОбменовСМаркетами.ПолучениеСоставаЗаказаБД);
	
	ИдЗаказа = ДанныеЗаказа[ИмяКолонки]; 
	СоставЗаказа = СоставыЗаказов.Скопировать(СоставыЗаказов.НайтиСтроки(Новый Структура(ИмяКолонки, ИдЗаказа)));
	Если СоставЗаказа.Количество() = 0 Тогда
		ОбработкаДанныхЗаказовПустойСоставЗаказа(ДанныеЗаказа);
		Регистратор.УстановитьРезультатОбменаСОшибками(СтрокаДанныхЗапросовБД, "Озон");
		
		Возврат Неопределено;
	КонецЕсли;
	
	Регистратор.УстановитьРезультатОбменаУспешно(СтрокаДанныхЗапросовБД, "Озон");
	
	Возврат СоставЗаказа;
КонецФункции

#КонецОбласти

#Область ПолучениеДанныхМагазина

Функция ДолженБытьШК(ДанныеМагазина)
	Если ДанныеМагазина.Модель = МодельМагазинаФБСЭкспресс() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Функция ЭтоФБС(ДанныеМагазина)
	Если ДанныеМагазина.Модель = МодельМагазинаФБСЭкспресс() Тогда
		Возврат Истина
	КонецЕсли;
	Если ДанныеМагазина.Модель = МодельМагазинаФБС() Тогда
		Возврат Истина
	КонецЕсли;

	Возврат Истина;
КонецФункции

#КонецОбласти

#Область ПолучениеДанныхМаркировки

Функция МаркируемыеТоварыЗаказа(ДанныеМагазина, НомерОтправления, Сессия, Регистратор)
	ПараметрыЗапроса = ПолучитьПараметрыЗапросаПолученияСпискаМаркируемыхТоваровЗаказа(НомерОтправления);
	ДанныеЗапроса    = ВыполнитьЗапросПолученияИнформацииОЗаказе(Сессия, ДанныеМагазина, ПараметрыЗапроса, Регистратор);
	Если ДанныеЗапроса = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МаркируемыеТовары = ДанныеЗапроса.result.requirements.products_requiring_mandatory_mark;
	
	СтрокаДанныхЗапросовAPI = Регистратор.ДобавитьСтрокуДанныхЗапросовAPI( , Перечисления.мс_ВидыОбменовСМаркетами.РезультатЗапросаAPIПолученияСпискаМаркируемыхТоваров);
	Если МаркируемыеТовары.Количество() = 0 Тогда
		ПолучениеСпискаМаркируемыхТоваровЗаказаНетДанных();
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.ЗапросAPIВернулПустойРезультат, СтрокаДанныхЗапросовAPI);
	Иначе
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.ПолученСписокМаркируемыхТоваров, СтрокаДанныхЗапросовAPI);
	КонецЕсли;
	
	Возврат МаркируемыеТовары;
КонецФункции

Функция ИдентификаторыУпаковок(ДанныеМагазина, НомерОтправления, Сессия, СеансОбменаОбъект)
	ПараметрыЗапроса = ПолучитьПараметрыЗапросаСозданияДанныхМаркировкиЗаказа(НомерОтправления);
	ДанныеЗапроса    = ВыполнитьЗапросСозданияДанныхМаркируемыхТоваровЗаказа(Сессия, ДанныеМагазина, ПараметрыЗапроса, СеансОбменаОбъект);
	Если ДанныеЗапроса = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокаДанныхЗапросовAPI = СеансОбменаОбъект.ДобавитьСтрокуДанныхЗапросовAPI( , Перечисления.мс_ВидыОбменовСМаркетами.РезультатЗапросаAPIПолученияИдентификаторовУпаковок);
	Если ДанныеЗапроса.products.Количество() = 0 Тогда
		ПолучениеИдентификаторовУпаковокНетДанных();
		СеансОбменаОбъект.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.ЗапросAPIВернулПустойРезультат, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецЕсли;
	
	СеансОбменаОбъект.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.ПолученыИдентификаторыУпаковок, СтрокаДанныхЗапросовAPI);
	
	Возврат ДанныеЗапроса.products;
КонецФункции

Функция ДанныеМаркировкиЗаказа(Заказ, МенеджерВТ, КодыМаркета, Регистратор)
	#Если Сервер И Не Сервер Тогда
		Регистратор = Документы.мс_РегистраторИсторииОбменовСМаркетами.СоздатьДокумент();
	#КонецЕсли
	
	Запрос = Новый Запрос(
	#Область ТекстЗапроса
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(КодыМаркета.КодМаркета КАК ЧИСЛО(19, 0)) КАК КодМаркета
		|ПОМЕСТИТЬ ВТ_КодыМаркета
		|ИЗ
		|	&КодыМаркета КАК КодыМаркета
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КодМаркета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	1 КАК Разделитель,
		|	ВТ_СоставЗаказа.Номенклатура КАК Номенклатура,
		|	ВТ_СоставЗаказа.КодМаркета КАК КодМаркета,
		|	ЗаказНомераУпаковок.НомерКИЗ КАК НомерКИЗ,
		|	ВТ_СоставЗаказа.Количество КАК Количество
		|ИЗ
		|	ВТ_СоставЗаказа КАК ВТ_СоставЗаказа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Заказ.НомераУпаковок КАК ЗаказНомераУпаковок
		|		ПО (ЗаказНомераУпаковок.Ссылка = &Заказ)
		|			И ВТ_СоставЗаказа.ИдентификаторСтроки = ЗаказНомераУпаковок.ИдентификаторСтроки
		|			И (ВТ_СоставЗаказа.КодМаркета В
		|				(ВЫБРАТЬ
		|					ВТ_КодыМаркета.КодМаркета КАК КодМаркета
		|				ИЗ
		|					ВТ_КодыМаркета КАК ВТ_КодыМаркета))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2,
		|	ВТ_СоставЗаказа.Номенклатура,
		|	ВТ_СоставЗаказа.КодМаркета,
		|	"""",
		|	ВТ_СоставЗаказа.Количество
		|ИЗ
		|	ВТ_СоставЗаказа КАК ВТ_СоставЗаказа
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Заказ.НомераУпаковок КАК ЗаказНомераУпаковок
		|		ПО (ЗаказНомераУпаковок.Ссылка = &Заказ)
		|			И ВТ_СоставЗаказа.ИдентификаторСтроки = ЗаказНомераУпаковок.ИдентификаторСтроки
		|			И (ВТ_СоставЗаказа.КодМаркета В
		|				(ВЫБРАТЬ
		|					ВТ_КодыМаркета.КодМаркета КАК КодМаркета
		|				ИЗ
		|					ВТ_КодыМаркета КАК ВТ_КодыМаркета))
		|ГДЕ
		|	ЗаказНомераУпаковок.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	0,
		|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
		|	ВТ_КодыМаркета.КодМаркета,
		|	"""",
		|	0
		|ИЗ
		|	ВТ_КодыМаркета КАК ВТ_КодыМаркета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоставЗаказа КАК ВТ_СоставЗаказа
		|		ПО ВТ_КодыМаркета.КодМаркета = ВТ_СоставЗаказа.КодМаркета
		|ГДЕ
		|	ВТ_СоставЗаказа.Номенклатура ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	Разделитель
		|ИТОГИ
		|	МАКСИМУМ(Номенклатура),
		|	СУММА(Количество)
		|ПО
		|	Разделитель,
		|	КодМаркета
		|АВТОУПОРЯДОЧИВАНИЕ");
	#КонецОбласти
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Параметры.Вставить("Заказ", Заказ);
	КодыМаркетаТЗ = КодыМаркетаТЗ(КодыМаркета);
	Запрос.Параметры.Вставить("КодыМаркета", КодыМаркетаТЗ);
	
	СтрокаДанныхЗапросовБД = Регистратор.ДобавитьСтрокуДанныхЗапросовБД(Перечисления.мс_ВидыОбменовСМаркетами.ВыполнениеЗапросаБДПолученияДанныхМаркировки);
	Регистратор.УстановитьДанныеЗапросаБДGZip(Запрос, СтрокаДанныхЗапросовБД);
	//ОбщегоНазначения.ЗапросВСтрокуXML(Запрос);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.ПустойРезультатЗапроса, СтрокаДанныхЗапросовБД);
		
		Возврат Неопределено;
	КонецЕсли;
	
	Регистратор.УстановитьРезультатЗапросаGZip(Результат, СтрокаДанныхЗапросовБД);
	Регистратор.УстановитьРезультатОбменаУспешно(СтрокаДанныхЗапросовБД);
	
	ДанныеМаркировки   = Новый Соответствие;
	ВыборкаРазделитель = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//Эти коды маркета не найдены в документе
	Пока ВыборкаРазделитель.НайтиСледующий(0, "Разделитель") Цикл
		ОтсутствующиеКоды = Новый Массив;
		ВыборкаКодМаркета = ВыборкаРазделитель.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаКодМаркета.Следующий() Цикл
			ОтсутствующиеКоды.Добавить(ВыборкаКодМаркета.КодМаркета);
		КонецЦикла;
		
		СтрокаДанныхЗапросовAPI = Регистратор.ДобавитьСтрокуДанныхЗапросовAPI( , Перечисления.мс_ВидыОбменовСМаркетами.ОбработкаКодовМаркируемойНоменклатуры);
		Регистратор.УстановитьДанныеРезультатаЗапросаAPIGZip(ОтсутствующиеКоды, СтрокаДанныхЗапросовAPI);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.НайденыКодыМаркетаОтсуствующиеВДокументе, СтрокаДанныхЗапросовAPI);
		Регистратор.УстановитьРезультатОбменаСОшибками( , "Озон");
		
		Возврат Неопределено;
	КонецЦикла;
	
	//По данным Маркета и по данным 1С номенклатура является маркируемой
	Пока ВыборкаРазделитель.НайтиСледующий(1, "Разделитель") Цикл
		КодыСМаркировкой = Новый Массив;
		ВыборкаКодМаркета = ВыборкаРазделитель.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаКодМаркета.Следующий() Цикл
			КИЗы = Новый Массив;
			Выборка = ВыборкаКодМаркета.Выбрать();
			Пока Выборка.Следующий() Цикл
				ДанныеКИЗа = Новый Структура;
				ДанныеКИЗа.Вставить("mandatory_mark", Выборка.НомерКИЗ);
				ДанныеКИЗа.Вставить("exemplar_id",    Неопределено);
				КИЗы.Добавить(ДанныеКИЗа);
			КонецЦикла;
			ДанныеМаркировки.Вставить(ВыборкаКодМаркета.КодМаркета, КИЗы);
			КодыСМаркировкой.Добавить(ВыборкаКодМаркета.КодМаркета);
		КонецЦикла;
		СтрокаДанныхЗапросовAPI = Регистратор.ДобавитьСтрокуДанныхЗапросовAPI( ,Перечисления.мс_ВидыОбменовСМаркетами.ОбработкаКодовМаркируемойНоменклатуры);
		Регистратор.УстановитьДанныеРезультатаЗапросаAPIGZip(КодыСМаркировкой, СтрокаДанныхЗапросовAPI);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.Успешно, СтрокаДанныхЗапросовAPI);
	КонецЦикла;
	
	//Тут будет условие, что такой вариант разрешен
	//По данным Озон номенклатура является маркируемой, а по данным 1С нет
	//принято решение передавать в этом случае пустышки
	Пока ВыборкаРазделитель.НайтиСледующий(2, "Разделитель") Цикл
		КодыБезМаркировки = Новый Массив;
		ВыборкаКодМаркета = ВыборкаРазделитель.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаКодМаркета.Следующий() Цикл
			КИЗы = Новый Массив;
			Для Ы = 1 По ВыборкаКодМаркета.Количество Цикл
				ДанныеКИЗа = Новый Структура;
				ДанныеКИЗа.Вставить("mandatory_mark", "");
				ДанныеКИЗа.Вставить("exemplar_id",    Неопределено);
				КИЗы.Добавить(ДанныеКИЗа);
			КонецЦикла;
			ДанныеМаркировки.Вставить(ВыборкаКодМаркета.КодМаркета, КИЗы);
			КодыБезМаркировки.Добавить(ВыборкаКодМаркета.КодМаркета);
		КонецЦикла;
		СтрокаДанныхЗапросовAPI = Регистратор.ДобавитьСтрокуДанныхЗапросовAPI( , Перечисления.мс_ВидыОбменовСМаркетами.ОбработкаКодовМаркируемойНоменклатуры);
		Регистратор.УстановитьДанныеРезультатаЗапросаAPIGZip(КодыБезМаркировки, СтрокаДанныхЗапросовAPI);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.НайденыКодыМаркетаБезМаркировки, СтрокаДанныхЗапросовAPI);
		Регистратор.УстановитьРезультатОбменаСОшибками( , "Озон");
	КонецЦикла;
	
	Возврат ДанныеМаркировки;
КонецФункции

#КонецОбласти

#Область ПолученеиДанныхЦенТоваров

Функция ДанныеЦенТоваров(ДанныеМагазина, СеансОбменаОбъект)
	Сессия = ПолучитьСессию(ДанныеМагазина);
	
	НомерПорции = 1;
	ДанныеЦен = ДанныеЦен();
	#Если Сервер И Не Сервер Тогда
		ДанныеЦен = Новый ТаблицаЗначений;
	#КонецЕсли
	
	СтрокаДанныхЗапросовБД = СеансОбменаОбъект.ДобавитьСтрокуДанныхЗапросовБД(Перечисления.мс_ВидыОбменовСМаркетами.ПолучениеЦенТоваров);
	
	ПараметрыЗапроса = ПараметрыЗапросаПолученияЦенТоваров();
	Пока Истина Цикл
		СписокТоваров = ВыполнитьЗапросПолученияЦенТоваров(Сессия, ДанныеМагазина, ПараметрыЗапроса, НомерПорции, СеансОбменаОбъект);
		Если СписокТоваров = Неопределено Тогда
			СеансОбменаОбъект.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.НеУдалосьПолучитьДанныеЦенТоваров, СтрокаДанныхЗапросовБД);
			
			Возврат Неопределено;
		КонецЕсли;
		
		Для Каждого ТекТовар Из СписокТоваров.result.items Цикл
			ДанныеЗаполнения = Новый Структура;
			ДанныеЗаполнения.Вставить("Код",             ТекТовар.offer_id);
			ДанныеЗаполнения.Вставить("КодМаркета",      ТекТовар.product_id);
			ДанныеЗаполнения.Вставить("ПоследняяМиля",   ТекТовар.commissions.fbs_deliv_to_customer_amount);
			ДанныеЗаполнения.Вставить("МагистральДо",    ТекТовар.commissions.fbs_direct_flow_trans_max_amount);
			ДанныеЗаполнения.Вставить("МагистральОт",    ТекТовар.commissions.fbs_direct_flow_trans_min_amount);
			ДанныеЗаполнения.Вставить("МинЗаОбработку",  ТекТовар.commissions.fbs_first_mile_min_amount);
			ДанныеЗаполнения.Вставить("МаксЗаОбработку", ТекТовар.commissions.fbs_first_mile_max_amount);
			ДанныеЗаполнения.Вставить("ВозвратОтмена",   ТекТовар.commissions.fbs_return_flow_amount);
			ДанныеЗаполнения.Вставить("ВозвратОтменаДо", ТекТовар.commissions.fbs_return_flow_trans_max_amount);
			ДанныеЗаполнения.Вставить("ВозвратОтменаОт", ТекТовар.commissions.fbs_return_flow_trans_min_amount);
			ДанныеЗаполнения.Вставить("ПроцентПродажа",  ТекТовар.commissions.sales_percent_fbs);
			ДанныеЗаполнения.Вставить("МаксПроцент",     ТекТовар.commissions.sales_percent);
			ЗаполнитьЗначенияСвойств(ДанныеЦен.Добавить(), ДанныеЗаполнения);
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(СписокТоваров.result.last_id) Тогда
			Прервать;
		КонецЕсли;
		
		НомерПорции              = НомерПорции + 1;
		ПараметрыЗапроса.last_id = СписокТоваров.result.last_id;
		СтрокаДанныхЗапросовAPI = СеансОбменаОбъект.ДобавитьСтрокуДанныхЗапросовAPI( , Перечисления.мс_ВидыОбменовСМаркетами.ОбработкаКодовНоменклатуры);
		СеансОбменаОбъект.УстановитьДанныеРезультатаЗапросаAPIGZip(ПараметрыЗапроса.last_id, СтрокаДанныхЗапросовAPI);
	КонецЦикла;
	
	СеансОбменаОбъект.УстановитьРезультатОбменаУспешно(СтрокаДанныхЗапросовБД, "Озон");
	
	Возврат ДанныеЦен;
КонецФункции

Процедура ДополнитьДанныеЦенТоваров(ДанныеЦенТоваров, СеансОбменаОбъект)
	#Если Сервер И Не Сервер Тогда
		ДанныеЦенТоваров = Новый ТаблицаЗначений;
	#КонецЕсли
	Запрос = Новый Запрос(
	#Область ТекстЗапроса
		"ВЫБРАТЬ
		|	Коды.Код КАК Код
		|ПОМЕСТИТЬ ВТ_ДанныеЦен
		|ИЗ
		|	&Коды КАК Коды
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДанныеЦен.Код КАК Код,
		|	Номенклатура.Ссылка КАК Номенклатура
		|ИЗ
		|	ВТ_ДанныеЦен КАК ВТ_ДанныеЦен
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|		ПО ВТ_ДанныеЦен.Код = Номенклатура.Код
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ДанныеЦен.Код,
		|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|ИЗ
		|	ВТ_ДанныеЦен КАК ВТ_ДанныеЦен
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|		ПО ВТ_ДанныеЦен.Код = Номенклатура.Код
		|ГДЕ
		|	Номенклатура.Ссылка ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура
		|ИТОГИ ПО
		|	Номенклатура");
	#КонецОбласти
	Запрос.Параметры.Вставить("Коды", ДанныеЦенТоваров.Скопировать( ,"Код"));
	
	СтрокаДанныхЗапросовБД = СеансОбменаОбъект.ДобавитьСтрокуДанныхЗапросовБД(Перечисления.мс_ВидыОбменовСМаркетами.ВыполнениеЗапросаБДОбработкиДанныхЦенТоваров);
	СеансОбменаОбъект.УстановитьДанныеЗапросаБДGZip(Запрос, СтрокаДанныхЗапросовБД);
	
	//ОбщегоНазначения.ЗапросВСтрокуXML(Запрос)
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		СеансОбменаОбъект.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.ПустойРезультатЗапроса, СтрокаДанныхЗапросовБД);
		
		ДанныеЦенТоваров = Новый Массив;
		
		Возврат;
	КонецЕсли;
	
	СеансОбменаОбъект.УстановитьРезультатЗапросаGZip(Результат, СтрокаДанныхЗапросовБД);
	СеансОбменаОбъект.УстановитьРезультатОбменаУспешно(СтрокаДанныхЗапросовБД);
	
	ВыборкаНоменклатура = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаНоменклатура.НайтиСледующий(Справочники.Номенклатура.ПустаяСсылка(), "Номенклатура") Цикл
		ОтсутствующиеКоды = Новый Массив;
		Выборка = ВыборкаНоменклатура.Выбрать();
		Пока Выборка.Следующий() Цикл
			ОтсутствующиеКоды.Добавить(Выборка.Код);
		КонецЦикла;
		СтрокаДанныхЗапросовAPI = СеансОбменаОбъект.ДобавитьСтрокуДанныхЗапросовAPI( , Перечисления.мс_ВидыОбменовСМаркетами.ОбработкаКодовНоменклатуры);
		СеансОбменаОбъект.УстановитьДанныеРезультатаЗапросаAPIGZip(ОтсутствующиеКоды, СтрокаДанныхЗапросовAPI);
		
		//ДанныеЦенТоваров = ОтсутствующиеКоды;
		
		//Возврат;
		Для Каждого ДанныеЦеныТовара Из ДанныеЦенТоваров.НайтиСтроки(Новый Структура("Код", Выборка.Код)) Цикл
			ДанныеЦенТоваров.Удалить(ДанныеЦеныТовара);
		КонецЦикла;
	КонецЦикла;
	ВыборкаНоменклатура.СледующийПоЗначениюПоля("Номенклатура");
	Пока ВыборкаНоменклатура.СледующийПоЗначениюПоля("Номенклатура") Цикл
		Выборка = ВыборкаНоменклатура.Выбрать();
		Пока Выборка.Следующий() Цикл
			Для Каждого ДанныеЦеныТовара Из ДанныеЦенТоваров.НайтиСтроки(Новый Структура("Код", Выборка.Код)) Цикл
				ДанныеЦеныТовара.Номенклатура = Выборка.Номенклатура;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ЗаписьДанныхБД

Процедура ОбновитьКодыМаркетаНоменклатуры(Знач Маркет, Знач НоменклатураКодовТоваров, СеансОбменаОбъект)
	#Если Сервер И Не Сервер Тогда
		СеансОбменаОбъект = Документы.мс_РегистраторИсторииОбменовСМаркетами.СоздатьДокумент();
	#КонецЕсли
	
	Запрос = Новый Запрос(
	#Область ТекстЗапроса
		"ВЫБРАТЬ
		|	НоменклатураКодовТоваров.Номенклатура КАК Номенклатура,
		|	НоменклатураКодовТоваров.КодОзон КАК КодОзон
		|ПОМЕСТИТЬ ВТ_НоменклатураКодовТоваров
		|ИЗ
		|	&НоменклатураКодовТоваров КАК НоменклатураКодовТоваров
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_НоменклатураКодовТоваров.КодОзон КАК КодОзон,
		|	ВТ_НоменклатураКодовТоваров.Номенклатура КАК Номенклатура
		|ИЗ
		|	ВТ_НоменклатураКодовТоваров КАК ВТ_НоменклатураКодовТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.мс_КодыТоваровМаркетов КАК мс_КодыТоваровМаркетов
		|		ПО (мс_КодыТоваровМаркетов.Маркет = &Маркет)
		|			И ВТ_НоменклатураКодовТоваров.Номенклатура = мс_КодыТоваровМаркетов.Номенклатура
		|ГДЕ
		|	мс_КодыТоваровМаркетов.Номенклатура ЕСТЬ NULL");
	#КонецОбласти
	Запрос.Параметры.Вставить("Маркет", Маркет);
	Запрос.Параметры.Вставить("НоменклатураКодовТоваров", НоменклатураКодовТоваров);
	
	СтрокаДанныхЗапросовБД = СеансОбменаОбъект.ДобавитьСтрокуДанныхЗапросовБД(Перечисления.мс_ВидыОбменовСМаркетами.ВыполнениеЗапросаБДПолученияКодовТоваровМаркета);
	СеансОбменаОбъект.УстановитьДанныеЗапросаБДGZip(Запрос, СтрокаДанныхЗапросовБД);
	
	//ОбщегоНазначения.ЗапросВСтрокуXML(Запрос)
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		СеансОбменаОбъект.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.ПустойРезультатЗапроса, СтрокаДанныхЗапросовБД);
		
		Возврат;
	КонецЕсли;
	
	СеансОбменаОбъект.УстановитьРезультатЗапросаGZip(Результат, СтрокаДанныхЗапросовБД);
	СеансОбменаОбъект.УстановитьРезультатОбменаУспешно(СтрокаДанныхЗапросовБД);
	
	СОшибками = Ложь;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.мс_КодыТоваровМаркетов");
		ЭлементБлокировки.УстановитьЗначение("Маркет",       Маркет);
		ЭлементБлокировки.УстановитьЗначение("Номенклатура", Выборка.Номенклатура);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		
		МенеджерЗаписи = РегистрыСведений.мс_НоменклатураКодовТоваровМаркетов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Маркет       = Маркет;
		МенеджерЗаписи.Номенклатура = Выборка.Номенклатура;
		
		НачатьТранзакцию();
		Попытка
			Блокировка.Заблокировать();
			МенеджерЗаписи.Прочитать();
		Исключение
			ОтменитьТранзакцию();
			
			СОшибками = Истина;
			ЗаписьКодовТоваровМаркетовОшибкаПолученияЗаписи(Выборка.Номенклатура, ИнформацияОбОшибке());
			
			Продолжить;
		КонецПопытки;
		
		Если МенеджерЗаписи.Выбран() Тогда
			ОтменитьТранзакцию();
			
			ЗаписьКодовТоваровМаркетовУжеСуществует(Выборка.Номенклатура);
			
			Продолжить;
		КонецЕсли;
		
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		МенеджерЗаписи.Маркет           = Маркет;
		МенеджерЗаписи.Номенклатура     = Выборка.Номенклатура;
		МенеджерЗаписи.КодТовараМаркета = Выборка.КодОзон;
		
		Попытка
			Блокировка.Заблокировать();
			МенеджерЗаписи.Записать();
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			СОшибками = Истина;
			ЗаписьКодовТоваровМаркетовОшибкаЗаписи(Выборка.Номенклатура, ИнформацияОбОшибке());
		КонецПопытки;
	КонецЦикла;
	
	СтрокаДанныхЗапросовБД = СеансОбменаОбъект.ДобавитьСтрокуДанныхЗапросовБД(Перечисления.мс_ВидыОбменовСМаркетами.ЗаписьКодовТоваровМаркетов);
	Если СОшибками Тогда
		СеансОбменаОбъект.УстановитьРезультатОбменаСОшибками(СтрокаДанныхЗапросовБД, "Озон");
	Иначе
		СеансОбменаОбъект.УстановитьРезультатОбменаУспешно(СтрокаДанныхЗапросовБД, "Озон");
	КонецЕсли;
КонецПроцедуры

Процедура ЗаписатьЗаказ(ЗаказОбъект, НомерОзон, Регистратор, Отказ)
	#Если Сервер И Не Сервер Тогда
		Регистратор = Документы.мс_РегистраторИсторииОбменовСМаркетами.СоздатьДокумент();
	#КонецЕсли
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Документ.Заказ");
	ЭлементБлокировки.УстановитьЗначение("мс_НомерОзон", НомерОзон);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	СтрокаДанныхЗапросовБД = Регистратор.ДобавитьСтрокуДанныхЗапросовБД(Перечисления.мс_ВидыОбменовСМаркетами.ЗаписьИПроведениеЗаказа);
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		ЗаказОбъект.ДополнительныеСвойства.Вставить("ОткрытаПоСценарию", Истина);
		ЗаказОбъект.ДополнительныеСвойства.Вставить("СтатусДокумента", Перечисления.СтатусыДвиженияЗаказа.ВРаботе);
		ЗаказОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		ЗафиксироватьТранзакцию();
		
		ЗаписьЗаказаЗаказЗаписанИПроведен(ЗаказОбъект);
		Регистратор.УстановитьРезультатОбменаУспешно(СтрокаДанныхЗапросовБД, "Озон");
		
		Возврат;
	Исключение
		ОтменитьТранзакцию();
		
		ПроведениеЗаказаОшибкаЗаписи(ИнформацияОбОшибке());
		Регистратор.УстановитьРезультатОбменаСОшибками(СтрокаДанныхЗапросовБД, "Озон");
	
	КонецПопытки;
	
	СтрокаДанныхЗапросовБД = Регистратор.ДобавитьСтрокуДанныхЗапросовБД(Перечисления.мс_ВидыОбменовСМаркетами.ЗаписьЗаказа);
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		//ЗаказОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		ЗафиксироватьТранзакцию();
		
		ЗаписьЗаказаЗаказЗаписан(ЗаказОбъект);
		
		Регистратор.УстановитьРезультатОбменаУспешно(СтрокаДанныхЗапросовБД, "Озон");
		
	Исключение
		ОтменитьТранзакцию();
		СозданиеЗаказаОшибкаЗаписи(ИнформацияОбОшибке());
		
		Регистратор.УстановитьРезультатОбменаСОшибками(СтрокаДанныхЗапросовБД, "Озон");
		
		Отказ = Истина;
	КонецПопытки;
КонецПроцедуры

Процедура ЗаписатьШтрихкодЗаказа(ШК, Заказ, Регистратор)
	#Если Сервер И Не Сервер Тогда
		Регистратор = Документы.мс_РегистраторИсторииОбменовСМаркетами.СоздатьДокумент();
	#КонецЕсли
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.Штрихкоды");
	ЭлементБлокировки.УстановитьЗначение("Штрихкод", ШК);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;

	МенеджерЗаписи = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Штрихкод = ШК;

	СтрокаДанныхЗапросовБД = Регистратор.ДобавитьСтрокуДанныхЗапросовБД(Перечисления.мс_ВидыОбменовСМаркетами.ПроверкаОтсутствияШК);

	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			ОтменитьТранзакцию();

			ЧтениеШКЗаказаШКУжеСоздан(Заказ, ШК);
			Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.ШКУжеСоздан, СтрокаДанныхЗапросовБД);

			Возврат;
		КонецЕсли;

		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.ШКОтстуствует, СтрокаДанныхЗапросовБД);
	Исключение
		ОтменитьТранзакцию();

		ЧтениеШКЗаказаОшибкаЧтения(Заказ, ШК, ИнформацияОбОшибке());
		Регистратор.УстановитьРезультатОбменаСОшибками(СтрокаДанныхЗапросовБД, "Озон");

		Возврат;
	КонецПопытки;

	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	МенеджерЗаписи.Штрихкод = ШК;
	МенеджерЗаписи.ОбъектШК = Заказ;

	СтрокаДанныхЗапросовБД = Регистратор.ДобавитьСтрокуДанныхЗапросовБД(Перечисления.мс_ВидыОбменовСМаркетами.СозданиеШК);

	Попытка
		Блокировка.Заблокировать();
		МенеджерЗаписи.Записать();

		ЗафиксироватьТранзакцию();

		Регистратор.УстановитьРезультатОбменаУспешно(СтрокаДанныхЗапросовБД, "Озон");
	Исключение
		ОтменитьТранзакцию();

		ЗаписьШКЗаказаОшибкаЗаписи(Заказ, ШК, ИнформацияОбОшибке());
		Регистратор.УстановитьРезультатОбменаСОшибками(СтрокаДанныхЗапросовБД, "Озон");
	КонецПопытки;
КонецПроцедуры

Процедура ДобавитьЗаписьОтправкиЗапросаВыгрузкиОстатковВИсториюОбменовСМаркетами(Маркет, Магазин, ИдОбмена, Данные)
	ВидОбмена         = Перечисления.мс_ВидыОбменовСМаркетами.ВыгрузкаОстатков;
	НаправлениеОбмена = Перечисления.мс_НаправленияОбменовСМаркетами.ОтправкаЗапроса;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.мс_ИсторияОбменовСМаркетами");
	ЭлементБлокировки.УстановитьЗначение("Маркет",            Маркет);
	ЭлементБлокировки.УстановитьЗначение("Магазин",           Магазин);
	ЭлементБлокировки.УстановитьЗначение("ВидОбмена",         Перечисления.мс_ВидыОбменовСМаркетами.ВыгрузкаОстатков);
	ЭлементБлокировки.УстановитьЗначение("ИдОбмена",          ИдОбмена);
	ЭлементБлокировки.УстановитьЗначение("НаправлениеОбмена", Перечисления.мс_НаправленияОбменовСМаркетами.ОтправкаЗапроса);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	МенеджерЗаписи = РегистрыСведений.мс_ИсторияОбменовСМаркетами.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период            = ТекущаяДата();
	МенеджерЗаписи.Маркет            = Маркет;
	МенеджерЗаписи.Магазин           = Магазин;
	МенеджерЗаписи.ВидОбмена         = Перечисления.мс_ВидыОбменовСМаркетами.ВыгрузкаОстатков;
	МенеджерЗаписи.ИдОбмена          = ИдОбмена;
	МенеджерЗаписи.НаправлениеОбмена = Перечисления.мс_НаправленияОбменовСМаркетами.ОтправкаЗапроса;
	МенеджерЗаписи.Данные            = Данные;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		МенеджерЗаписи.Записать();
		
		ЗафиксироватьТранзакцию();
		
		Возврат;
	Исключение
		ОтменитьТранзакцию();
		
		ДобавлениеЗаписиОтправкиЗапросаВыгрузкиОстатковВИсториюОбменовСМаркетамиОшибкаЗаписи(ИнформацияОбОшибке());
	КонецПопытки;
КонецПроцедуры

Процедура ДобавитьЗаписьПолученияОтветаНаЗапросВыгрузкиОстатковВИсториюОбменовСМаркетами(Маркет, Магазин, ИдОбмена, Данные)
	ВидОбмена		  = Перечисления.мс_ВидыОбменовСМаркетами.ВыгрузкаОстатков;
	НаправлениеОбмена = Перечисления.мс_НаправленияОбменовСМаркетами.ПолучениеОтвета;

	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.мс_ИсторияОбменовСМаркетами");
	ЭлементБлокировки.УстановитьЗначение("Маркет",			  Маркет);
	ЭлементБлокировки.УстановитьЗначение("Магазин",			  Магазин);
	ЭлементБлокировки.УстановитьЗначение("ВидОбмена",		  Перечисления.мс_ВидыОбменовСМаркетами.ВыгрузкаОстатков);
	ЭлементБлокировки.УстановитьЗначение("ИдОбмена",		  ИдОбмена);
	ЭлементБлокировки.УстановитьЗначение("НаправлениеОбмена", Перечисления.мс_НаправленияОбменовСМаркетами.ПолучениеОтвета);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

	МенеджерЗаписи = РегистрыСведений.мс_ИсторияОбменовСМаркетами.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период			 = ТекущаяДата();
	МенеджерЗаписи.Маркет			 = Маркет;
	МенеджерЗаписи.Магазин			 = Магазин;
	МенеджерЗаписи.ВидОбмена		 = Перечисления.мс_ВидыОбменовСМаркетами.ВыгрузкаОстатков;
	МенеджерЗаписи.ИдОбмена			 = ИдОбмена;
	МенеджерЗаписи.НаправлениеОбмена = Перечисления.мс_НаправленияОбменовСМаркетами.ПолучениеОтвета;
	МенеджерЗаписи.Данные			 = Данные;

	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		МенеджерЗаписи.Записать();

		ЗафиксироватьТранзакцию();

		Возврат;
	Исключение
		ОтменитьТранзакцию();

		ДобавлениеЗаписиПолученияОтветаНаЗапросВыгрузкиОстатковВИсториюОбменовСМаркетамиОшибкаЗаписи(ИнформацияОбОшибке());
	КонецПопытки;
КонецПроцедуры

Процедура ДобавитьЗаписьОтправкиЗапросаВыгрузкиЦенВИсториюОбменовСМаркетами(Маркет, Магазин, ИдОбмена, Данные)
	ВидОбмена         = Перечисления.мс_ВидыОбменовСМаркетами.ВыгрузкаЦен;
	НаправлениеОбмена = Перечисления.мс_НаправленияОбменовСМаркетами.ОтправкаЗапроса;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.мс_ИсторияОбменовСМаркетами");
	ЭлементБлокировки.УстановитьЗначение("Маркет",            Маркет);
	ЭлементБлокировки.УстановитьЗначение("Магазин",           Магазин);
	ЭлементБлокировки.УстановитьЗначение("ВидОбмена",         ВидОбмена);
	ЭлементБлокировки.УстановитьЗначение("ИдОбмена",          ИдОбмена);
	ЭлементБлокировки.УстановитьЗначение("НаправлениеОбмена", НаправлениеОбмена);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	МенеджерЗаписи = РегистрыСведений.мс_ИсторияОбменовСМаркетами.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период            = ТекущаяДата();
	МенеджерЗаписи.Маркет            = Маркет;
	МенеджерЗаписи.Магазин           = Магазин;
	МенеджерЗаписи.ВидОбмена         = ВидОбмена;
	МенеджерЗаписи.ИдОбмена          = ИдОбмена;
	МенеджерЗаписи.НаправлениеОбмена = НаправлениеОбмена;
	МенеджерЗаписи.Данные            = Данные;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		МенеджерЗаписи.Записать();
		
		ЗафиксироватьТранзакцию();
		
		Возврат;
	Исключение
		ОтменитьТранзакцию();
		
		ДобавлениеЗаписиОтправкиЗапросаВыгрузкиЦенВИсториюОбменовСМаркетамиОшибкаЗаписи(ИнформацияОбОшибке());
	КонецПопытки;
КонецПроцедуры

Процедура ДобавитьЗаписьПолученияОтветаНаЗапросВыгрузкиЦенВИсториюОбменовСМаркетами(Маркет, Магазин, ИдОбмена, Данные)
	ВидОбмена         = Перечисления.мс_ВидыОбменовСМаркетами.ВыгрузкаЦен;
	НаправлениеОбмена = Перечисления.мс_НаправленияОбменовСМаркетами.ПолучениеОтвета;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.мс_ИсторияОбменовСМаркетами");
	ЭлементБлокировки.УстановитьЗначение("Маркет",            Маркет);
	ЭлементБлокировки.УстановитьЗначение("Магазин",           Магазин);
	ЭлементБлокировки.УстановитьЗначение("ВидОбмена",         ВидОбмена);
	ЭлементБлокировки.УстановитьЗначение("ИдОбмена",          ИдОбмена);
	ЭлементБлокировки.УстановитьЗначение("НаправлениеОбмена", НаправлениеОбмена);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	МенеджерЗаписи = РегистрыСведений.мс_ИсторияОбменовСМаркетами.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период            = ТекущаяДата();
	МенеджерЗаписи.Маркет            = Маркет;
	МенеджерЗаписи.Магазин           = Магазин;
	МенеджерЗаписи.ВидОбмена         = ВидОбмена;
	МенеджерЗаписи.ИдОбмена          = ИдОбмена;
	МенеджерЗаписи.НаправлениеОбмена = НаправлениеОбмена;
	МенеджерЗаписи.Данные            = Данные;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		МенеджерЗаписи.Записать();
		
		ЗафиксироватьТранзакцию();
		
		Возврат;
	Исключение
		ОтменитьТранзакцию();
		
		ДобавлениеЗаписиПолученияОтветаНаЗапросВыгрузкиЦенВИсториюОбменовСМаркетамиОшибкаЗаписи(ИнформацияОбОшибке());
	КонецПопытки;
КонецПроцедуры

Процедура ДобавитьЗаписьОтправкиЗапросаПолученияДанныхНеобработанныхЗаказовВИсториюОбменовСМаркетами(Маркет, Магазин, ИдОбмена, Данные)
	ВидОбмена         = Перечисления.мс_ВидыОбменовСМаркетами.ПоискЗаказов;
	НаправлениеОбмена = Перечисления.мс_НаправленияОбменовСМаркетами.ОтправкаЗапроса;

	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.мс_ИсторияОбменовСМаркетами");
	ЭлементБлокировки.УстановитьЗначение("Маркет",            Маркет);
	ЭлементБлокировки.УстановитьЗначение("Магазин",           Магазин);
	ЭлементБлокировки.УстановитьЗначение("ВидОбмена",         ВидОбмена);
	ЭлементБлокировки.УстановитьЗначение("ИдОбмена",          ИдОбмена);
	ЭлементБлокировки.УстановитьЗначение("НаправлениеОбмена", НаправлениеОбмена);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	МенеджерЗаписи = РегистрыСведений.мс_ИсторияОбменовСМаркетами.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период            = ТекущаяДата();
	МенеджерЗаписи.Маркет            = Маркет;
	МенеджерЗаписи.Магазин           = Магазин;
	МенеджерЗаписи.ВидОбмена         = ВидОбмена;
	МенеджерЗаписи.ИдОбмена          = ИдОбмена;
	МенеджерЗаписи.НаправлениеОбмена = НаправлениеОбмена;
	МенеджерЗаписи.Данные            = Данные;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		МенеджерЗаписи.Записать();
		
		ЗафиксироватьТранзакцию();
		
		Возврат;
	Исключение
		ОтменитьТранзакцию();
		
		ДобавлениеЗаписиОтправкиЗапросаПолученияДанныхНеобработанныхЗаказовВИсториюОбменовСМаркетамиОшибкаЗаписи(ИнформацияОбОшибке());
	КонецПопытки;
КонецПроцедуры

Процедура ДобавитьЗаписьПолученияОтветаНаЗапросПолученияДанныхНеобработанныхЗаказовВИсториюОбменовСМаркетами(Маркет, Магазин, ИдОбмена, Данные)
	ВидОбмена         = Перечисления.мс_ВидыОбменовСМаркетами.ПоискЗаказов;
	НаправлениеОбмена = Перечисления.мс_НаправленияОбменовСМаркетами.ПолучениеОтвета;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.мс_ИсторияОбменовСМаркетами");
	ЭлементБлокировки.УстановитьЗначение("Маркет",            Маркет);
	ЭлементБлокировки.УстановитьЗначение("Магазин",           Магазин);
	ЭлементБлокировки.УстановитьЗначение("ВидОбмена",         ВидОбмена);
	ЭлементБлокировки.УстановитьЗначение("ИдОбмена",          ИдОбмена);
	ЭлементБлокировки.УстановитьЗначение("НаправлениеОбмена", НаправлениеОбмена);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	МенеджерЗаписи = РегистрыСведений.мс_ИсторияОбменовСМаркетами.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период            = ТекущаяДата();
	МенеджерЗаписи.Маркет            = Маркет;
	МенеджерЗаписи.Магазин           = Магазин;
	МенеджерЗаписи.ВидОбмена         = ВидОбмена;
	МенеджерЗаписи.ИдОбмена          = ИдОбмена;
	МенеджерЗаписи.НаправлениеОбмена = НаправлениеОбмена;
	МенеджерЗаписи.Данные            = Данные;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		МенеджерЗаписи.Записать();
		
		ЗафиксироватьТранзакцию();
		
		Возврат;
	Исключение
		ОтменитьТранзакцию();
		
		ДобавлениеЗаписиПолученияОтветаНаЗапросПолученияДанныхНеобработанныхЗаказовВИсториюОбменовСМаркетамиОшибкаЗаписи(ИнформацияОбОшибке());
	КонецПопытки;
КонецПроцедуры

Процедура ДобавитьЗаписьОтправкиЗапросаПодтвержденияКомплектацииЗаказаВИсториюОбменовСМаркетами(Маркет, Магазин, ИдОбмена, Данные)
	ВидОбмена         = Перечисления.мс_ВидыОбменовСМаркетами.ПодтверждениеКомплектации;
	НаправлениеОбмена = Перечисления.мс_НаправленияОбменовСМаркетами.ОтправкаЗапроса;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.мс_ИсторияОбменовСМаркетами");
	ЭлементБлокировки.УстановитьЗначение("Маркет",            Маркет);
	ЭлементБлокировки.УстановитьЗначение("Магазин",           Магазин);
	ЭлементБлокировки.УстановитьЗначение("ВидОбмена",         ВидОбмена);
	ЭлементБлокировки.УстановитьЗначение("ИдОбмена",          ИдОбмена);
	ЭлементБлокировки.УстановитьЗначение("НаправлениеОбмена", НаправлениеОбмена);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	МенеджерЗаписи = РегистрыСведений.мс_ИсторияОбменовСМаркетами.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период            = ТекущаяДата();
	МенеджерЗаписи.Маркет            = Маркет;
	МенеджерЗаписи.Магазин           = Магазин;
	МенеджерЗаписи.ВидОбмена         = ВидОбмена;
	МенеджерЗаписи.ИдОбмена          = ИдОбмена;
	МенеджерЗаписи.НаправлениеОбмена = НаправлениеОбмена;
	МенеджерЗаписи.Данные            = Данные;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		МенеджерЗаписи.Записать();
		
		ЗафиксироватьТранзакцию();
		
		Возврат;
	Исключение
		ОтменитьТранзакцию();
		
		ДобавлениеЗаписиОтправкиЗапросаПодтвержденияКомплектацииЗаказаВИсториюОбменовСМаркетамиОшибкаЗаписи(ИнформацияОбОшибке());
	КонецПопытки;
КонецПроцедуры

Процедура ДобавитьЗаписьПолученияОтветаНаЗапросПодтвержденияКомплектацииЗаказаВИсториюОбменовСМаркетами(Маркет, Магазин, ИдОбмена, Данные)
	ВидОбмена         = Перечисления.мс_ВидыОбменовСМаркетами.ПодтверждениеКомплектации;
	НаправлениеОбмена = Перечисления.мс_НаправленияОбменовСМаркетами.ПолучениеОтвета;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.мс_ИсторияОбменовСМаркетами");
	ЭлементБлокировки.УстановитьЗначение("Маркет",            Маркет);
	ЭлементБлокировки.УстановитьЗначение("Магазин",           Магазин);
	ЭлементБлокировки.УстановитьЗначение("ВидОбмена",         ВидОбмена);
	ЭлементБлокировки.УстановитьЗначение("ИдОбмена",          ИдОбмена);
	ЭлементБлокировки.УстановитьЗначение("НаправлениеОбмена", НаправлениеОбмена);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	МенеджерЗаписи = РегистрыСведений.мс_ИсторияОбменовСМаркетами.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период            = ТекущаяДата();
	МенеджерЗаписи.Маркет            = Маркет;
	МенеджерЗаписи.Магазин           = Магазин;
	МенеджерЗаписи.ВидОбмена         = ВидОбмена;
	МенеджерЗаписи.ИдОбмена          = ИдОбмена;
	МенеджерЗаписи.НаправлениеОбмена = НаправлениеОбмена;
	МенеджерЗаписи.Данные            = Данные;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		МенеджерЗаписи.Записать();
		
		ЗафиксироватьТранзакцию();
		
		Возврат;
	Исключение
		ОтменитьТранзакцию();
		
		ДобавлениеЗаписиПолученияОтветаНаЗапросПодтвержденияКомплектацииЗаказаВИсториюОбменовСМаркетамиОшибкаЗаписи(ИнформацияОбОшибке());
	КонецПопытки;
КонецПроцедуры

Процедура ДобавитьЗаписьОтправкиЗапросаПолученияЭтикеткиВИсториюОбменовСМаркетами(Маркет, Магазин, ИдОбмена, Данные)
	ВидОбмена         = Перечисления.мс_ВидыОбменовСМаркетами.ПолучениеЭтикетки;
	НаправлениеОбмена = Перечисления.мс_НаправленияОбменовСМаркетами.ОтправкаЗапроса;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.мс_ИсторияОбменовСМаркетами");
	ЭлементБлокировки.УстановитьЗначение("Маркет",            Маркет);
	ЭлементБлокировки.УстановитьЗначение("Магазин",           Магазин);
	ЭлементБлокировки.УстановитьЗначение("ВидОбмена",         ВидОбмена);
	ЭлементБлокировки.УстановитьЗначение("ИдОбмена",          ИдОбмена);
	ЭлементБлокировки.УстановитьЗначение("НаправлениеОбмена", НаправлениеОбмена);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	МенеджерЗаписи = РегистрыСведений.мс_ИсторияОбменовСМаркетами.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период            = ТекущаяДата();
	МенеджерЗаписи.Маркет            = Маркет;
	МенеджерЗаписи.Магазин           = Магазин;
	МенеджерЗаписи.ВидОбмена         = ВидОбмена;
	МенеджерЗаписи.ИдОбмена          = ИдОбмена;
	МенеджерЗаписи.НаправлениеОбмена = НаправлениеОбмена;
	МенеджерЗаписи.Данные            = Данные;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		МенеджерЗаписи.Записать();
		
		ЗафиксироватьТранзакцию();
		
		Возврат;
	Исключение
		ОтменитьТранзакцию();
		
		ДобавлениеЗаписиОтправкиЗапросаПолученияЭтикеткиВИсториюОбменовСМаркетамиОшибкаЗаписи(ИнформацияОбОшибке());
	КонецПопытки;
КонецПроцедуры

Процедура ДобавитьЗаписьПолученияОтветаНаЗапросПолученияЭтикеткиВИсториюОбменовСМаркетами(Маркет, Магазин, ИдОбмена, Данные)
	ВидОбмена         = Перечисления.мс_ВидыОбменовСМаркетами.ПолучениеЭтикетки;
	НаправлениеОбмена = Перечисления.мс_НаправленияОбменовСМаркетами.ПолучениеОтвета;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.мс_ИсторияОбменовСМаркетами");
	ЭлементБлокировки.УстановитьЗначение("Маркет",            Маркет);
	ЭлементБлокировки.УстановитьЗначение("Магазин",           Магазин);
	ЭлементБлокировки.УстановитьЗначение("ВидОбмена",         ВидОбмена);
	ЭлементБлокировки.УстановитьЗначение("ИдОбмена",          ИдОбмена);
	ЭлементБлокировки.УстановитьЗначение("НаправлениеОбмена", НаправлениеОбмена);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	МенеджерЗаписи = РегистрыСведений.мс_ИсторияОбменовСМаркетами.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период            = ТекущаяДата();
	МенеджерЗаписи.Маркет            = Маркет;
	МенеджерЗаписи.Магазин           = Магазин;
	МенеджерЗаписи.ВидОбмена         = ВидОбмена;
	МенеджерЗаписи.ИдОбмена          = ИдОбмена;
	МенеджерЗаписи.НаправлениеОбмена = НаправлениеОбмена;
	МенеджерЗаписи.Данные            = Данные;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		МенеджерЗаписи.Записать();
		
		ЗафиксироватьТранзакцию();
		
		Возврат;
	Исключение
		ОтменитьТранзакцию();
		
		ДобавлениеЗаписиПолученияОтветаНаЗапросПолученияЭтикеткиВИсториюОбменовСМаркетамиОшибкаЗаписи(ИнформацияОбОшибке());
	КонецПопытки;
КонецПроцедуры

#Область Логи
Процедура ОбработатьРезультатОбновленияОстатков(ДанныеМагазина, НомерПорции, ОстаткиНоменклатуры, РезультатОбновления)
	Период = ТекущаяДата();
	НаборЗаписей = РегистрыСведений.мс_ИсторияОбновленияОстатковМаркетов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(Период);
	НаборЗаписей.Отбор.Маркет.Установить(ДанныеМагазина.Маркет);
	НаборЗаписей.Отбор.Магазин.Установить(ДанныеМагазина.Ссылка);
	НаборЗаписей.Отбор.ВидОбмена.Установить(Перечисления.мс_ВидыОбменовСМаркетами.ВыгрузкаОстатков);
	НаборЗаписей.Отбор.НомерПорции.Установить(НомерПорции);
	Если РезультатОбновления = Неопределено Тогда
		Для Каждого ОстатокНоменклатуры Из ОстаткиНоменклатуры Цикл
			ДанныеОстатка = ОстатокНоменклатуры.Значение;
			ДанныеОбновления = Новый Структура;
			ДанныеОбновления.Вставить("Период",       Период);
			ДанныеОбновления.Вставить("Маркет",       ДанныеМагазина.Маркет);
			ДанныеОбновления.Вставить("Магазин",      ДанныеМагазина.Ссылка);
			ДанныеОбновления.Вставить("НомерПорции",  НомерПорции);
			ДанныеОбновления.Вставить("ВидОбмена",    Перечисления.мс_ВидыОбменовСМаркетами.ВыгрузкаОстатков);
			ДанныеОбновления.Вставить("Номенклатура", ДанныеОстатка.Номенклатура);
			ДанныеОбновления.Вставить("Остаток",      ДанныеОстатка.Остаток);
			ДанныеОбновления.Вставить("Успешно",      Ложь);
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ДанныеОбновления)
		КонецЦикла;
	Иначе
		Для Каждого ТекРезультат Из РезультатОбновления Цикл
			ДанныеОстатка = ОстаткиНоменклатуры.Получить(ТекРезультат.offer_id);
			Если ДанныеОстатка = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ДанныеОбновления = Новый Структура;
			ДанныеОбновления.Вставить("Период",       Период);
			ДанныеОбновления.Вставить("Маркет",       ДанныеМагазина.Маркет);
			ДанныеОбновления.Вставить("Магазин",      ДанныеМагазина.Ссылка);
			ДанныеОбновления.Вставить("ВидОбмена",    Перечисления.мс_ВидыОбменовСМаркетами.ВыгрузкаОстатков);
			ДанныеОбновления.Вставить("НомерПорции",  НомерПорции);
			ДанныеОбновления.Вставить("Номенклатура", ДанныеОстатка.Номенклатура);
			ДанныеОбновления.Вставить("Остаток",      ДанныеОстатка.Остаток);
			ДанныеОбновления.Вставить("Успешно",      ТекРезультат.updated);
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ДанныеОбновления)
		КонецЦикла;
	КонецЕсли;
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ОбновлениеОстатковЗаписьЛога(ИнформацияОбОшибке());
	КонецПопытки;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СозданиеИИзменениеВспомогательныхОбъектов

Функция СоздатьТаблицуСоставЗаказов()
	ДанныеЗаказовСНоменклатурой = Новый ТаблицаЗначений;
	ДанныеЗаказовСНоменклатурой.Колонки.Добавить("НомерОтправления",    ОбщегоНазначения.ОписаниеТипаСтрока(20));
	ДанныеЗаказовСНоменклатурой.Колонки.Добавить("ИдЗаказа",            ОбщегоНазначения.ОписаниеТипаСтрока(10));
	ДанныеЗаказовСНоменклатурой.Колонки.Добавить("ИдСклада",            ОбщегоНазначения.ОписаниеТипаЧисло(Метаданные.Документы.Заказ.Реквизиты.мс_ИдСкладаОзон.Тип.КвалификаторыЧисла.Разрядность));
	ДанныеЗаказовСНоменклатурой.Колонки.Добавить("НомерЗаказа",         ОбщегоНазначения.ОписаниеТипаСтрока(15));
	ДанныеЗаказовСНоменклатурой.Колонки.Добавить("ДатаЗаказа",          ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ДанныеЗаказовСНоменклатурой.Колонки.Добавить("ДатаДоставки",        ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ДанныеЗаказовСНоменклатурой.Колонки.Добавить("АдресСтрокой",        ОбщегоНазначения.ОписаниеТипаСтрока(Метаданные.Документы.Заказ.Реквизиты.АдресСтрокой.Тип.КвалификаторыСтроки.Длина));
	ДанныеЗаказовСНоменклатурой.Колонки.Добавить("Телефон",             ОбщегоНазначения.ОписаниеТипаСтрока(Метаданные.Документы.Заказ.Реквизиты.Телефон.Тип.КвалификаторыСтроки.Длина));
	ДанныеЗаказовСНоменклатурой.Колонки.Добавить("ФИО",                 ОбщегоНазначения.ОписаниеТипаСтрока(Метаданные.Документы.Заказ.Реквизиты.мс_ФИО.Тип.КвалификаторыСтроки.Длина));
	ДанныеЗаказовСНоменклатурой.Колонки.Добавить("Статус",              ОбщегоНазначения.ОписаниеТипаСтрока(Метаданные.РегистрыСведений.мс_ОчередьОбработкиЗаказовМаркета.Ресурсы.Статус.Тип.КвалификаторыСтроки.Длина));
	ДанныеЗаказовСНоменклатурой.Колонки.Добавить("ШК1",                 ОбщегоНазначения.ОписаниеТипаСтрока(20));
	ДанныеЗаказовСНоменклатурой.Колонки.Добавить("ШК2",                 ОбщегоНазначения.ОписаниеТипаСтрока(20));
	ДанныеЗаказовСНоменклатурой.Колонки.Добавить("КодТовара",           ОбщегоНазначения.ОписаниеТипаСтрока(Метаданные.Справочники.Номенклатура.ДлинаКода));
	ДанныеЗаказовСНоменклатурой.Колонки.Добавить("КодОзон",             ОбщегоНазначения.ОписаниеТипаСтрока(10));
	ДанныеЗаказовСНоменклатурой.Колонки.Добавить("Количество",          ОбщегоНазначения.ОписаниеТипаЧисло(Метаданные.Документы.Заказ.ТабличныеЧасти.Товары.Реквизиты.Количество.Тип.КвалификаторыЧисла.Разрядность));
	ЦенаРазрядность = Метаданные.Документы.Заказ.ТабличныеЧасти.Товары.Реквизиты.Цена.Тип.КвалификаторыЧисла.Разрядность;
	ЦенаРазрядностьДробнойЧасти = Метаданные.Документы.Заказ.ТабличныеЧасти.Товары.Реквизиты.Цена.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти;
	ДанныеЗаказовСНоменклатурой.Колонки.Добавить("Цена",                ОбщегоНазначения.ОписаниеТипаЧисло(ЦенаРазрядность, ЦенаРазрядностьДробнойЧасти));
	СуммаРазрядность = Метаданные.Документы.Заказ.ТабличныеЧасти.грОплаты.Реквизиты.Сумма.Тип.КвалификаторыЧисла.Разрядность;
	СуммаРазрядностьДробнойЧасти = Метаданные.Документы.Заказ.ТабличныеЧасти.грОплаты.Реквизиты.Сумма.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти;
	ДанныеЗаказовСНоменклатурой.Колонки.Добавить("СуммаОплатыМаркет",   ОбщегоНазначения.ОписаниеТипаЧисло(СуммаРазрядность, СуммаРазрядностьДробнойЧасти));
	ДанныеЗаказовСНоменклатурой.Колонки.Добавить("СуммаБонусовСпасибо", ОбщегоНазначения.ОписаниеТипаЧисло(СуммаРазрядность, СуммаРазрядностьДробнойЧасти));
	ДанныеЗаказовСНоменклатурой.Колонки.Добавить("Номенклатура",        ОбщегоНазначения.ОписаниеТиповПоТипу(Тип("СправочникСсылка.Номенклатура")));
	ДанныеЗаказовСНоменклатурой.Колонки.Добавить("Квант",               ОбщегоНазначения.ОписаниеТипаЧисло(Метаданные.Справочники.Номенклатура.Реквизиты.мс_Квант.Тип.КвалификаторыЧисла.Разрядность));
	
	ДанныеЗаказовСНоменклатурой.Индексы.Добавить("НомерЗаказа, КодТовара"); 
	ДанныеЗаказовСНоменклатурой.Индексы.Добавить("НомерЗаказа"); 
	ДанныеЗаказовСНоменклатурой.Индексы.Добавить("Номенклатура, КодОзон"); 
	
	Возврат ДанныеЗаказовСНоменклатурой;
КонецФункции

Функция КодыМаркета()
	КодыМаркета = Новый ТаблицаЗначений;
	КодыМаркета.Колонки.Добавить("Код",        ОбщегоНазначения.ОписаниеТипаСтрока(9));
	КодыМаркета.Колонки.Добавить("КодМаркета", ОбщегоНазначения.ОписаниеТипаЧисло(19));
	
	КодыМаркета.Индексы.Добавить("Код"); 
	
	Возврат КодыМаркета;
КонецФункции

Функция ДанныеЦен()
	ЦеныТоваров = Новый ТаблицаЗначений;
	ЦеныТоваров.Колонки.Добавить("Номенклатура",    ОбщегоНазначения.ОписаниеТиповПоТипу(Тип("СправочникСсылка.Номенклатура")));
	ЦеныТоваров.Колонки.Добавить("Код",             ОбщегоНазначения.ОписаниеТипаСтрока(9));
	ЦеныТоваров.Колонки.Добавить("КодМаркета",      ОбщегоНазначения.ОписаниеТипаЧисло(19));
	ЦеныТоваров.Колонки.Добавить("ПоследняяМиля",   ОбщегоНазначения.ОписаниеТипаЧисло(19));
	ЦеныТоваров.Колонки.Добавить("МагистральДо",    ОбщегоНазначения.ОписаниеТипаЧисло(19));
	ЦеныТоваров.Колонки.Добавить("МагистральОт",    ОбщегоНазначения.ОписаниеТипаЧисло(19));
	ЦеныТоваров.Колонки.Добавить("МинЗаОбработку",  ОбщегоНазначения.ОписаниеТипаЧисло(19));
	ЦеныТоваров.Колонки.Добавить("МаксЗаОбработку", ОбщегоНазначения.ОписаниеТипаЧисло(19));
	ЦеныТоваров.Колонки.Добавить("ВозвратОтмена",   ОбщегоНазначения.ОписаниеТипаЧисло(19));
	ЦеныТоваров.Колонки.Добавить("ВозвратОтменаДо", ОбщегоНазначения.ОписаниеТипаЧисло(19));
	ЦеныТоваров.Колонки.Добавить("ВозвратОтменаОт", ОбщегоНазначения.ОписаниеТипаЧисло(19));
	ЦеныТоваров.Колонки.Добавить("ПроцентПродажа",  ОбщегоНазначения.ОписаниеТипаЧисло(19));
	ЦеныТоваров.Колонки.Добавить("МаксПроцент",     ОбщегоНазначения.ОписаниеТипаЧисло(19));
	
	ЦеныТоваров.Индексы.Добавить("Код"); 
	
	Возврат ЦеныТоваров;
КонецФункции

Функция ПолучитьФиктивныйРезультатЗапросаОбновленияОстатков(ПараметрыЗапроса)
	РезультатОбновленияОстатков = Новый Массив;
	Для Каждого ДанныеТовара Из ПараметрыЗапроса.stocks Цикл
		РезультатОбновленияОстатков.Добавить(Новый Структура("offer_id, updated", ДанныеТовара.offer_id, Истина));
	КонецЦикла;
	Тело = КоннекторHTTP.ОбъектВJson(Новый Структура("result", РезультатОбновленияОстатков), , Новый Структура("СимволыОтступа", Символы.Таб));
	ДвоичныеДанные = ПолучитьДвоичныеДанныеИзСтроки(Тело, "utf-8");
	Результат = Новый Структура("Тело, Заголовки, Кодировка, КодСостояния", ДвоичныеДанные, Новый Структура, "utf-8", 200);
	
	Возврат Результат;
КонецФункции

Функция ПолучитьФиктивныйРезультатЗапросаОбновленияЦен(ПараметрыЗапроса)
	РезультатОбновленияЦен = Новый Массив;
	Для Каждого ДанныеТовара Из ПараметрыЗапроса.prices Цикл
		РезультатОбновленияЦен.Добавить(Новый Структура("offer_id, updated", ДанныеТовара.offer_id, Истина));
	КонецЦикла;
	Тело = КоннекторHTTP.ОбъектВJson(Новый Структура("result", РезультатОбновленияЦен), , Новый Структура("СимволыОтступа", Символы.Таб));
	ДвоичныеДанные = ПолучитьДвоичныеДанныеИзСтроки(Тело, "utf-8");
	Результат = Новый Структура("Тело, Заголовки, Кодировка, КодСостояния", ДвоичныеДанные, Новый Структура, "utf-8", 200);
	
	Возврат Результат;
КонецФункции

Функция ПолучитьФиктивныйРезультатЗапросаПолученияСпискаТоваров(ПараметрыЗапроса)
	Состав = Новый Массив;
	Состав.Добавить(Новый Структура("offer_id", "000081743"));
	Состав.Добавить(Новый Структура("offer_id", "000098242"));
	Состав.Добавить(Новый Структура("offer_id", "000046638"));
	Состав.Добавить(Новый Структура("offer_id", "000199854"));
	Состав.Добавить(Новый Структура("offer_id", "000175545"));
	Состав.Добавить(Новый Структура("offer_id", "000185004"));
	Тело = КоннекторHTTP.ОбъектВJson(Новый Структура("result", Новый Структура("items, last_id", Состав, "")));
	ДвоичныеДанные = ПолучитьДвоичныеДанныеИзСтроки(Тело, "utf-8");
	Результат = Новый Структура("Тело, Заголовки, Кодировка, КодСостояния", ДвоичныеДанные, Новый Структура, "utf-8", 200);
	
	Возврат Результат;
КонецФункции

Функция ПолучитьФиктивныйРезультатЗапросаПодтвержденияКомплектацииЗаказа(ПараметрыЗапроса)
	НомераОтправлений = Новый Массив;
	НомераОтправлений.Добавить(ПараметрыЗапроса.posting_number);
	Тело = КоннекторHTTP.ОбъектВJson(Новый Структура("result", НомераОтправлений));
	ДвоичныеДанные = ПолучитьДвоичныеДанныеИзСтроки(Тело, "utf-8");
	Результат = Новый Структура("Тело, Заголовки, Кодировка, КодСостояния", ДвоичныеДанные, Новый Структура, "utf-8", 200);
	
	Возврат Результат;
КонецФункции

Функция ПолучитьФиктивныйРезультатЗапросаПолученияЭтикетки(ПараметрыЗапроса)
	Этикетка = ПолучитьМакет("Этикетка");
	ДвоичныеДанные = КоннекторHTTP.ЗаписатьGZip(Этикетка);
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("content-encoding", "gzip");
	Результат = Новый Структура("Тело, Заголовки, Кодировка, КодСостояния", ДвоичныеДанные, Заголовки, "utf-8", 200);
	
	Возврат Результат;
КонецФункции

Функция ПолучитьФиктивныйРезультатЗапросаПолученияСтатусаЗаказа(ПараметрыЗапроса)
	РезультатОбновленияОстатков = Новый Массив;
	Для Каждого ДанныеТовара Из ПараметрыЗапроса.stocks Цикл
		РезультатОбновленияОстатков.Добавить(Новый Структура("offer_id, updated", ДанныеТовара.offer_id, Истина));
	КонецЦикла;
	Тело = КоннекторHTTP.ОбъектВJson(Новый Структура("result", РезультатОбновленияОстатков), , Новый Структура("СимволыОтступа", Символы.Таб));
	ДвоичныеДанные = ПолучитьДвоичныеДанныеИзСтроки(Тело, "utf-8");
	Результат = Новый Структура("Тело, Заголовки, Кодировка, КодСостояния", ДвоичныеДанные, Новый Структура, "utf-8", 200);
	
	Возврат Результат;
КонецФункции

Функция ПолучитьФиктивныйРезультатЗапросаПолученияДанныхНеобработанныхЗаказов(ПараметрыЗапроса)
	ГЧ = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());
	ИДыНоменклатуры = Новый Массив;
	ДанныеНоменклатуры = Новый Структура("Код, КодОзон", "000081743", "Тест1");
	ИДыНоменклатуры.Добавить(ДанныеНоменклатуры);
	ДанныеНоменклатуры = Новый Структура("Код, КодОзон", "000098242", "Тест2");
	ИДыНоменклатуры.Добавить(ДанныеНоменклатуры);
	ДанныеНоменклатуры = Новый Структура("Код, КодОзон", "000046638", "Тест3");
	ИДыНоменклатуры.Добавить(ДанныеНоменклатуры);
	ДанныеНоменклатуры = Новый Структура("Код, КодОзон", "000199854", "Тест4");
	ИДыНоменклатуры.Добавить(ДанныеНоменклатуры);
	ДанныеНоменклатуры = Новый Структура("Код, КодОзон", "000175545", "Тест5");
	ИДыНоменклатуры.Добавить(ДанныеНоменклатуры);
	ДанныеНоменклатуры = Новый Структура("Код, КодОзон", "000185004", "Тест6");
	ИДыНоменклатуры.Добавить(ДанныеНоменклатуры);
	Отправления = Новый Массив;
	КолЗаказов	= 3;
	Для Ы = 1 По КолЗаказов Цикл
	#Область СоставЗаказа
		Отправление = Новый Структура;
		Отправление.Вставить("order_id",         ГЧ.СлучайноеЧисло(100000000, 999999999));
		Отправление.Вставить("delivery_method",  Новый Структура("warehouse_id", ПараметрыЗапроса.filter.warehouse_id));
		Зн1 = ГЧ.СлучайноеЧисло(10000000, 99999999); Зн2 = ГЧ.СлучайноеЧисло(1000, 9999); Зн3 = ГЧ.СлучайноеЧисло(1, 9);
		Отправление.Вставить("posting_number",   СтрШаблон("%1-%2-%3", Формат(Зн1, "ЧГ=0"), Формат(Зн2, "ЧГ=0"), Формат(Зн3, "ЧГ=0")));
		Отправление.Вставить("order_number",       СтрШаблон("%1-%2", Формат(Зн1, "ЧГ=0"), Формат(Зн2, "ЧГ=0")));
		Отправление.Вставить("in_process_at",      ТекущаяДата());
		Отправление.Вставить("shipment_date",      ТекущаяДата());
		Зн1 = СтрШаблон("%(1)00000", Формат(ГЧ.СлучайноеЧисло(100000000, 999999999), "ЧГ=0")); Зн2 = СтрШаблон("%(1)00000", Формат(ГЧ.СлучайноеЧисло(100000000, 999999999), "ЧГ=0"));
		Отправление.Вставить("barcodes", Новый Структура("upper_barcode, lower_barcode", Зн1, Зн2));
		СоставОтправления  = Новый Массив;
		НоменклатураЗаказа = Новый Массив; 
		КолПозиций         = ГЧ.СлучайноеЧисло(1, 2);
		Пока Истина Цикл
			ИндНоменклатуры = ГЧ.СлучайноеЧисло(0, ИДыНоменклатуры.ВГраница());
			Если НоменклатураЗаказа.Найти(ИндНоменклатуры) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			НоменклатураЗаказа.Добавить(ИндНоменклатуры);
			Если НоменклатураЗаказа.Количество() = КолПозиций Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Для Каждого ИндНоменклатуры Из НоменклатураЗаказа Цикл
			ДанныеНоменклатуры = ИДыНоменклатуры.Получить(ИндНоменклатуры);
			СоставОтправления.Добавить(Новый Структура("offer_id, sku, quantity, price", ДанныеНоменклатуры.Код, ДанныеНоменклатуры.КодОзон, ГЧ.СлучайноеЧисло(1, 99), ГЧ.СлучайноеЧисло(1000, 9999)));
		КонецЦикла;
		Отправление.Вставить("products", СоставОтправления); 
		Отправления.Добавить(Отправление);
	#КонецОбласти
	КонецЦикла;
	
	Тело = КоннекторHTTP.ОбъектВJson(Новый Структура("result", Новый Структура("postings", Отправления)), , Новый Структура("СимволыОтступа", Символы.Таб));
	ДвоичныеДанные = ПолучитьДвоичныеДанныеИзСтроки(Тело, "utf-8");
	Результат = Новый Структура("Тело, Заголовки, Кодировка, КодСостояния", ДвоичныеДанные, Новый Структура, "utf-8", 200);
	
	Возврат Результат;
КонецФункции

Функция КодыМаркетаТЗ(КодыМаркета)
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("КодМаркета", ОбщегоНазначения.ОписаниеТипаЧисло(19, 0));
	Для Каждого КодМаркета Из КодыМаркета Цикл
		ЗаполнитьЗначенияСвойств(ТЗ.Добавить(), Новый Структура("КодМаркета", КодМаркета));
	КонецЦикла;
	ТЗ.Свернуть("КодМаркета");
	
	Возврат ТЗ;
КонецФункции

Функция ДанныеАкций()
	ДанныеАкций = Новый ТаблицаЗначений;
	ДанныеАкций.Колонки.Добавить("Идентификатор",             ОбщегоНазначения.ОписаниеТипаСтрока(9));
	ДанныеАкций.Колонки.Добавить("Наименование",              ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ДанныеАкций.Колонки.Добавить("Тип",                       ОбщегоНазначения.ОписаниеТипаСтрока(20));
	ДанныеАкций.Колонки.Добавить("Описание",                  ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ДанныеАкций.Колонки.Добавить("ДатаНачала",                ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ДанныеАкций.Колонки.Добавить("ДатаОкончания",             ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ДанныеАкций.Колонки.Добавить("ДатаПриостановки",          ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ДанныеАкций.Колонки.Добавить("КоличествоДоступных",       ОбщегоНазначения.ОписаниеТипаЧисло(19));
	ДанныеАкций.Колонки.Добавить("КоличествоУчаствующих",     ОбщегоНазначения.ОписаниеТипаЧисло(19));
	ДанныеАкций.Колонки.Добавить("Участвуем",                 ОбщегоНазначения.ОписаниеТиповПоТипу(Тип("Булево")));
	ДанныеАкций.Колонки.Добавить("НуженПромокод",             ОбщегоНазначения.ОписаниеТиповПоТипу(Тип("Булево")));
	ДанныеАкций.Колонки.Добавить("КоличествоЗаблокированных", ОбщегоНазначения.ОписаниеТипаЧисло(19));
	ДанныеАкций.Колонки.Добавить("СЦелевой",                  ОбщегоНазначения.ОписаниеТиповПоТипу(Тип("Булево")));
	ДанныеАкций.Колонки.Добавить("СуммаЗаказа",               ОбщегоНазначения.ОписаниеТипаЧисло(19));
	ДанныеАкций.Колонки.Добавить("ТипСкидки",                 ОбщегоНазначения.ОписаниеТипаСтрока(20));
	ДанныеАкций.Колонки.Добавить("РазмерСкидки",              ОбщегоНазначения.ОписаниеТипаЧисло(19));
	
	Возврат ДанныеАкций;
КонецФункции

Функция ДанныеТоваров()
	ДанныеТоваров = Новый ТаблицаЗначений;
	ДанныеТоваров.Колонки.Добавить("Идентификатор",             ОбщегоНазначения.ОписаниеТипаСтрока(9));
	ДанныеТоваров.Колонки.Добавить("Наименование",              ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ДанныеТоваров.Колонки.Добавить("Тип",                       ОбщегоНазначения.ОписаниеТипаСтрока(20));
	ДанныеТоваров.Колонки.Добавить("Описание",                  ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ДанныеТоваров.Колонки.Добавить("ДатаНачала",                ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ДанныеТоваров.Колонки.Добавить("ДатаОкончания",             ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ДанныеТоваров.Колонки.Добавить("ДатаПриостановки",          ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ДанныеТоваров.Колонки.Добавить("КоличествоДоступных",       ОбщегоНазначения.ОписаниеТипаЧисло(19));
	ДанныеТоваров.Колонки.Добавить("КоличествоУчаствующих",     ОбщегоНазначения.ОписаниеТипаЧисло(19));
	ДанныеТоваров.Колонки.Добавить("Участвуем",                 ОбщегоНазначения.ОписаниеТиповПоТипу(Тип("Булево")));
	ДанныеТоваров.Колонки.Добавить("НуженПромокод",             ОбщегоНазначения.ОписаниеТиповПоТипу(Тип("Булево")));
	ДанныеТоваров.Колонки.Добавить("КоличествоЗаблокированных", ОбщегоНазначения.ОписаниеТипаЧисло(19));
	ДанныеТоваров.Колонки.Добавить("СЦелевой",                  ОбщегоНазначения.ОписаниеТиповПоТипу(Тип("Булево")));
	ДанныеТоваров.Колонки.Добавить("СуммаЗаказа",               ОбщегоНазначения.ОписаниеТипаЧисло(19));
	ДанныеТоваров.Колонки.Добавить("ТипСкидки",                 ОбщегоНазначения.ОписаниеТипаСтрока(20));
	ДанныеТоваров.Колонки.Добавить("РазмерСкидки",              ОбщегоНазначения.ОписаниеТипаЧисло(19));
	
	Возврат ДанныеТоваров;
КонецФункции

//Шаблон {
Функция ПолучитьФиктивныйРезультатЗапроса_ИмяЗапросаРодПад()
	ДанныеРезультата = Новый Структура();
	Тело = КоннекторHTTP.ОбъектВJson(Новый Структура("ИМЯСВОЙСТВА", ДанныеРезультата), , Новый Структура("СимволыОтступа", Символы.Таб));
	ДвоичныеДанные = ПолучитьДвоичныеДанныеИзСтроки(Тело, "utf-8");
	Результат = Новый Структура("Тело, Заголовки, Кодировка, КодСостояния", ДвоичныеДанные, Новый Структура, "utf-8", 200);
	
	Возврат Результат;
КонецФункции
//} Шаблон

#КонецОбласти

#Область ОбработкаДаных

Функция РазбитьТаблицуИзМенеджераНаПорции(Данные, ВПорции, ВыраженияПолей)
	Запрос = Новый Запрос(ПолучитьТекстЗапросаСозданияТаблицыСПорциями());
	Запрос.МенеджерВременныхТаблиц = Данные.Менеджер;
	Результат = Запрос.ВыполнитьПакет();
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ПолучитьТекстЗапросаРазбивкиНаПорции());
	//УстановитьКоличествоПолучаемыхЗаписей(СхемаЗапроса, ВПорции);
	ИзменитьВыраженияПолей(СхемаЗапроса, ВыраженияПолей);
	ВсегоЗаписей = Данные.КоличествоЗаписей;
	Порций = Цел(ВсегоЗаписей / ВПорции) + ?((ВсегоЗаписей % ВПорции) > 0, 1, 0);
	Для Порция = 1 По Порций Цикл
		Если Порция * ВПорции > ВсегоЗаписей Тогда
			УстановитьКоличествоПолучаемыхЗаписей(СхемаЗапроса, ВПорции, ВсегоЗаписей);
		Иначе
			УстановитьКоличествоПолучаемыхЗаписей(СхемаЗапроса, ВПорции, Порция * ВПорции);
		КонецЕсли;
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		Запрос.Параметры.Вставить("Порция", Порция);
		Запрос.Выполнить();
	КонецЦикла;
	
	СхемаЗапроса.УстановитьТекстЗапроса(ПолучитьТекстЗапросаТаблицыСПорциями());
	ИзменитьПсевдонимыКолонок(СхемаЗапроса, ВыраженияПолей);
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
КонецФункции

Функция РазбитьТЗНаПорции(Данные, ВПорции, ВыраженияПолей) Экспорт
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ПолучитьТекстЗапросаПомещенияТаблицы());
	ИзменитьВыраженияПолей(СхемаЗапроса, ВыраженияПолей, Неопределено);
	СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса")).УстановитьТекстЗапроса(ПолучитьТекстЗапросаСозданияТаблицыСПорциями());
	Запрос = Новый Запрос(СхемаЗапроса.ПолучитьТекстЗапроса());
				
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Параметры.Вставить("Данные", Данные);
	Результат = Запрос.ВыполнитьПакет();

	ВсегоЗаписей = Данные.Количество();
	Порций = Цел(ВсегоЗаписей / ВПорции) + ?((ВсегоЗаписей % ВПорции) > 0, 1, 0);
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ПолучитьТекстЗапросаРазбивкиНаПорции());
	Пакет1Оператор = СхемаЗапроса.ПакетЗапросов[0].Операторы[0];
	Пакет1Оператор.КоличествоПолучаемыхЗаписей = ВПорции;
	Пакет1ОператорВложенный = Пакет1Оператор.Источники[0].Источник.Запрос.Операторы[0];
	Для Порция = 1 По Порций Цикл
		Если Порция * ВПорции > ВсегоЗаписей Тогда
			Пакет1Оператор.КоличествоПолучаемыхЗаписей = ВсегоЗаписей - (Порция - 1) * ВПорции;
			Пакет1ОператорВложенный.КоличествоПолучаемыхЗаписей = ВсегоЗаписей;
		Иначе
			Пакет1ОператорВложенный.КоличествоПолучаемыхЗаписей = Порция * ВПорции;
		КонецЕсли;
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		Запрос.Параметры.Вставить("Порция", Порция);
		Запрос.Выполнить();
	КонецЦикла;
	
	СхемаЗапроса.УстановитьТекстЗапроса(ПолучитьТекстЗапросаТаблицыСПорциями());
	ИзменитьПсевдонимыКолонок(СхемаЗапроса, ВыраженияПолей);
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область РаботаСоСхемойЗапроса

Функция ЗаменитьТаблицуФида(ТекстЗапроса, ИмяТаблицыДанныхФида = "ДанныеФида", ИмяПоля = "Код", ИмяТаблицыДляПомещения = "ВТ_Данные")
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	//Добавляем новую таблицу
	НовыйИсточник = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Источники.Добавить(Тип("ОписаниеВременнойТаблицыСхемыЗапроса"), СтрШаблон("&%1", ИмяТаблицыДанныхФида), ИмяТаблицыДанныхФида);
	//Добавляем новой табилице новое поле
	НовыйИсточник.Источник.ДоступныеПоля.Добавить(ИмяПоля);
	//Заменяем исходное поле запроса новым полем из новой таблица
	СхемаЗапроса.ПакетЗапросов[0].Операторы[0].ВыбираемыеПоля.Установить(0, Новый ВыражениеСхемыЗапроса(СтрШаблон("%1.%2", ИмяТаблицыДанныхФида, ИмяПоля)));
	//Удаляем исходную таблицу
	СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Источники.Удалить(0);

	//Устанавливаем таблицу для помещения
	СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество() - 1].ТаблицаДляПомещения = ИмяТаблицыДляПомещения;
	
	Возврат СхемаЗапроса.ПолучитьТекстЗапроса();
КонецФункции

Функция ПолучитьДоработанныйТекстЗапросаТаблицыОстатков(ТекстЗапроса)
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	СхемаЗапроса.ПакетЗапросов.Получить(СхемаЗапроса.ПакетЗапросов.Количество() - 1).ТаблицаДляПомещения = "ВТ_Данные";
	
	Возврат СхемаЗапроса.ПолучитьТекстЗапроса();
КонецФункции	

Процедура ИзменитьВыраженияПолей(СхемаЗапроса, ВыраженияПолей, ИндексОператораВлож = 0, ИндексИсточникаВлож = 0, ИндексПакета = 0, ИндексОператора = 0, ИндексИсточника = 0)
	Оператор = СхемаЗапроса.ПакетЗапросов[ИндексПакета].Операторы[ИндексОператора];
	Если ИндексОператораВлож = Неопределено Тогда
		Источник = Оператор.Источники[ИндексИсточника].Источник;
	Иначе	
		Оператор = Оператор.Источники[ИндексИсточника].Источник.Запрос.Операторы[ИндексОператораВлож];
		Источник = Оператор.Источники[ИндексИсточникаВлож].Источник;
	КонецЕсли;
	Для Каждого ТекВыражение Из ВыраженияПолей Цикл
		Источник.ДоступныеПоля.Добавить(ТекВыражение.Значение);
		ИмяПоля = СтрШаблон("%1.%2", Источник.Псевдоним, ТекВыражение.Ключ);
		Поле = Оператор.ВыбираемыеПоля.Найти(ИмяПоля);
		ИндексПоля = Оператор.ВыбираемыеПоля.Индекс(Поле);
		ВыражениеПоля = СтрШаблон("%1.%2", Источник.Псевдоним, ТекВыражение.Значение);
		Оператор.ВыбираемыеПоля.Установить(ИндексПоля, Новый ВыражениеСхемыЗапроса(ВыражениеПоля));
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьКоличествоПолучаемыхЗаписей(СхемаЗапроса, ВПорции, ВПорцииВлож = Неопределено, ИндексПакета = 0, ИндексОператора = 0, ИндексИсточника = 0, ИндексОператораВлож = 0)
	Пакет1Оператор = СхемаЗапроса.ПакетЗапросов[ИндексПакета].Операторы[ИндексОператора];
	Пакет1Оператор.КоличествоПолучаемыхЗаписей = ВПорции;
	Если ВПорцииВлож <> Неопределено Тогда
		Пакет1ОператорВложенный = Пакет1Оператор.Источники[ИндексИсточника].Источник.Запрос.Операторы[ИндексОператораВлож];
		Пакет1ОператорВложенный.КоличествоПолучаемыхЗаписей = ВПорцииВлож;
	КонецЕсли;
КонецПроцедуры

Процедура ИзменитьПсевдонимыКолонок(СхемаЗапроса, ВыраженияПолей, ИндексПакета = 0)
	Пакет = СхемаЗапроса.ПакетЗапросов[ИндексПакета];
	Для Каждого ТекВыражение Из ВыраженияПолей Цикл
		КолонкаИдентификатор = Пакет.Колонки.Найти(ТекВыражение.Ключ);
		КолонкаИдентификатор.Псевдоним = ТекВыражение.Значение;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область РаботаССКД

Процедура ЗаполнитьНастройкиКомпоновщика(Компоновщик, Номенклатура, ДанныеМагазина)
	Если ЗначениеЗаполнено(ДанныеМагазина.ВариантРаботы) И ДанныеМагазина.ВариантРаботы = Перечисления.мс_ВариантыРаботыСкладовМаркетов.СоСклада Тогда
		Настройки = Справочники.ДополнительныеНастройки.РаботаССайтомOzonFBS.СохраненныеНастройки.Получить().НастройкиСхемы;
	Иначе
		Настройки = Справочники.ДополнительныеНастройки.РаботаССайтомOzonFBSПодЗаказ.СохраненныеНастройки.Получить().НастройкиСхемы;
	КонецЕсли;
	Для Каждого ТекПараметр Из Настройки.ПараметрыДанных.Элементы Цикл
		ЗначениеПараметраКомпоновкиДанных = Компоновщик.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ТекПараметр.Параметр);
		Если ЗначениеПараметраКомпоновкиДанных <> Неопределено Тогда
			ЗначениеПараметраКомпоновкиДанных.Значение		= ТекПараметр.Значение;
			ЗначениеПараметраКомпоновкиДанных.Использование = ТекПараметр.Использование;
		КонецЕсли;
	КонецЦикла;
	ЗначениеПараметраКомпоновкиДанных = Компоновщик.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ТекДата"));
	Если ЗначениеПараметраКомпоновкиДанных <> Неопределено Тогда
		ЗначениеПараметраКомпоновкиДанных.Значение		= ТекущаяДата();
		ЗначениеПараметраКомпоновкиДанных.Использование = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		ЗначениеПараметраКомпоновкиДанных = Компоновщик.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВыбНоменклатура"));
		Если ЗначениеПараметраКомпоновкиДанных <> Неопределено Тогда
			ЗначениеПараметраКомпоновкиДанных.Значение		= Номенклатура;
			ЗначениеПараметраКомпоновкиДанных.Использование = Истина;
		КонецЕсли;
	КонецЕсли;
	ЗначениеПараметраКомпоновкиДанных = Компоновщик.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Наценка"));
	Если ЗначениеПараметраКомпоновкиДанных <> Неопределено Тогда
		ЗначениеПараметраКомпоновкиДанных.Значение		= ЗначениеНастроекПовтИсп.ПолучитьНаценкуОзон_ДБС();
		ЗначениеПараметраКомпоновкиДанных.Использование = Истина;
	КонецЕсли;
	ЗначениеПараметраКомпоновкиДанных = Компоновщик.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Скидка"));
	Если ЗначениеПараметраКомпоновкиДанных <> Неопределено Тогда
		ЗначениеПараметраКомпоновкиДанных.Значение		= мс_РаботаСОзонПовтИсп.ПолучитьСкидкуОзон_ДБС();
		ЗначениеПараметраКомпоновкиДанных.Использование = Истина;
	КонецЕсли;
	ЗначениеПараметраКомпоновкиДанных = Компоновщик.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВариантРаботы"));
	Если ЗначениеПараметраКомпоновкиДанных <> Неопределено Тогда
		ЗначениеПараметраКомпоновкиДанных.Значение		= ДанныеМагазина.ВариантРаботы;
		ЗначениеПараметраКомпоновкиДанных.Использование = Истина;
	КонецЕсли;
	ЗначениеПараметраКомпоновкиДанных = Компоновщик.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПоставщикМедси"));
	Если ЗначениеПараметраКомпоновкиДанных <> Неопределено Тогда
		ЗначениеПараметраКомпоновкиДанных.Значение		= ЗначениеНастроекПовтИсп.КонтрагентДляСвязокМедси();
		ЗначениеПараметраКомпоновкиДанных.Использование = Истина;
	КонецЕсли;
	Для Каждого ТекОтбор Из Настройки.Отбор.Элементы Цикл
		Если Компоновщик.Настройки.ДоступныеПоляОтбора.НайтиПоле(ТекОтбор.ЛевоеЗначение) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Компоновщик.Настройки.Отбор, ТекОтбор.ЛевоеЗначение, ТекОтбор.ПравоеЗначение, ТекОтбор.ВидСравнения, , ТекОтбор.Использование, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ТекстыЗапросов

Функция ПолучитьТекстЗапросаСозданияТаблицыСПорциями()
	ТекстЗапроса = 
	#Область ТекстЗапроса
		"ВЫБРАТЬ
		|	NULL КАК Идентификатор,
		|	NULL КАК Ресурс,
		|	NULL КАК НомерПорции
		|ПОМЕСТИТЬ ВТ_ДанныеНовые
		|ГДЕ
		|	ЛОЖЬ";
	#КонецОбласти
	
	Возврат ТекстЗапроса;
КонецФункции

Функция ПолучитьТекстЗапросаРазбивкиНаПорции()
	ТекстЗапроса = 
	#Область ТекстЗапроса
		"ВЫБРАТЬ ПЕРВЫЕ 20
		|	Влож.Идентификатор КАК Идентификатор,
		|	Влож.Ресурс КАК Ресурс
		|ПОМЕСТИТЬ ВТ_Порция
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 20
		|		ВТ_Данные.Идентификатор КАК Идентификатор,
		|		ВТ_Данные.Ресурс КАК Ресурс
		|	ИЗ
		|		ВТ_Данные КАК ВТ_Данные
		|	
		|	УПОРЯДОЧИТЬ ПО
		|		Идентификатор) КАК Влож
		|
		|УПОРЯДОЧИТЬ ПО
		|	Идентификатор УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДанныеНовые.НомерПорции КАК НомерПорции,
		|	ВТ_ДанныеНовые.Идентификатор КАК Идентификатор,
		|	ВТ_ДанныеНовые.Ресурс КАК Ресурс
		|ПОМЕСТИТЬ ВТ_Темп
		|ИЗ
		|	ВТ_ДанныеНовые КАК ВТ_ДанныеНовые
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&Порция,
		|	ВТ_Порция.Идентификатор,
		|	ВТ_Порция.Ресурс
		|ИЗ
		|	ВТ_Порция КАК ВТ_Порция
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Порция
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ДанныеНовые
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Темп.НомерПорции КАК НомерПорции,
		|	ВТ_Темп.Идентификатор КАК Идентификатор,
		|	ВТ_Темп.Ресурс КАК Ресурс
		|ПОМЕСТИТЬ ВТ_ДанныеНовые
		|ИЗ
		|	ВТ_Темп КАК ВТ_Темп
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Темп";
	#КонецОбласти
	
	Возврат ТекстЗапроса;
КонецФункции	

Функция ПолучитьТекстЗапросаТаблицыСПорциями()
	ТекстЗапроса = 
	#Область ТекстЗапроса
		"ВЫБРАТЬ
		|	ВТ_ДанныеНовые.НомерПорции КАК НомерПорции,
		|	ВложенныйЗапрос.Номенклатура.Ссылка КАК Номенклатура,
		|	ВТ_ДанныеНовые.Идентификатор КАК Идентификатор,
		|	ВТ_ДанныеНовые.Ресурс КАК Ресурс,
		|	ЛОЖЬ КАК ПризнакУдаления
		|ИЗ
		|	ВТ_ДанныеНовые КАК ВТ_ДанныеНовые
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ВЫРАЗИТЬ(Номенклатура.Код КАК СТРОКА(10)) КАК Код,
		|			МАКСИМУМ(Номенклатура.Ссылка) КАК Номенклатура
		|		ИЗ
		|			Справочник.Номенклатура КАК Номенклатура
		|		
		|		СГРУППИРОВАТЬ ПО
		|			Номенклатура.Код) КАК ВложенныйЗапрос
		|		ПО ВТ_ДанныеНовые.Идентификатор = ВложенныйЗапрос.Код
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерПорции,
		|	Идентификатор
		|ИТОГИ ПО
		|	НомерПорции
		|АВТОУПОРЯДОЧИВАНИЕ";
	#КонецОбласти
	
	Возврат ТекстЗапроса;
КонецФункции	

Функция ПолучитьТекстЗапросаПомещенияТаблицы()
	ТекстЗапроса = 
	#Область ТекстЗапроса
		"ВЫБРАТЬ
		|	Данные.Идентификатор КАК Идентификатор,
		|	Данные.Ресурс КАК Ресурс,
		|	0 КАК НомерПорции
		|ПОМЕСТИТЬ ВТ_Данные
		|ИЗ
		|	&Данные КАК Данные";
	#КонецОбласти
	
	Возврат ТекстЗапроса;
КонецФункции	

Функция ПолучитьТекстЗапросаРазбивкиНаПорцииСхемыЗапроса()
	ТекстЗапроса = 
	#Область ТекстЗапроса
		"ВЫБРАТЬ ПЕРВЫЕ 20
		|	Влож.ИдБитрикс КАК ИдБитрикс,
		|	Влож.Цена КАК Цена
		|ПОМЕСТИТЬ ВТ_Порция
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 20
		|		ВТ_Данные.ИдБитрикс КАК ИдБитрикс,
		|		ВТ_Данные.Ресурс КАК Ресурс
		|	ИЗ
		|		ВТ_Данные КАК ВТ_Данные
		|	
		|	УПОРЯДОЧИТЬ ПО
		|		Номенклатура) КАК Влож
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДанныеНовые.НомерПорции КАК НомерПорции,
		|	ВТ_ДанныеНовые.ИдБитрикс КАК ИдБитрикс,
		|	ВТ_ДанныеНовые.Цена КАК Цена
		|ПОМЕСТИТЬ ВТ_Темп
		|ИЗ
		|	ВТ_ДанныеНовые КАК ВТ_ДанныеНовые
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&Порция,
		|	ВТ_Порция.ИдБитрикс,
		|	ВТ_Порция.Цена
		|ИЗ
		|	ВТ_Порция КАК ВТ_Порция
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Порция
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ДанныеНовые
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Темп.НомерПорции КАК НомерПорции,
		|	ВТ_Темп.ИдБитрикс КАК ИдБитрикс,
		|	ВТ_Темп.Цена КАК Цена
		|ПОМЕСТИТЬ ВТ_ДанныеНовые
		|ИЗ
		|	ВТ_Темп КАК ВТ_Темп
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Темп";
	#КонецОбласти

	Возврат ТекстЗапроса;
КонецФункции	

Функция ТекстЗапросаПолученияДанныхТоваров(ИмяКолонки) Экспорт
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(
		#Область ТекстЗапроса
		"ВЫБРАТЬ
		|	Отправления.ИдЗаказа КАК ИдЗаказа
		|ПОМЕСТИТЬ ВТ_ИдЗаказов
		|ИЗ
		|	&Отправления КАК Отправления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИдЗаказа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_ИдЗаказов.ИдЗаказа КАК ИдЗаказа,
		|	ВЫБОР
		|		КОГДА 1 В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					1
		|				ИЗ
		|					Документ.Заказ КАК ДокументЗаказ
		|				ГДЕ
		|					ВТ_ИдЗаказов.ИдЗаказа = ДокументЗаказ.мс_НомерОзон)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УжеСоздан
		|ИЗ
		|	ВТ_ИдЗаказов КАК ВТ_ИдЗаказов");
	#КонецОбласти
	ВыраженияПолей = Новый Структура("ИдЗаказа", ИмяКолонки); 
	ИзменитьВыраженияПолей(СхемаЗапроса, ВыраженияПолей, Неопределено);
	ИзменитьПсевдонимыКолонок(СхемаЗапроса, Новый Структура("ИдЗаказа", ИмяКолонки), 1);
	
	Возврат СхемаЗапроса.ПолучитьТекстЗапроса();
КонецФункции

#КонецОбласти

Функция ПолучитьПараметрыПреобразованияJSON() Экспорт
	ПараметрыПреобразованияJSON = Новый Структура;
	ПараметрыПреобразованияJSON.Вставить("ПрочитатьВСоответствие",		 Ложь);
	ПараметрыПреобразованияJSON.Вставить("ФорматДатыJSON",				 ФорматДатыJSON.ISO);
	ПараметрыПреобразованияJSON.Вставить("ИменаСвойствСоЗначениямиДата", Неопределено);
	ПараметрыПреобразованияJSON.Вставить("ВариантЗаписиДаты",			 ВариантЗаписиДатыJSON.УниверсальнаяДата);
	Возврат ПараметрыПреобразованияJSON;
КонецФункции

Функция РекомендуемоеКоличествоВПорцииНоменклатуры()
	Возврат 100;
КонецФункции

Функция ИмяКолонкиИдЗаказа()
	Возврат "НомерОтправления";
КонецФункции

Функция МаксимальноеКоличествоПопытокПолученияСтатусаПередачиДанныхМаркировки()
	Возврат 3;
КонецФункции

#КонецОбласти

#Область ОбработкаОшибок

#Область ДанныеОстатков

Процедура ОбновлениеОстатковОшибкаПолученияМенеджераСТаблицейОстатков(ДанныеМагазина, Номенклатура)
	ТекстСообщения =
		"Не удалось получить менеджер с таблицей остатков.
		|Магазин: %1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, ДанныеМагазина.Ссылка);
	ИмяСобытия = "Озон.ПолучениеМенеджераСТаблицейОстатков";
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ПараметрыСеанса, ТекстСообщения);
КонецПроцедуры

Процедура ОбновлениеОстатковОшибкаПолученияЗапросаОстатков(ДанныеМагазина, Номенклатура)
	ТекстСообщения = 
		"Не удалось получить менеджер с таблицей остатков.
		|Магазин: %1
		|Номенклатура: %2";
	НоменклатураПредставление = ?(ЗначениеЗаполнено(Номенклатура), Номенклатура, "Не выбрана.");
	ТекстСообщения = СтрШаблон(ТекстСообщения, ДанныеМагазина.Ссылка, НоменклатураПредставление);
	ИмяСобытия = "Озон.ПолучениеМенеджераСТаблицейОстатков";
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ПараметрыСеанса, ТекстСообщения);
КонецПроцедуры	

Процедура ОбновлениеОстатковОшибкаПолученияМакетаСКД(ДанныеМагазина, Номенклатура)
	ТекстСообщения = 
		"Не удалось получить получить макет СКД для получения остатков.
		|Магазин: %1
		|Номенклатура: %2";
	НоменклатураПредставление = ?(ЗначениеЗаполнено(Номенклатура), Номенклатура, "Не выбрана.");
	ТекстСообщения = СтрШаблон(ТекстСообщения, ДанныеМагазина.Ссылка, НоменклатураПредставление);
	ИмяСобытия = "Озон.ПолучениеМакетаСКДОстатков";
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ПараметрыСеанса, ТекстСообщения);
КонецПроцедуры

Процедура ПолучениеМенеджераСТаблицейОстатковПустойРезультат(Номенклатура)
	ДанныеОтбора = Новый Массив;
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		ДанныеОтбора.Добавить(СтрШаблон("Номенклатура: %1", Номенклатура));
	КонецЕсли;
	Отбор = "Нет";
	Если ДанныеОтбора.Количество() > 0 Тогда
		Отбор = СтрСоединить(ДанныеОтбора, Символы.ПС);
	КонецЕсли;
	ТекстСообщения = 
		"При получении менеждера с таблицей остатков был получен пустой результат.
		|Отбор:
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, Отбор);
	ИмяСобытия = "Озон.ЗапросОбновленияОстатков";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение, , , ТекстСообщения);
КонецПроцедуры

Процедура ОбновлениеОстатковОшибкаВыполненияЗапроса(ИнформацияОбОшибке)
	ТекстСообщения = 
		"При выполенении запроса обновления остатков произошла ошибка:
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, ИнформацияОбОшибке);
	ИмяСобытия = "Озон.ЗапросОбновленияОстатков";
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ПараметрыСеанса, ТекстСообщения);
КонецПроцедуры

Процедура ОбновлениеОстатковОшибкаПустойРезультатаЗапроса(ДанныеЗапроса)
	ТекстСообщения = 
		"Запроса обновления остатков:
		|%1
		|Вернул пустой результат.";
	ТекстСообщения = СтрШаблон(ТекстСообщения, КоннекторHTTP.ОбъектВJson(ДанныеЗапроса, , Новый Структура("СимволыОтступа", Символы.Таб)));
	ИмяСобытия = "Озон.ЗапросОбновленияОстатков";
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ОбновлениеОстатковОшибкаРезультата(Результат)
	ТекстСообщения = 
		"Результат запроса обновления остатков содержит ошибку:
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, КоннекторHTTP.КакТекст(Результат));
	ИмяСобытия = "Озон.ЗапросОбновленияОстатков";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ОбновлениеОстатковОшибкаПолученияДанныхРезультата(ИнформацияОбОшибке)
	ТекстСообщения = 
		"При получении данных результата запроса обновления остатков возникла ошибка:
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, ИнформацияОбОшибке);
	ИмяСобытия = "Озон.ЗапросОбновленияОстатков";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ОбновлениеОстатковОшибкаВРезультате(ДанныеЗапроса, Данные)
	ТекстСообщения = 
		"Запрос обновления остатков:
		|%1
		|Результатом выполения запроса является ошибка:
		|%2";
	ТекстСообщения = СтрШаблон(ТекстСообщения, КоннекторHTTP.ОбъектВJson(ДанныеЗапроса, , Новый Структура("СимволыОтступа", Символы.Таб)), Данные.message);
	ИмяСобытия = "Озон.ЗапросОбновленияОстатков";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ОбновлениеОстатковДаннымиНеизвестныйИсточникДанных(ДанныеОстатков)
	ТекстСообщения = 
		"Данные остатков:
		|%1
		|Нет доступных свойств.";
	ТекстСообщения = СтрШаблон(ТекстСообщения, КоннекторHTTP.КакТекст(ДанныеОстатков));
	ИмяСобытия = "Озон.ЗапросОбновленияОстатков";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ДобавлениеЗаписиОтправкиЗапросаВыгрузкиОстатковВИсториюОбменовСМаркетамиОшибкаЗаписи(ИнформацияОбОшибке)
	ТекстСообщения = 
		"При добавлении записи отправки запроса выгрузки остатков в историю обменов с маркетами произошла ошибка:
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	ИмяСобытия = "Озон.ЗапросОбновленияОстатков";
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ПараметрыСеанса, ТекстСообщения);
КонецПроцедуры

Процедура ДобавлениеЗаписиПолученияОтветаНаЗапросВыгрузкиОстатковВИсториюОбменовСМаркетамиОшибкаЗаписи(ИнформацияОбОшибке)
	ТекстСообщения = 
		"При добавлении записи получения ответа на запрос выгрузки остатков в историю обменов с маркетами произошла ошибка:
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	ИмяСобытия = "Озон.ЗапросОбновленияОстатков";
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ПараметрыСеанса, ТекстСообщения);
КонецПроцедуры

#КонецОбласти

#Область ДанныеЦен

Процедура ОбновлениеЦенОшибкаПолученияМенеджераСТаблицейЦен(ДанныеМагазина, Номенклатура)
	ТекстСообщения = 
		"Не удалось получить менеджер с таблицей цен.
		|Магазин: %1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, ДанныеМагазина.Ссылка);
	ИмяСобытия = "Озон.ПолучениеМенеджераСТаблицейЦен";
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ПараметрыСеанса, ТекстСообщения);
КонецПроцедуры	

Процедура ОбновлениеЦенОшибкаПолученияЗапросаЦен(ДанныеМагазина, Номенклатура)
	ТекстСообщения = 
		"Не удалось получить запрос цен.
		|Магазин: %1
		|Номенклатура: %2";
	НоменклатураПредставление = ?(ЗначениеЗаполнено(Номенклатура), Номенклатура, "Не выбрана.");
	ТекстСообщения = СтрШаблон(ТекстСообщения, ДанныеМагазина.Магазин, НоменклатураПредставление);
	ИмяСобытия = "Озон.ПолучениеЗапрсаЦен";
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ПараметрыСеанса, ТекстСообщения);
КонецПроцедуры	

Процедура ОбновлениеЦенОшибкаПолученияМакетаСКД(ДанныеМагазина, Номенклатура)
	ТекстСообщения = 
		"Не удалось получить получить макет СКД для получения цен.
		|Магазин: %1
		|Номенклатура: %2";
	НоменклатураПредставление = ?(ЗначениеЗаполнено(Номенклатура), Номенклатура, "Не выбрана.");
	ТекстСообщения = СтрШаблон(ТекстСообщения, ДанныеМагазина.Магазин, НоменклатураПредставление);
	ИмяСобытия = "Озон.ПолучениеМакетаСКДЦен";
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ПараметрыСеанса, ТекстСообщения);
КонецПроцедуры

Процедура ПолучениеМенеджераСТаблицейЦенПустойРезультат(Номенклатура)
	ТекстСообщения = 
		"При получении менеждера с таблицей цен был получен пустой результат.
		|Номенклатура: %1";
	НоменклатураПредставление = ?(ЗначениеЗаполнено(Номенклатура), Номенклатура, "Не выбрана.");
	ТекстСообщения = СтрШаблон(ТекстСообщения, НоменклатураПредставление);
	ИмяСобытия = "Озон.ЗапросОбновленияЦен";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение, , , ТекстСообщения);
КонецПроцедуры 	

Процедура ОбновлениеЦенОшибкаЗапроса(ИнформацияОбОшибке)
	ТекстСообщения = 
		"Обновление цен ошибка в запросе.
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	ИмяСобытия = "Озон.ЗапросОбновленияЦен";
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ПараметрыСеанса, ТекстСообщения);
КонецПроцедуры

Процедура ОбновлениеЦенОшибкаПустойРезультатаЗапроса(ДанныеЗапроса)
	ТекстСообщения = 
		"Запроса обновления цен:
		|%1
		|Вернул пустой результат.";
	ТекстСообщения = СтрШаблон(ТекстСообщения, КоннекторHTTP.ОбъектВJson(ДанныеЗапроса, , Новый Структура("СимволыОтступа", Символы.Таб)));
	ИмяСобытия = "Озон.ЗапросОбновленияЦен";
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ОбновлениеЦенОшибкаРезультата(Результат)
	ТекстСообщения = 
		"Результат запроса обновления остатков содержит ошибку:
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, КоннекторHTTP.КакТекст(Результат));
	ИмяСобытия = "Озон.ЗапросОбновленияЦен";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ОбновлениеЦенОшибкаПолученияДанныхРезультата(ИнформацияОбОшибке)
	ТекстСообщения = 
		"При получении данных результата запроса обновления цен возникла ошибка:
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	ИмяСобытия = "Озон.ЗапросОбновленияЦен";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ОбновлениеЦенОшибкаВРезультате(ДанныеЗапроса, Данные)
	ТекстСообщения = 
		"Запрос обновления цен:
		|%1
		|Результатом выполения запроса является ошибка:
		|%2";
	ТекстСообщения = СтрШаблон(ТекстСообщения, КоннекторHTTP.ОбъектВJson(ДанныеЗапроса, , Новый Структура("СимволыОтступа", Символы.Таб)), Данные.message);
	ИмяСобытия = "Озон.ЗапросОбновленияЦен";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ОбновлениеЦенДаннымиНеизвестныйИсточникДанных(ДанныеОстатков)
	ТекстСообщения = 
		"Данные цен:
		|%1
		|Нет доступных свойств.";
	ТекстСообщения = СтрШаблон(ТекстСообщения, КоннекторHTTP.КакТекст(ДанныеОстатков));
	ИмяСобытия = "Озон.ЗапросОбновленияЦен";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ДобавлениеЗаписиОтправкиЗапросаВыгрузкиЦенВИсториюОбменовСМаркетамиОшибкаЗаписи(ИнформацияОбОшибке)
	ТекстСообщения = 
		"При добавлении записи отправки запроса выгрузки цен в историю обменов с маркетами произошла ошибка:
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	ИмяСобытия = "Озон.ЗапросОбновленияЦен";
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ПараметрыСеанса, ТекстСообщения);
КонецПроцедуры

Процедура ДобавлениеЗаписиПолученияОтветаНаЗапросВыгрузкиЦенВИсториюОбменовСМаркетамиОшибкаЗаписи(ИнформацияОбОшибке)
	ТекстСообщения = 
		"При добавлении записи получения ответа на запрос выгрузки цен в историю обменов с маркетами произошла ошибка:
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	ИмяСобытия = "Озон.ЗапросОбновленияЦен";
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ПараметрыСеанса, ТекстСообщения);
КонецПроцедуры

#КонецОбласти

#Область ДанныеТоваров

Процедура ЗаписьКодовТоваровМаркетовОшибкаПолученияЗаписи(Номенклатура, ИнформацияОбОшибке)
	ТекстСообщения =
		"При получении записи для номенклатуры ""%1""
		|произошла ошибка:
		|%2";
	ТекстСообщения = СтрШаблон(ТекстСообщения, Номенклатура, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	ИмяСобытия     = "Озон.ОбновлениеНоменклатурыКодовТоваровМаркета";
	МД = Метаданные.РегистрыСведений.мс_НоменклатураКодовТоваровМаркетов;
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, МД, , ТекстСообщения);
КонецПроцедуры

Процедура ЗаписьКодовТоваровМаркетовУжеСуществует(Номенклатура)
	ТекстСообщения = СтрШаблон("Для номенклатуры ""%1"" запись уже существует.", Номенклатура);
	ИмяСобытия     = "Озон.ОбновлениеНоменклатурыКодовТоваровМаркета";
	МД = Метаданные.РегистрыСведений.мс_НоменклатураКодовТоваровМаркетов;
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, МД, , ТекстСообщения);
КонецПроцедуры

Процедура ЗаписьКодовТоваровМаркетовОшибкаЗаписи(Номенклатура, ИнформацияОбОшибке)
	ТекстСообщения = 
		"При записи данных номенклатуры ""%1""
		|произошла ошибка:
		|%2";
	ТекстСообщения = СтрШаблон(ТекстСообщения, Номенклатура, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	ИмяСобытия     = "Озон.ОбновлениеНоменклатурыКодовТоваровМаркета";
	МД = Метаданные.РегистрыСведений.мс_НоменклатураКодовТоваровМаркетов;
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, МД, , ТекстСообщения);
КонецПроцедуры

Процедура ПолучениеСпискаТоваровОшибкаЗапроса(ИнформацияОбОшибке)
	ТекстСообщения = 
		"Получение списка товаров ошибка в запросе.
		|	%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, ИнформацияОбОшибке);
	ИмяСобытия = "Озон.ЗапросПолученияСпискаТоваров";
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ПараметрыСеанса, ТекстСообщения);
КонецПроцедуры

Процедура ПолучениеСпискаТоваровОшибкаПустойРезультатаЗапроса(ДанныеЗапроса)
	ТекстСообщения = 
		"Запроса получения списка товаров:
		|%1
		|Вернул пустой результат.";
	ТекстСообщения = СтрШаблон(ТекстСообщения, КоннекторHTTP.ОбъектВJson(ДанныеЗапроса, , Новый Структура("СимволыОтступа", Символы.Таб)));
	ИмяСобытия = "Озон.ЗапросПолученияСпискаТоваров";
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ПолучениеСпискаТоваровОшибкаПолученияДанныхРезультата(ИнформацияОбОшибке)
	ТекстСообщения = 
		"При получении данных результата запроса списка товаров возникла ошибка:
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, ИнформацияОбОшибке);
	ИмяСобытия = "Озон.ЗапросПолученияСпискаТоваров";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ПолучениеСпискаТоваровОшибкаРезультата(Результат)
	ТекстСообщения = 
		"Результат запроса получения списка товаров содержит ошибку:
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, КоннекторHTTP.КакТекст(Результат));
	ИмяСобытия = "Озон.ЗапросПолученияСпискаТоваров";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ПолучениеСпискаТоваровОшибкаВРезультате(ДанныеЗапроса, Данные)
	ТекстСообщения = 
		"Запрос получения списка товаров:
		|%1
		|Результатом выполения запроса является ошибка:
		|%2";
	ТекстСообщения = СтрШаблон(ТекстСообщения, КоннекторHTTP.ОбъектВJson(ДанныеЗапроса, , Новый Структура("СимволыОтступа", Символы.Таб)), Данные.message);
	ИмяСобытия = "Озон.ЗапросПолученияСпискаТоваров";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ПолучениеСпискаТоваровПоИдентификаторамОшибкаЗапроса(ИнформацияОбОшибке)
	ТекстСообщения = 
		"Получение списка товаров по идентификаторам ошибка в запросе.
		|	%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, ИнформацияОбОшибке);
	ИмяСобытия = "Озон.ЗапросПолученияСпискаТоваров";
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ПараметрыСеанса, ТекстСообщения);
КонецПроцедуры

Процедура ПолучениеСпискаТоваровПоИдентификаторамОшибкаПустойРезультатаЗапроса(ДанныеЗапроса)
	ТекстСообщения = 
		"Запроса получения списка товаров по идентификаторам:
		|%1
		|Вернул пустой результат.";
	ТекстСообщения = СтрШаблон(ТекстСообщения, КоннекторHTTP.ОбъектВJson(ДанныеЗапроса, , Новый Структура("СимволыОтступа", Символы.Таб)));
	ИмяСобытия = "Озон.ЗапросПолученияСпискаТоваров";
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ПолучениеСпискаТоваровПоИдентификаторамОшибкаПолученияДанныхРезультата(ИнформацияОбОшибке)
	ТекстСообщения = 
		"При получении данных результата запроса получения списка товаров по идентификаторам возникла ошибка:
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, ИнформацияОбОшибке);
	ИмяСобытия = "Озон.ЗапросПолученияСпискаТоваров";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ПолучениеСпискаТоваровПоИдентификаторамОшибкаРезультата(Результат)
	ТекстСообщения = 
		"Результат запроса получения списка товаров по идентификаторам содержит ошибку:
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, КоннекторHTTP.КакТекст(Результат));
	ИмяСобытия = "Озон.ЗапросПолученияСпискаТоваров";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ПолучениеСпискаТоваровПоИдентификаторамОшибкаВРезультате(ДанныеЗапроса, Данные)
	ТекстСообщения = 
		"Запрос получения списка товаров по идентификаторам:
		|%1
		|Результатом выполения запроса является ошибка:
		|%2";
	ТекстСообщения = СтрШаблон(ТекстСообщения, КоннекторHTTP.ОбъектВJson(ДанныеЗапроса, , Новый Структура("СимволыОтступа", Символы.Таб)), Данные.message);
	ИмяСобытия = "Озон.ЗапросПолученияСпискаТоваров";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

#КонецОбласти

#Область ДанныеЗаказов

#Область ПолучениеДанныхЗаказов

Процедура ПолучениеДанныхНеОбработанныхЗаказовОшибкаВыполенияЗапроса(ДанныеЗапроса, ИнформацияОбОшибке)
	ТекстСообщения = 
		"При выполенении запроса получения данных не обработанныхзаказов произошла ошибка:
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, ИнформацияОбОшибке);
	ИмяСобытия = "Озон.ЗапросПолученияДанныхЗаказов";
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ПараметрыСеанса, ТекстСообщения);
КонецПроцедуры

Процедура ПолучениеДанныхНеОбработанныхЗаказовОшибкаПустойРезультатаЗапроса(ДанныеЗапроса)
	//Номера = СтрСоединить(ДанныеЗапроса.shipments, ",");
	ТекстСообщения = 
		"Запрос получения данных не обработанных заказов:
		|Вернул пустой результат.";
	ТекстСообщения = СтрШаблон(ТекстСообщения);
	ИмяСобытия = "Озон.ЗапросПолученияДанныхЗаказов";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение, , , ТекстСообщения);
КонецПроцедуры

Процедура ПолучениеДанныхНеОбработанныхЗаказовОшибкаРезультата(ДанныеЗапроса, Результат)
	ТекстСообщения = 
		"Результат запроса получения не обработанных заказов:
		|Содержит ошибку:
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, КоннекторHTTP.КакТекст(Результат));
	ИмяСобытия = "Озон.ЗапросПолученияНеОбработанныхЗаказов";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение, , , ТекстСообщения);
КонецПроцедуры

Процедура ПолучениеДанныхНеОбработанныхЗаказовОшибкаПолученияДанныхРезультата(ДанныеЗапроса, Результат, ИнформацияОбОшибке)
	Номера = СтрСоединить(ДанныеЗапроса.shipments, ",");
	ТекстСообщения = 
		"Запрос получения данных не обработанных заказов:
		|При получении данных результата:
		|%1
		|Возникла ошибка:
		|%2";
	ТекстСообщения = СтрШаблон(ТекстСообщения, КоннекторHTTP.КакТекст(Результат), ИнформацияОбОшибке);
	ИмяСобытия = "Озон.ЗапросПолученияДанныхЗаказов";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение, , , ТекстСообщения);
КонецПроцедуры

Процедура ПолучениеДанныхНеобработанныхЗаказовОшибкаВРезультате(ДанныеЗапроса, Данные)
	ТекстСообщения = 
		"Запрос получения данных необработанных заказов:
		|%1
		|Результатом выполения запроса является ошибка:
		|%2";
	ТекстСообщения = СтрШаблон(ТекстСообщения, КоннекторHTTP.ОбъектВJson(ДанныеЗапроса, , Новый Структура("СимволыОтступа", Символы.Таб)), Данные.message);
	ИмяСобытия = "Озон.ЗапросПолученияДанныхЗаказов";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ПолучениеИдЗаказовПустойРезультатЗапроса(Запрос)
	ДанныеЗапроса = ОбщегоНазначения.ЗапросВСтрокуXML(Запрос);
	ТекстСообщения = 
		"Запрос получения ИД заказов:
		|Данные запроса:
		|%1
		|Вернул пустой результат.";
	ТекстСообщения = СтрШаблон(ТекстСообщения, ДанныеЗапроса);
	ИмяСобытия = "Озон.ЗапросПолученияДанныхЗаказов";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение, , , ТекстСообщения);
КонецПроцедуры	

Процедура ПолучениеСоставаЗаказовПустойРезультат(ДанныеЗаказов)
	ТекстСообщения = 
		"Алгоритм получения состава заказов верунул пустой результат.";
	ИмяСобытия = "Озон.ПолучениеСоставаЗаказов";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение, , , ТекстСообщения);
КонецПроцедуры	

Процедура ПолучениеСпискаМаркируемыхТоваровЗаказаОшибкаЗапроса(ИнформацияОбОшибке)
	ТекстСообщения = 
		"Получение списка товаров ошибка в запросе.
		|	%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	ИмяСобытия = "Озон.ЗапросПолученияСпискаТоваров";
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ПараметрыСеанса, ТекстСообщения);
КонецПроцедуры

Процедура ПолучениеСпискаМаркируемыхТоваровЗаказаОшибкаПустойРезультатаЗапроса(ДанныеЗапроса)
	ТекстСообщения = 
		"Запроса получения списка товаров:
		|%1
		|Вернул пустой результат.";
	ТекстСообщения = СтрШаблон(ТекстСообщения, КоннекторHTTP.ОбъектВJson(ДанныеЗапроса, , Новый Структура("СимволыОтступа", Символы.Таб)));
	ИмяСобытия = "Озон.ЗапросПолученияСпискаТоваров";
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ПолучениеСпискаМаркируемыхТоваровЗаказаОшибкаПолученияДанныхРезультата(ИнформацияОбОшибке)
	ТекстСообщения = 
		"При получении данных результата запроса списка товаров возникла ошибка:
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, ИнформацияОбОшибке);
	ИмяСобытия = "Озон.ЗапросПолученияСпискаТоваров";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ПолучениеСпискаМаркируемыхТоваровЗаказаОшибкаРезультата(Результат)
	ТекстСообщения = 
		"Результат запроса получения списка маркируемых товаров содержит ошибку:
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, КоннекторHTTP.КакТекст(Результат));
	ИмяСобытия = "Озон.ЗапросПолученияСпискаТоваров";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ПолучениеСпискаМаркируемыхТоваровЗаказаОшибкаВРезультате(ДанныеЗапроса, Данные)
	ТекстСообщения = 
		"Запрос получения списка маркируемых товаров:
		|%1
		|Результатом выполения запроса является ошибка:
		|%2";
	ТекстСообщения = СтрШаблон(ТекстСообщения, КоннекторHTTP.ОбъектВJson(ДанныеЗапроса, , Новый Структура("СимволыОтступа", Символы.Таб)), Данные.message);
	ИмяСобытия = "Озон.ЗапросПолученияСпискаТоваров";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ПолучениеСпискаМаркируемыхТоваровЗаказаНетДанных()
	ТекстСообщения = "Результат запроса получения списка маркируемых товаров не содержит данных";
	ИмяСобытия = "Озон.ЗапросПолученияСпискаТоваров";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ПолучениеИдентификаторовУпаковокНетДанных()
	ТекстСообщения = "Результат запроса получения идентификаторов упаковок не содержит данных";
	ИмяСобытия = "Озон.ЗапросПолученияИдентификаторовУпаковок";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ПолучениеДанныхМаркируемыхТоваровЗаказаОшибкаЗапроса(ИнформацияОбОшибке)
	ТекстСообщения = 
		"Получение данных товаров ошибка в запросе.
		|	%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	ИмяСобытия = "Озон.ЗапросПолученияСпискаТоваров";
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ПараметрыСеанса, ТекстСообщения);
КонецПроцедуры

Процедура ПолучениеДанныхМаркируемыхТоваровЗаказаОшибкаПустойРезультатаЗапроса(ДанныеЗапроса)
	ТекстСообщения = 
		"Запроса получения данных товаров:
		|%1
		|Вернул пустой результат.";
	ТекстСообщения = СтрШаблон(ТекстСообщения, КоннекторHTTP.ОбъектВJson(ДанныеЗапроса, , Новый Структура("СимволыОтступа", Символы.Таб)));
	ИмяСобытия = "Озон.ЗапросПолученияСпискаТоваров";
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ПолучениеДанныхМаркируемыхТоваровЗаказаОшибкаПолученияДанныхРезультата(ИнформацияОбОшибке)
	ТекстСообщения = 
		"При получении данных результата запроса данных товаров возникла ошибка:
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, ИнформацияОбОшибке);
	ИмяСобытия = "Озон.ЗапросПолученияСпискаТоваров";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ПолучениеДанныхМаркируемыхТоваровЗаказаОшибкаРезультата(Результат)
	ТекстСообщения = 
		"Результат запроса получения данных товаров содержит ошибку:
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, КоннекторHTTP.КакТекст(Результат));
	ИмяСобытия = "Озон.ЗапросПолученияСпискаТоваров";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ПолучениеДанныхМаркируемыхТоваровЗаказаОшибкаВРезультате(ДанныеЗапроса, Данные)
	ТекстСообщения = 
		"Запрос получения данных товаров:
		|%1
		|Результатом выполения запроса является ошибка:
		|%2";
	ТекстСообщения = СтрШаблон(ТекстСообщения, КоннекторHTTP.ОбъектВJson(ДанныеЗапроса, , Новый Структура("СимволыОтступа", Символы.Таб)), Данные.message);
	ИмяСобытия = "Озон.ЗапросПолученияСпискаТоваров";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ДобавлениеЗаписиОтправкиЗапросаПолученияДанныхНеобработанныхЗаказовВИсториюОбменовСМаркетамиОшибкаЗаписи(ИнформацияОбОшибке)
	ТекстСообщения = 
		"При добавлении записи отправки запроса получения данных необработанных заказов в историю обменов с маркетами произошла ошибка:
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	ИмяСобытия = "Озон.ЗапросПолученияДанныхЗаказов";
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ПараметрыСеанса, ТекстСообщения);
КонецПроцедуры

Процедура ДобавлениеЗаписиПолученияОтветаНаЗапросПолученияДанныхНеобработанныхЗаказовВИсториюОбменовСМаркетамиОшибкаЗаписи(ИнформацияОбОшибке)
	ТекстСообщения = 
		"При добавлении записи получения ответа на запрос получения данных необработанных заказов в историю обменов с маркетами произошла ошибка:
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	ИмяСобытия = "Озон.ЗапросПолученияДанныхЗаказов";
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ПараметрыСеанса, ТекстСообщения);
КонецПроцедуры

#КонецОбласти

#Область ПодтверждениеЗаказов

Процедура ПодтверждениеКомплектацииЗаказаОшибкаВыполненияЗапроса(Заказ, ИнформацияОбОшибке)
	ТекстСообщения = 
		"При выполении запроса подтверждения заказа произошла ошибка:
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, ИнформацияОбОшибке);
	ИмяСобытия = "Озон.ЗапросПодтвержденияЗаказа";
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ПараметрыСеанса, ТекстСообщения);
КонецПроцедуры

Процедура ПодтверждениеКомплектацииЗаказаОшибкаПустойРезультатаЗапроса(ДанныеЗапроса)
	ТекстСообщения = 
		"Запрос подтверждения комплектации заказа вернул пустой результат.";
	ТекстСообщения = СтрШаблон(ТекстСообщения);
	ИмяСобытия = "Озон.ЗапросПодтвержденияКомплектацииЗаказа";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ПодтверждениеКомплектацииЗаказаОшибкаПолученияДанныхРезультата(ДанныеЗапроса, Результат, ИнформацияОбОшибке)
	ТекстСообщения = 
		"При получении данных запроса подтверждения комплектации заказа произошла ошибка:
		|%1
		|Результат:
		|%2";
	ТекстСообщения = СтрШаблон(ТекстСообщения, ИнформацияОбОшибке, КоннекторHTTP.КакТекст(Результат));
	ИмяСобытия = "Озон.ЗапросПодтвержденияКомплектацииЗаказа";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ПодтверждениеКомплектацииЗаказаОшибкаРезультата(ДанныеЗапроса, Результат)
	ТекстСообщения = 
		"Результат запроса подтверждения заказа содержит ошибку:
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, КоннекторHTTP.КакТекст(Результат));
	ИмяСобытия = "Озон.ЗапросПодтвержденияКомплектацииЗаказа";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ДобавлениеЗаписиОтправкиЗапросаПодтвержденияКомплектацииЗаказаВИсториюОбменовСМаркетамиОшибкаЗаписи(ИнформацияОбОшибке)
	ТекстСообщения = 
		"При добавлении записи отправки запроса подтверждения комплектации заказа в историю обменов с маркетами произошла ошибка:
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	ИмяСобытия = "Озон.ЗапросПодтвержденияКомплектацииЗаказа";
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ПараметрыСеанса, ТекстСообщения);
КонецПроцедуры

Процедура ДобавлениеЗаписиПолученияОтветаНаЗапросПодтвержденияКомплектацииЗаказаВИсториюОбменовСМаркетамиОшибкаЗаписи(ИнформацияОбОшибке)
	ТекстСообщения = 
		"При добавлении записи получения ответа на запрос подтверждения комплектации заказа в историю обменов с маркетами произошла ошибка:
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	ИмяСобытия = "Озон.ЗапросПодтвержденияКомплектацииЗаказа";
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ПараметрыСеанса, ТекстСообщения);
КонецПроцедуры

#КонецОбласти

#Область ПечатьЭтикетки

Процедура ПолучениеЭтикеткиОшибкаВыполненияЗапроса(Заказ, ИнформацияОбОшибке)
	ТекстСообщения = 
		"При выполении запроса получения этикетки произошла ошибка:
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, ИнформацияОбОшибке);
	ИмяСобытия = "Озон.ЗапросПолученияЭтикетки";
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ПараметрыСеанса, ТекстСообщения);
КонецПроцедуры

Процедура ПолучениеЭтикеткиОшибкаПустойРезультатаЗапроса(ДанныеЗапроса)
	ТекстСообщения = 
		"Запрос получения этикетки вернул пустой результат.";
	ТекстСообщения = СтрШаблон(ТекстСообщения);
	ИмяСобытия = "Озон.ЗапросПолученияЭтикетки";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ПолучениеЭтикеткиОшибкаПолученияДанныхРезультата(ДанныеЗапроса, Результат, ИнформацияОбОшибке)
	ТекстСообщения = 
		"При получении данных запроса получения этикетки произошла ошибка:
		|%1
		|Результат:
		|%2";
	ТекстСообщения = СтрШаблон(ТекстСообщения, ИнформацияОбОшибке, КоннекторHTTP.КакТекст(Результат));
	ИмяСобытия = "Озон.ЗапросПолученияЭтикетки";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ПолучениеЭтикеткиОшибкаРезультата(ДанныеЗапроса, Результат)
	ТекстСообщения = 
		"Результат запроса получения этикетки содержит ошибку:
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, КоннекторHTTP.КакТекст(Результат));
	ИмяСобытия = "Озон.ЗапросПолученияЭтикетки";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ДобавлениеЗаписиОтправкиЗапросаПолученияЭтикеткиВИсториюОбменовСМаркетамиОшибкаЗаписи(ИнформацияОбОшибке)
	ТекстСообщения = 
		"При добавлении записи отправки запроса получения этикетки в историю обменов с маркетами произошла ошибка:
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	ИмяСобытия = "Озон.ЗапросПолученияЭтикетки";
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ПараметрыСеанса, ТекстСообщения);
КонецПроцедуры

Процедура ДобавлениеЗаписиПолученияОтветаНаЗапросПолученияЭтикеткиВИсториюОбменовСМаркетамиОшибкаЗаписи(ИнформацияОбОшибке)
	ТекстСообщения = 
		"При добавлении записи получения ответа на запрос получения этикетки в историю обменов с маркетами произошла ошибка:
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	ИмяСобытия = "Озон.ЗапросПолученияЭтикетки";
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ПараметрыСеанса, ТекстСообщения);
КонецПроцедуры

#КонецОбласти

#Область ПередачаДанныхМаркировкиЗаказов

Процедура ПередачаДанныхМаркировкиЗаказаОшибкаВыполненияЗапроса(Заказ, ИнформацияОбОшибке)
	ТекстСообщения = 
		"При выполении запроса передачи данных маркировки заказа произошла ошибка:
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	ИмяСобытия = "Озон.ЗапросПередачаДанныхМаркировкиЗаказа";
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ПараметрыСеанса, ТекстСообщения);
КонецПроцедуры

Процедура ПередачаДанныхМаркировкиЗаказаОшибкаПустойРезультатаЗапроса(ДанныеЗапроса)
	ТекстСообщения = 
		"Запрос передачи данных маркировки заказа вернул пустой результат.";
	ТекстСообщения = СтрШаблон(ТекстСообщения);
	ИмяСобытия = "Озон.ЗапросПередачаДанныхМаркировкиЗаказа";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ПередачаДанныхМаркировкиЗаказаОшибкаПолученияДанныхРезультата(ДанныеЗапроса, Результат, ИнформацияОбОшибке)
	ТекстСообщения = 
		"При получении данных запроса передачи данных маркировки заказа произошла ошибка:
		|%1
		|Результат:
		|%2";
	ТекстСообщения = СтрШаблон(ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке), КоннекторHTTP.КакТекст(Результат));
	ИмяСобытия = "Озон.ЗапросПередачаДанныхМаркировкиЗаказа";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ПередачаДанныхМаркировкиЗаказаОшибкаРезультата(ДанныеЗапроса, Результат)
	ТекстСообщения = 
		"Результат запроса передачи данных маркировки заказа содержит ошибку:
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, КоннекторHTTP.КакТекст(Результат));
	ИмяСобытия = "Озон.ЗапросПередачаДанныхМаркировкиЗаказа";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ПередачаДанныхМаркировкиЗаказаОшибкаВРезультате(ДанныеЗапроса, Данные)
	ТекстСообщения = 
		"Запрос передачи данных маркировки заказа:
		|%1
		|Результатом выполения запроса является ошибка:
		|%2";
	ТекстСообщения = СтрШаблон(ТекстСообщения, КоннекторHTTP.ОбъектВJson(ДанныеЗапроса, , Новый Структура("СимволыОтступа", Символы.Таб)), Данные.message);
	ИмяСобытия = "Озон.ЗапросПередачаДанныхМаркировкиЗаказа";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ПередачаДанныхМаркировкиЗаказаПолученОтрицательныйРезультат()
	ТекстСообщения = "Запрос передачи данных маркировки заказа вернул отрицательный результат.";
	ИмяСобытия = "Озон.ЗапросПередачаДанныхМаркировкиЗаказа";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

#КонецОбласти

#Область ПередачаДанныхМаркировкиЗаказов

Процедура ПолучениеСтатусаПередачиДанныхМаркировкиЗаказаОшибкаВыполненияЗапроса(Заказ, ИнформацияОбОшибке)
	ТекстСообщения = 
		"При выполении запроса получения статуса передачи данных маркировки заказа произошла ошибка:
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	ИмяСобытия = "Озон.ЗапросПолученияСтатусаПередачаДанныхМаркировкиЗаказа";
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ПараметрыСеанса, ТекстСообщения);
КонецПроцедуры

Процедура ПолучениеСтатусаПередачиДанныхМаркировкиЗаказаОшибкаПустойРезультатаЗапроса(ДанныеЗапроса)
	ТекстСообщения = 
		"Запрос получения статуса передачи данных маркировки заказа вернул пустой результат.";
	ТекстСообщения = СтрШаблон(ТекстСообщения);
	ИмяСобытия = "Озон.ЗапросПолученияСтатусаПередачаДанныхМаркировкиЗаказа";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ПолучениеСтатусаПередачиДанныхМаркировкиЗаказаОшибкаПолученияДанныхРезультата(ДанныеЗапроса, Результат, ИнформацияОбОшибке)
	ТекстСообщения = 
		"При получении данных запроса получения статуса передачи данных маркировки заказа произошла ошибка:
		|%1
		|Результат:
		|%2";
	ТекстСообщения = СтрШаблон(ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке), КоннекторHTTP.КакТекст(Результат));
	ИмяСобытия = "Озон.ЗапросПолученияСтатусаПередачаДанныхМаркировкиЗаказа";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ПолучениеСтатусаПередачиДанныхМаркировкиЗаказаОшибкаРезультата(ДанныеЗапроса, Результат)
	ТекстСообщения = 
		"Результат запроса получения статуса передачи данных маркировки заказа содержит ошибку:
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, КоннекторHTTP.КакТекст(Результат));
	ИмяСобытия = "Озон.ЗапросПолученияСтатусаПередачаДанныхМаркировкиЗаказа";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ПолучениеСтатусаПередачиДанныхМаркировкиЗаказаОшибкаВРезультате(ДанныеЗапроса, Данные)
	ТекстСообщения = 
		"Запрос получения статуса передачи данных маркировки заказа:
		|%1
		|Результатом выполения запроса является ошибка:
		|%2";
	ТекстСообщения = СтрШаблон(ТекстСообщения, КоннекторHTTP.ОбъектВJson(ДанныеЗапроса, , Новый Структура("СимволыОтступа", Символы.Таб)), Данные.message);
	ИмяСобытия = "Озон.ЗапросПолученияСтатусаПередачаДанныхМаркировкиЗаказа";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ПолучениеСтатусаПередачиДанныхМаркировкиЗаказаПолученОтрицательныйРезультат()
	ТекстСообщения = "Запрос получения статуса передачи данных маркировки заказа вернул отрицательный результат.";
	ИмяСобытия = "Озон.ЗапросПолученияСтатусаПередачаДанныхМаркировкиЗаказа";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

#КонецОбласти

#Область ПолучениеДереваКатегорий

Процедура ПолучениеДереваКатегорийОшибкаВыполненияЗапроса(Заказ, ИнформацияОбОшибке)
	ТекстСообщения = 
		"При выполении запроса получения дерева категорий произошла ошибка:
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	ИмяСобытия = "Озон.ЗапросПолученияДереваКатегорий";
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ПараметрыСеанса, ТекстСообщения);
КонецПроцедуры

Процедура ПолучениеДереваКатегорийОшибкаПустойРезультатаЗапроса(ДанныеЗапроса)
	ТекстСообщения = 
		"Запрос получения дерева категорий вернул пустой результат.";
	ТекстСообщения = СтрШаблон(ТекстСообщения);
	ИмяСобытия = "Озон.ЗапросПолученияДереваКатегорий";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ПолучениеДереваКатегорийОшибкаПолученияДанныхРезультата(ДанныеЗапроса, Результат, ИнформацияОбОшибке)
	ТекстСообщения = 
		"При получении данных запроса получения дерева категорий произошла ошибка:
		|%1
		|Результат:
		|%2";
	ТекстСообщения = СтрШаблон(ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке), КоннекторHTTP.КакТекст(Результат));
	ИмяСобытия = "Озон.ЗапросПолученияДереваКатегорий";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ПолучениеДереваКатегорийОшибкаРезультата(ДанныеЗапроса, Результат)
	ТекстСообщения = 
		"Результат запроса получения дерева категорий содержит ошибку:
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, КоннекторHTTP.КакТекст(Результат));
	ИмяСобытия = "Озон.ЗапросПолученияДереваКатегорий";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

#КонецОбласти

#Область ПолучениеСтатусаЗаказа
 
Процедура ПолучениеСтатусаЗаказаОшибкаВыполненияЗапроса(ИнформацияОбОшибке)
	ТекстСообщения = 
		"При выполении запроса получения статуса Ззказа произошла ошибка:
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, ИнформацияОбОшибке);
	ИмяСобытия = "Озон.ПолученияСтатусаЗаказа";
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ПараметрыСеанса, ТекстСообщения);
КонецПроцедуры

Процедура ПолучениеСтатусаЗаказаОшибкаПустойРезультатаЗапроса(ДанныеЗапроса)
	ТекстСообщения = 
		"Запроа получения статуса Ззказа:
		|%1
		|Вернул пустой результат.";
	ТекстСообщения = СтрШаблон(ТекстСообщения, КоннекторHTTP.ОбъектВJson(ДанныеЗапроса, , Новый Структура("СимволыОтступа", Символы.Таб)));
	ИмяСобытия = "Озон.ЗапросИмяЗапросаРодПадеж";
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ПолучениеСтатусаЗаказаОшибкаРезультата(Результат)
	ТекстСообщения = 
		"Результат запроса получения статуса Ззказа содержит ошибку:
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, КоннекторHTTP.КакТекст(Результат));
	ИмяСобытия = "Озон.ЗапросИмяЗапросаРодПадеж";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ПолучениеСтатусаЗаказаОшибкаПолученияДанныхРезультата(ИнформацияОбОшибке)
	ТекстСообщения = 
		"При получении данных результата запроса получения статуса Ззказа возникла ошибка:
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, ИнформацияОбОшибке);
	ИмяСобытия = "Озон.ЗапросИмяЗапросаРодПадеж";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ПолучениеСтатусаЗаказаОшибкаВРезультате(ДанныеЗапроса, Данные)
	ТекстСообщения = 
		"Запрос получения статуса Ззказа:
		|%1
		|Результатом выполения запроса является ошибка:
		|%2";
	ТекстСообщения = СтрШаблон(ТекстСообщения, КоннекторHTTP.ОбъектВJson(ДанныеЗапроса, , Новый Структура("СимволыОтступа", Символы.Таб)), Данные.message);
	ИмяСобытия = "Озон.ЗапросИмяЗапросаРодПадеж";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

#КонецОбласти

#Область ИмяЗапроса_ИмПадеж
 
Процедура ИмяЗапросаИмПадеж_ОшибкаВыполненияЗапроса(ИнформацияОбОшибке)
	ТекстСообщения = 
		"При выполении запроса ИмяЗапросаРаздельноРодПадеж произошла ошибка:
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, ИнформацияОбОшибке);
	ИмяСобытия = "Озон.ЗапросИмяЗапросаРодПадеж_";
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ПараметрыСеанса, ТекстСообщения);
КонецПроцедуры

Процедура ИмяЗапросаИмПадеж_ОшибкаПустойРезультатаЗапроса(ДанныеЗапроса)
	ТекстСообщения = 
		"Запроа ИмяЗапросаРаздельноРодПадеж:
		|%1
		|Вернул пустой результат.";
	ТекстСообщения = СтрШаблон(ТекстСообщения, КоннекторHTTP.ОбъектВJson(ДанныеЗапроса, , Новый Структура("СимволыОтступа", Символы.Таб)));
	ИмяСобытия = "Озон.ЗапросИмяЗапросаРодПадеж";
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ИмяЗапросаИмПадеж_ОшибкаРезультата(Результат)
	ТекстСообщения = 
		"Результат запроса ИмяЗапросаРаздельноРодПадеж содержит ошибку:
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, КоннекторHTTP.КакТекст(Результат));
	ИмяСобытия = "Озон.ЗапросИмяЗапросаРодПадеж";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ИмяЗапросаИмПадеж_ОшибкаПолученияДанныхРезультата(ИнформацияОбОшибке)
	ТекстСообщения = 
		"При получении данных результата запроса ИмяЗапросаРаздельноРодПадеж возникла ошибка:
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, ИнформацияОбОшибке);
	ИмяСобытия = "Озон.ЗапросИмяЗапросаРодПадеж";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ИмяЗапросаИмПадеж_ОшибкаВРезультате(ДанныеЗапроса, Данные)
	ТекстСообщения = 
		"Запрос ИмяЗапросаРаздельноРодПадеж:
		|%1
		|Результатом выполения запроса является ошибка:
		|%2";
	ТекстСообщения = СтрШаблон(ТекстСообщения, КоннекторHTTP.ОбъектВJson(ДанныеЗапроса, , Новый Структура("СимволыОтступа", Символы.Таб)), Данные.message);
	ИмяСобытия = "Озон.ЗапросИмяЗапросаРодПадеж";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

#КонецОбласти

#Область ЗаписьЗаказа

Процедура ЗаписьЗаказаЗаказЗаписанИПроведен(ЗаказОбъект)
	ТекстСообщения = 
		"Заказ записан и проведен:
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, ЗаказОбъект.Ссылка);
	ИмяСобытия = "Озон.СозданиеЗаказа";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , , ТекстСообщения);
КонецПроцедуры

Процедура ЗаписьЗаказаЗаказЗаписан(ЗаказОбъект)
	ТекстСообщения = 
		"Заказ записан:
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, ЗаказОбъект.Ссылка);
	ИмяСобытия = "Озон.СозданиеЗаказа";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , , ТекстСообщения);
КонецПроцедуры

Процедура ОбработкаДанныхЗаказовЗаказУжеСоздан(ДанныеЗаказа)
	ТекстСообщения = 
		"Заказ уже создан:
		|ИД заказ: %1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, ДанныеЗаказа[ИмяКолонкиИдЗаказа()]);
	ИмяСобытия = "Озон.СозданиеЗаказа";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение, , , ТекстСообщения);
КонецПроцедуры

Процедура ОбработкаДанныхЗаказовПустойСоставЗаказа(ДанныеЗаказа)
	ТекстСообщения = 
		"Получен пустой состав заказа:
		|ИД заказ: %1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, ДанныеЗаказа.ИдЗаказа);
	ИмяСобытия = "Озон.СозданиеЗаказа";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение, , , ТекстСообщения);
КонецПроцедуры

Процедура ПроведениеЗаказаОшибкаЗаписи(ИнформацияОбОшибке)
	ТекстСообщения = 
		"При проведении заказа возникла ошибка:
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	ИмяСобытия = "Озон.СозданиеЗаказа";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение, , , ТекстСообщения);
КонецПроцедуры

Процедура СозданиеЗаказаОшибкаЗаписи(ИнформацияОбОшибке)
	ТекстСообщения = 
		"При записи заказа возникла ошибка:
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	ИмяСобытия = "Озон.СозданиеЗаказа";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ЧтениеШКЗаказаШКУжеСоздан(Заказ, ШК)
	ТекстСообщения = 
		"ШК для заказа уже создан:
		|Заказ: %1
		|ШК: %2";
	ТекстСообщения = СтрШаблон(ТекстСообщения, Заказ, ШК);
	ИмяСобытия = "Озон.ЗаписьШК";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение, , , ТекстСообщения);
КонецПроцедуры

Процедура ЧтениеШКЗаказаОшибкаЧтения(Заказ, ШК, ИнформацияОбОшибке)
	ТекстСообщения = 
		"При чтении данных ШК заказа возникла ошибка:
		|Заказ: %1
		|ШК: %2
		|%3";
	ТекстСообщения = СтрШаблон(ТекстСообщения, Заказ, ШК, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	ИмяСобытия = "Озон.СозданиеЗаказа";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ЗаписьШКЗаказаОшибкаЗаписи(Заказ, ШК, ИнформацияОбОшибке)
	ТекстСообщения = 
		"При записи данных ШК заказа возникла ошибка:
		|Заказ: %1
		|ШК: %2
		|%3";
	ТекстСообщения = СтрШаблон(ТекстСообщения, Заказ, ШК, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	ИмяСобытия = "Озон.СозданиеЗаказа";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура СозданиеНапоминанияПроЗаказФБСОшибкаЗаписи(Пользователь, Заказ, ОписаниеОшибки)
	ТекстСообщения = 
		"При записи напоминания про заказ ФБС возникла ошибка:
		|Заказ: %1
		|Пользователь: %2
		|%3";
	ТекстСообщения = СтрШаблон(ТекстСообщения, Заказ, Пользователь, ОписаниеОшибки);
	ИмяСобытия = "Озон.СозданиеЗаказа";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ЗаписьЛогов

Процедура ОбновлениеОстатковЗаписьЛога(ИнформацияОбОшибке)
	ТекстСообщения = 
		"При записи лога обновления остатоков возникла ошибка:
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	ИмяСобытия = "Озон.ЗаписьЛогаОбновленияОстатоков";
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ПараметрыСеанса, ТекстСообщения);
КонецПроцедуры

#КонецОбласти

#Область ОбработкаДанных
#КонецОбласти

#Область Акции

Процедура АкцииОшибкаВыполненияЗапроса(ИнформацияОбОшибке)
	ТекстСообщения = 
		"При выполении запроса получения списка акций произошла ошибка:
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	ИмяСобытия = "Озон.ЗапросАкции";
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ПараметрыСеанса, ТекстСообщения);
КонецПроцедуры

Процедура АкцииОшибкаПустойРезультатаЗапроса()
	ТекстСообщения = 
		"Запрос получения списка акций вернул пустой результат.";
	ТекстСообщения = СтрШаблон(ТекстСообщения);
	ИмяСобытия = "Озон.ЗапросАкции";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура АкцииОшибкаПолученияДанныхРезультата(Результат, ИнформацияОбОшибке)
	ТекстСообщения = 
		"При получении данных запроса получения списка акций произошла ошибка:
		|%1
		|Результат:
		|%2";
	ТекстСообщения = СтрШаблон(ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке), КоннекторHTTP.КакТекст(Результат, КодировкаТекста.UTF8));
	ИмяСобытия = "Озон.ЗапросАкции";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура АкцииОшибкаРезультата(Результат)
	ТекстСообщения = 
		"Результат запроса получения списка акций содержит ошибку:
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, КоннекторHTTP.КакТекст(Результат));
	ИмяСобытия = "Озон.ЗапросАкции";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура АкцииОшибкаВРезультате(Данные)
	ТекстСообщения = 
		"Результатом выполения запроса получения списка акций является ошибка:
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, Данные.message);
	ИмяСобытия = "Озон.ЗапросАкции";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

#КонецОбласти

#Область ДанныеЦен

Процедура ПолучениеЦенТоваровОшибкаЗапроса(ИнформацияОбОшибке)
	ТекстСообщения = 
		"Получение цен товаров ошибка в запросе.
		|	%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	ИмяСобытия = "Озон.ЗапросПолученияЦенТоваров";
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ПараметрыСеанса, ТекстСообщения);
КонецПроцедуры

Процедура ПолучениеЦенТоваровОшибкаПустойРезультатаЗапроса(ДанныеЗапроса)
	ТекстСообщения = 
		"Запрос получения цен товаров:
		|%1
		|Вернул пустой результат.";
	ТекстСообщения = СтрШаблон(ТекстСообщения, КоннекторHTTP.ОбъектВJson(ДанныеЗапроса, , Новый Структура("СимволыОтступа", Символы.Таб)));
	ИмяСобытия = "Озон.ЗапросПолученияЦенТоваров";
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ПолучениеЦенТоваровОшибкаПолученияДанныхРезультата(ИнформацияОбОшибке)
	ТекстСообщения = 
		"При получении данных результата запроса цен товаров возникла ошибка:
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	ИмяСобытия = "Озон.ЗапросПолученияЦенТоваров";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ПолучениеЦенТоваровОшибкаРезультата(Результат)
	ТекстСообщения = 
		"Результат запроса получения цен товаров содержит ошибку:
		|%1";
	ТекстСообщения = СтрШаблон(ТекстСообщения, КоннекторHTTP.КакТекст(Результат));
	ИмяСобытия = "Озон.ЗапросПолученияЦенТоваров";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

Процедура ПолучениеЦенТоваровОшибкаВРезультате(ДанныеЗапроса, Данные)
	ТекстСообщения = 
		"Результатом выполения запроса получения цен товаров:
		|%1
		|является ошибка:
		|%2";
	ТекстСообщения = СтрШаблон(ТекстСообщения, КоннекторHTTP.ОбъектВJson(ДанныеЗапроса, , Новый Структура("СимволыОтступа", Символы.Таб)), Данные.message);
	ИмяСобытия = "Озон.ЗапросПолученияЦенТоваров";
	ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область HTTPЗапросы

#Область ДанныеСессии

Функция ПолучитьСессию(ДанныеМагазина) Экспорт
	Сессия = КоннекторHTTP.СоздатьСессию();
	ЗаголовкиСессии = ПолучитьЗаголовки(ДанныеМагазина);
	ЗаполнитьЗаголовкиСессии(Сессия, ЗаголовкиСессии);
	
	Возврат Сессия;
КонецФункции

Функция ПолучитьЗаголовки(ДанныеМагазина)
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Client-Id", ДанныеМагазина.Идентификатор);
	Заголовки.Вставить("Api-Key",   ДанныеМагазина.Токен);
	
	Возврат Заголовки;
КонецФункции

Процедура ЗаполнитьЗаголовкиСессии(Сессия, Заголовки)
	Для Каждого ТекЗаголовок Из Заголовки Цикл
		Если Сессия.Заголовки[ТекЗаголовок.Ключ] <> Неопределено Тогда
			Если Заголовки[ТекЗаголовок.Ключ] <> ТекЗаголовок.Значение Тогда
				Заголовки[ТекЗаголовок.Ключ] = ТекЗаголовок.Значение;
			КонецЕсли;
		Иначе
			Сессия.Заголовки.Вставить(ТекЗаголовок.Ключ, ТекЗаголовок.Значение)
		КонецЕсли;
	КонецЦикла;
Конецпроцедуры

#КонецОбласти

#Область ПараметрыЗапросов

Функция ПолучитьПараметрыЗапросаОбновленияОстатков(ДанныеМагазина, ВыборкаПорции)
	ЗаполнятьДанныеОстатков = Истина;
	Остатки = Новый Массив;
	ОстаткиНоменклатуры = Новый Соответствие;
	ВыборкаПорция = ВыборкаПорции.Выбрать();
	Пока ВыборкаПорция.Следующий() Цикл
		Остаток = Новый Структура("offer_id, stock");
		Остаток.Вставить("offer_id",	 СокрЛП(ВыборкаПорция.Код));
		Остаток.Вставить("stock",		 ВыборкаПорция.Остаток);
		Остаток.Вставить("warehouse_id", ДанныеМагазина.ИдСклада);
		Остатки.Добавить(Остаток);
		Если ЗаполнятьДанныеОстатков Тогда
			ОстаткиНоменклатуры.Вставить(Остаток.offer_id, Новый Структура("Номенклатура, Остаток", ВыборкаПорция.Номенклатура, Остаток.stock));
		КонецЕсли;
	КонецЦикла;
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("stocks",	Остатки);
	ВставитьДанныеОстатков = Истина;
	Если ВставитьДанныеОстатков Тогда
		ПараметрыЗапроса.Вставить("ОстаткиНоменклатуры", ОстаткиНоменклатуры);
	КонецЕсли;
	
	Возврат ПараметрыЗапроса;
КонецФункции

Функция ПолучитьПараметрыЗапросаОбновленияЦен(ДанныеМагазина, ВыборкаПорции)
	Скидка = мс_РаботаСОзонПовтИсп.ПолучитьСкидкуОзон_ДБС();
	Цены = Новый Массив;
	ВыборкаПорция = ВыборкаПорции.Выбрать();
	Пока ВыборкаПорция.Следующий() Цикл
		Цена = Новый Структура("auto_action_enabled, min_price, old_price, offer_id, price");
		Цена.auto_action_enabled = ДанныеМагазина.АвтоПрименениеАкций;
		Цена.min_price = Формат(ВыборкаПорция.Цена * (1 - Скидка / 100), "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
		Цена.offer_id  = СокрЛП(ВыборкаПорция.Код);
		Цена.old_price = Формат(0, "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
		Цена.price     = Формат(ВыборкаПорция.Цена, "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
		Цены.Добавить(Цена);
	КонецЦикла;
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("prices", Цены);
	
	Возврат ПараметрыЗапроса;
КонецФункции

Функция ПараметрыЗапросаПолученияСпискаТоваров()
	Фильтр           = Новый Структура("visibility", "ALL");
	ПараметрыЗапроса = Новый Структура("filter, last_id", Фильтр, "");
	
	Возврат ПараметрыЗапроса;
КонецФункции

Функция ПолучитьПараметрыЗапросаПолученияСпискаМаркируемыхТоваровЗаказа(НомерОтправления)
	Дополнение       = Новый Структура("analytics_data, barcodes, financial_data, product_exemplars, translit", Ложь, Ложь, Ложь, Ложь, Ложь);
	ПараметрыЗапроса = Новый Структура("posting_number, with", НомерОтправления, Дополнение);
	
	Возврат ПараметрыЗапроса;
КонецФункции

Функция ПараметрыЗапросаПолученияСпискаТоваровПоИдентификаторам(КодыТоваров)
	ПараметрыЗапроса = Новый Структура("offer_id", КодыТоваров);
	
	Возврат ПараметрыЗапроса;
КонецФункции

Функция ПолучитьПараметрыЗапросаПолученияЗаказов(ДанныеМагазина)
	Сортировка  = "ASC";
	Загружаемых = 1000;
	Пропущенных = 0;
	Дополнение  = Новый Структура("financial_data, barcodes", Истина, Истина);
	Склады      = Новый Массив;
	Склады.Добавить(ДанныеМагазина.ИдСклада);
	Фильтр = Новый Структура("status, cutoff_from", Статус_ОжидаетУпаковки(), НачалоДня(ТекущаяДата()));
	Фильтр.Вставить("warehouse_id", Склады);
	ПараметрыЗапроса = Новый Структура("dir, filter, limit, offset, with", Сортировка, Фильтр, Загружаемых, Пропущенных, Дополнение);
	
	Возврат ПараметрыЗапроса;
КонецФункции

Функция ПараметрыЗапросаПодтвержденияКомплектации(ДанныеМагазина, СоставЗаказа, НомерОтправления)
	СоставОтправления = Новый Массив;
	Для Каждого ТекСтрока Из СоставЗаказа Цикл
		ДанныеПозиции = Новый Структура("product_id, quantity", ТекСтрока.КодМаркета, ТекСтрока.Количество);
		СоставОтправления.Добавить(ДанныеПозиции);
	КонецЦикла;
	Отправление = Новый Структура("products", СоставОтправления);
	Упаковки    = Новый Массив;
	Упаковки.Добавить(Отправление);
	ДопИнфо = Новый Структура;
	ПараметрыЗапроса = Новый Структура("packages, posting_number, with", Упаковки, НомерОтправления, ДопИнфо);
	
	Возврат ПараметрыЗапроса;
КонецФункции

Функция ПолучитьПараметрыЗапросаСозданияДанныхМаркировкиЗаказа(НомерОтправления)
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("posting_number", НомерОтправления);
	
	Возврат ПараметрыЗапроса;
КонецФункции

Функция ПолучитьПараметрыЗапросаДляПередачиДанныхМаркировкиЗаказа(ДанныеМагазина, ДанныеМаркировки, НомерОтправления)
	ОбщееКоличество  = 0;
	СоставМаркировки = Новый Массив;
	Для Каждого ТекДанныеМаркировки Из ДанныеМаркировки Цикл
		ДанныеКИЗов = ТекДанныеМаркировки.Значение;
		Экземпляры  = Новый Массив;
		Для Каждого ТекДанныеКИЗ Из ДанныеКИЗов Цикл
			ДанныеПозиции = Новый Структура;
			ДанныеПозиции.Вставить("exemplar_id",    ТекДанныеКИЗ.exemplar_id);
			ДанныеПозиции.Вставить("gtd",            "");
			ДанныеПозиции.Вставить("is_gtd_absent",  Ложь);
			ДанныеПозиции.Вставить("is_rnpt_absent", Ложь);
			ДанныеПозиции.Вставить("mandatory_mark", ТекДанныеКИЗ.mandatory_mark);
			ДанныеПозиции.Вставить("rnpt",           "");
			ДанныеПозиции.Вставить("jw_uin",         "");
			Экземпляры.Добавить(ДанныеПозиции);
		КонецЦикла;
		СтрокаСостава = Новый Структура;
		СтрокаСостава.Вставить("exemplars",                Экземпляры);
		СтрокаСостава.Вставить("is_gtd_needed",            Ложь);
		СтрокаСостава.Вставить("is_mandatory_mark_needed", Истина);
		СтрокаСостава.Вставить("is_rnpt_needed",           Ложь);
		СтрокаСостава.Вставить("product_id",               ТекДанныеМаркировки.Ключ);
		СтрокаСостава.Вставить("quantity",                 Экземпляры.Количество());
		СоставМаркировки.Добавить(СтрокаСостава);
		ОбщееКоличество = ОбщееКоличество + СтрокаСостава.quantity;
	КонецЦикла;
	ПараметрыЗапроса = Новый Структура("multi_box_qty, posting_number, products", ОбщееКоличество, НомерОтправления, СоставМаркировки);
	
	Возврат ПараметрыЗапроса;
КонецФункции

Функция ПолучитьПараметрыЗапросаПолученияСтатусаПередачиДанныхМаркировкиЗаказа(НомерОтправления)
	ПараметрыЗапроса = Новый Структура("posting_number", НомерОтправления);
	
	Возврат ПараметрыЗапроса;
КонецФункции

Функция ПолучитьПараметрыЗапросаПолученияЭтикетки(ДанныеМагазина, НомерОтправления)
	НомераОтправлений = Новый Массив;
	НомераОтправлений.Добавить(НомерОтправления);
	ПараметрыЗапроса = Новый Структура("posting_number", НомераОтправлений);
	
	Возврат ПараметрыЗапроса;
КонецФункции

Функция ПолучитьПараметрыЗапросаПолученияДереваКатегорий(ДанныеМагазина, ИдКатегории = Неопределено)
	ПараметрыЗапроса = Новый Структура("language", "DEFAULT");
	Если ЗначениеЗаполнено(ИдКатегории) Тогда
		ПараметрыЗапроса.Вставить("category_id", ИдКатегории);
	КонецЕсли; 
	
	Возврат ПараметрыЗапроса;
КонецФункции

Функция ПолучитьПараметрыЗапросаПолученияХарактеристик(ДанныеМагазина, ИдКатегории)
	Категории = Новый Массив;
	Категории.Добавить(ИдКатегории);
	ПараметрыЗапроса = Новый Структура("attribute_type, category_id, language", "REQUIRED", Категории, "DEFAULT");
	
	Возврат ПараметрыЗапроса;
КонецФункции

Функция ПолучитьПараметрыЗапросаПолученияЗначенияХарактеристики(ДанныеМагазина, ИдКатегории, ИдСправочника)
	ПараметрыЗапроса = Новый Структура("attribute_id, category_id, last_value_id,  limit", ИдСправочника, ИдКатегории, 0, 5000);
	
	Возврат ПараметрыЗапроса;
КонецФункции

Функция ПолучитьПараметрыЗапросаПолученияСтатусаЗаказа(НомерОтправления)
	Дополнение       = Новый Структура("analytics_data, barcodes, financial_data, product_exemplars, translit", Ложь, Ложь, Ложь, Ложь, Ложь);
	ПараметрыЗапроса = Новый Структура("posting_number, with", НомерОтправления, Дополнение);
	
	Возврат ПараметрыЗапроса;
КонецФункции

Функция ПараметрыЗапросаПолученияЦенТоваров()
	Фильтр           = Новый Структура("visibility", "ALL");
	ПараметрыЗапроса = Новый Структура("filter, last_id", Фильтр, "");
	
	Возврат ПараметрыЗапроса;
КонецФункции

#КонецОбласти

#Область ВыполениеЗапросовHTTP

Функция ВыполнитьЗапросОбновленияОстатков(Сессия, ДанныеМагазина, ПараметрыЗапроса, Регистратор, НомерПорции = 1)
	Запрос        = ЗапросОбновленияОстатков(ПараметрыЗапроса);
	ДанныеЗапроса = КоннекторHTTP.ОбъектВJson(Запрос, , Новый Структура("СимволыОтступа", Символы.Таб));
	
	СтрокаДанныхЗапросовAPI = Регистратор.ДобавитьСтрокуДанныхЗапросовAPI(НомерПорции, Перечисления.мс_ВидыОбменовСМаркетами.ЗапросAPIОбновленияОстатков);
	Регистратор.УстановитьДанныеЗапросаAPIGZip(ДанныеЗапроса, СтрокаДанныхЗапросовAPI);
	
	Адрес = СтрШаблон("%1/v2/products/stocks", ДанныеМагазина.Сервер);
	Попытка
		Результат = КоннекторHTTP.Post(Адрес, ДанныеЗапроса, , Сессия);
	Исключение
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбновлениеОстатковОшибкаВыполненияЗапроса(ИнформацияОбОшибке);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.ОшибкаВыполненияЗапросаAPI, СтрокаДанныхЗапросовAPI);
		Регистратор.УстановитьРезультатОбменаСОшибками( , "Озон");
		
		Возврат Неопределено;
	КонецПопытки;
	Если Результат = Неопределено Тогда
		ОбновлениеОстатковОшибкаПустойРезультатаЗапроса(Запрос.data.stocks);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.ЗапросAPIВернулПустойРезультат, СтрокаДанныхЗапросовAPI);
		Регистратор.УстановитьРезультатОбменаСОшибками( , "Озон");
		
		Возврат Неопределено;
	КонецЕсли;
	Если Результат.КодСостояния <> 200 Тогда
		ОбновлениеОстатковОшибкаРезультата(Результат);
		Регистратор.УстановитьРезультатЗапросаAPIGZip(Результат, СтрокаДанныхЗапросовAPI);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.НекорректныйКодРезультатаЗапросаAPI, СтрокаДанныхЗапросовAPI);
		Регистратор.УстановитьРезультатОбменаСОшибками( , "Озон");
		
		Возврат Неопределено;
	КонецЕсли;
	Попытка
		Данные = КоннекторHTTP.КакJson(Результат, Новый Структура("ПрочитатьВСоответствие", Ложь));
	Исключение
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбновлениеОстатковОшибкаПолученияДанныхРезультата(ИнформацияОбОшибке);
		Регистратор.УстановитьРезультатЗапросаAPIGZip(Результат, СтрокаДанныхЗапросовAPI);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.РезультатЗапросаAPIНеСодержитДанных, СтрокаДанныхЗапросовAPI);
		Регистратор.УстановитьРезультатОбменаСОшибками( , "Озон");
		
		Возврат Неопределено;
	КонецПопытки;
	
	Регистратор.УстановитьДанныеРезультатаЗапросаAPIGZip(Данные, СтрокаДанныхЗапросовAPI);
	
	Если Данные.Свойство("result") = Неопределено Или Данные.result.Количество() = 0 Тогда
		ОбновлениеОстатковОшибкаВРезультате(Запрос, Данные);
		Регистратор.УстановитьРезультатЗапросаAPIGZip(Результат, СтрокаДанныхЗапросовAPI);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.ДанныеРезультатаЗапросаAPIНеСодержатОбязательныхСвойств, СтрокаДанныхЗапросовAPI);
		Регистратор.УстановитьРезультатОбменаСОшибками( , "Озон");
		
		Возврат Неопределено;
	КонецЕсли;
	
	Регистратор.УстановитьРезультатОбменаУспешно(СтрокаДанныхЗапросовAPI, "Озон");
	
	Возврат Данные;
КонецФункции

Функция ВыполнитьЗапросОбновленияЦен(Сессия, ДанныеМагазина, ПараметрыЗапроса, НомерПорции, Регистратор)
	Запрос        = ЗапросОбновленияЦен(ПараметрыЗапроса);
	ДанныеЗапроса = КоннекторHTTP.ОбъектВJson(Запрос);
	
	СтрокаДанныхЗапросовAPI = Регистратор.ДобавитьСтрокуДанныхЗапросовAPI(НомерПорции, Перечисления.мс_ВидыОбменовСМаркетами.ЗапросAPIОбновленияЦен);
	Регистратор.УстановитьДанныеЗапросаAPIGZip(ДанныеЗапроса, СтрокаДанныхЗапросовAPI);
	
	Адрес = СтрШаблон("%1/v1/product/import/prices", ДанныеМагазина.Сервер);
	Попытка
		Результат = КоннекторHTTP.Post(Адрес, ДанныеЗапроса, , Сессия);
	Исключение
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбновлениеОстатковОшибкаВыполненияЗапроса(ИнформацияОбОшибке);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.ОшибкаВыполненияЗапросаAPI, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецПопытки;
	Если Результат = Неопределено Тогда
		ОбновлениеЦенОшибкаПустойРезультатаЗапроса(Запрос.data.prices);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.ЗапросAPIВернулПустойРезультат, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецЕсли;
	Если Результат.КодСостояния <> 200 Тогда
		ОбновлениеЦенОшибкаРезультата(Результат);
		Регистратор.УстановитьРезультатЗапросаAPIGZip(Результат, СтрокаДанныхЗапросовAPI);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.НекорректныйКодРезультатаЗапросаAPI, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецЕсли;
	Попытка
		Данные = КоннекторHTTP.КакJson(Результат, Новый Структура("ПрочитатьВСоответствие", Ложь));
	Исключение
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбновлениеЦенОшибкаПолученияДанныхРезультата(ИнформацияОбОшибке);
		Регистратор.УстановитьРезультатЗапросаAPIGZip(Результат, СтрокаДанныхЗапросовAPI);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.РезультатЗапросаAPIНеСодержитДанных, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецПопытки;
	
	Регистратор.УстановитьДанныеРезультатаЗапросаAPIGZip(Данные, СтрокаДанныхЗапросовAPI);
	
	Если Данные.Свойство("result") = Неопределено Или Данные.result.Количество() = 0 Тогда
		ОбновлениеЦенОшибкаВРезультате(Запрос, Данные);
		Регистратор.УстановитьРезультатЗапросаAPIGZip(Результат, СтрокаДанныхЗапросовAPI);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.ДанныеРезультатаЗапросаAPIНеСодержатОбязательныхСвойств, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецЕсли;
	
	Регистратор.УстановитьРезультатОбменаУспешно(СтрокаДанныхЗапросовAPI, "Озон");
	
	Возврат Данные;
КонецФункции

Функция ВыполнитьЗапросПолученияСпискаТоваров(Сессия, ДанныеМагазина, ПараметрыЗапроса, НомерПорции, Регистратор)
	Запрос        = ЗапросПолученияСпискаТоваров(ПараметрыЗапроса);
	ДанныеЗапроса = КоннекторHTTP.ОбъектВJson(Запрос);
	
	СтрокаДанныхЗапросовAPI = Регистратор.ДобавитьСтрокуДанныхЗапросовAPI(НомерПорции, Перечисления.мс_ВидыОбменовСМаркетами.ЗапросAPIПолученияСпискаТоваров);
	Регистратор.УстановитьДанныеЗапросаAPIGZip(ДанныеЗапроса, СтрокаДанныхЗапросовAPI);
	
	Адрес = СтрШаблон("%1/v2/product/list", ДанныеМагазина.Сервер);
	Попытка
		Результат = КоннекторHTTP.Post(Адрес, ДанныеЗапроса, , Сессия);
	Исключение
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПолучениеСпискаТоваровОшибкаЗапроса(ИнформацияОбОшибке);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.ОшибкаВыполненияЗапросаAPI, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецПопытки;
	Если Результат = Неопределено Тогда
		ПолучениеСпискаТоваровОшибкаПустойРезультатаЗапроса(Запрос);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.ЗапросAPIВернулПустойРезультат, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецЕсли;
	Если Результат.КодСостояния <> 200 Тогда
		ПолучениеСпискаТоваровОшибкаРезультата(Результат);
		Регистратор.УстановитьРезультатЗапросаAPIGZip(Результат, СтрокаДанныхЗапросовAPI);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.НекорректныйКодРезультатаЗапросаAPI, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецЕсли;
	Попытка
		Данные = КоннекторHTTP.КакJson(Результат, Новый Структура("ПрочитатьВСоответствие", Ложь));
	Исключение
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПолучениеСпискаТоваровОшибкаПолученияДанныхРезультата(ИнформацияОбОшибке);
		Регистратор.УстановитьРезультатЗапросаAPIGZip(Результат, СтрокаДанныхЗапросовAPI);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.РезультатЗапросаAPIНеСодержитДанных, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецПопытки;
	
	Регистратор.УстановитьДанныеРезультатаЗапросаAPIGZip(Данные, СтрокаДанныхЗапросовAPI);
	
	Если Данные.Свойство("result") = Неопределено Тогда
		АкцииОшибкаВРезультате(Данные);
		Регистратор.УстановитьРезультатЗапросаAPIGZip(Результат, СтрокаДанныхЗапросовAPI);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.ДанныеРезультатаЗапросаAPIНеСодержатОбязательныхСвойств, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецЕсли;
	
	Регистратор.УстановитьРезультатОбменаУспешно(СтрокаДанныхЗапросовAPI, "Озон");
	
	Возврат Данные;
КонецФункции

Функция ВыполнитьЗапросПолученияСпискаТоваровПоИдентификаторам(Сессия, ДанныеМагазина, ПараметрыЗапроса, НомерПорции = 1, Регистратор)
	Запрос        = ЗапросПолученияСпискаТоваровПоИдентификаторам(ПараметрыЗапроса);
	ДанныеЗапроса = КоннекторHTTP.ОбъектВJson(Запрос);
	
	СтрокаДанныхЗапросовAPI = Регистратор.ДобавитьСтрокуДанныхЗапросовAPI(НомерПорции, Перечисления.мс_ВидыОбменовСМаркетами.ЗапросAPIПолученияСпискаТоваровПоИдентификаторам);
	Регистратор.УстановитьДанныеЗапросаAPIGZip(ДанныеЗапроса, СтрокаДанныхЗапросовAPI);
	
	Адрес = СтрШаблон("%1/v2/product/info/list", ДанныеМагазина.Сервер);
	Попытка
		Результат = КоннекторHTTP.Post(Адрес, ДанныеЗапроса, , Сессия);
	Исключение
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПолучениеСпискаТоваровПоИдентификаторамОшибкаЗапроса(ИнформацияОбОшибке);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.ОшибкаВыполненияЗапросаAPI, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецПопытки;
	Если Результат = Неопределено Тогда
		ПолучениеСпискаТоваровПоИдентификаторамОшибкаПустойРезультатаЗапроса(Запрос);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.РезультатЗапросаAPIНеСодержитДанных, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецЕсли;
	Если Результат.КодСостояния <> 200 Тогда
		ПолучениеСпискаТоваровПоИдентификаторамОшибкаРезультата(Результат);
		Регистратор.УстановитьРезультатЗапросаAPIGZip(Результат, СтрокаДанныхЗапросовAPI);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.НекорректныйКодРезультатаЗапросаAPI, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецЕсли;
	Попытка
		Данные = КоннекторHTTP.КакJson(Результат, Новый Структура("ПрочитатьВСоответствие", Истина));
	Исключение
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПолучениеСпискаТоваровПоИдентификаторамОшибкаПолученияДанныхРезультата(ИнформацияОбОшибке);
		Регистратор.УстановитьРезультатЗапросаAPIGZip(Результат, СтрокаДанныхЗапросовAPI);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.РезультатЗапросаAPIНеСодержитДанных, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецПопытки;
	
	Регистратор.УстановитьДанныеРезультатаЗапросаAPIGZip(Данные, СтрокаДанныхЗапросовAPI);
	Регистратор.УстановитьРезультатОбменаУспешно(СтрокаДанныхЗапросовAPI, "Озон");
	
	Возврат Данные;
КонецФункции

Функция ВыполнитьЗапросПолученияДанныхНеобработанныхЗаказов(Сессия, ДанныеМагазина, ПараметрыЗапроса, Регистратор)
	#Если Сервер И Не Сервер Тогда
		Регистратор = Документы.мс_РегистраторИсторииОбменовСМаркетами.СоздатьДокумент();
	#КонецЕсли
	Запрос        = ЗапросПолученияДанныхНеобработанныхЗаказов(ПараметрыЗапроса);
	ДанныеЗапроса = КоннекторHTTP.ОбъектВJson(Запрос, ПолучитьПараметрыПреобразованияJSON());
	
	СтрокаДанныхЗапросовAPI = Регистратор.ДобавитьСтрокуДанныхЗапросовAPI( , Перечисления.мс_ВидыОбменовСМаркетами.ЗапросAPIПолученияДанныхНеобработанныхЗаказов);
	Регистратор.УстановитьДанныеЗапросаAPIGZip(ДанныеЗапроса, СтрокаДанныхЗапросовAPI);
	
	Адрес = СтрШаблон("%1/v3/posting/fbs/unfulfilled/list", ДанныеМагазина.Сервер);
	Попытка
		Результат = КоннекторHTTP.Post(Адрес, ДанныеЗапроса, , Сессия);
	Исключение
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПолучениеДанныхНеОбработанныхЗаказовОшибкаВыполенияЗапроса(ПараметрыЗапроса, ИнформацияОбОшибке);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.ОшибкаВыполненияЗапросаAPI, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецПопытки;
	Если Результат = Неопределено Тогда
		ПолучениеДанныхНеОбработанныхЗаказовОшибкаПустойРезультатаЗапроса(Запрос);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.РезультатЗапросаAPIНеСодержитДанных, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецЕсли;
	Если Результат.КодСостояния <> 200 Тогда
		ПолучениеДанныхНеОбработанныхЗаказовОшибкаРезультата(Запрос, Результат);
		Регистратор.УстановитьРезультатЗапросаAPIGZip(Результат, СтрокаДанныхЗапросовAPI);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.НекорректныйКодРезультатаЗапросаAPI, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецЕсли;
	Попытка
		СвойстваСДатой = "in_process_at, shipment_date";
		Данные = КоннекторHTTP.КакJson(Результат, Новый Структура("ПрочитатьВСоответствие, ИменаСвойствСоЗначениямиДата", Ложь, СтрРазделить(СвойстваСДатой, ", ", Ложь)));
	Исключение
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПолучениеДанныхНеОбработанныхЗаказовОшибкаПолученияДанныхРезультата(Запрос.data, Результат, ИнформацияОбОшибке);
		Регистратор.УстановитьРезультатЗапросаAPIGZip(Результат, СтрокаДанныхЗапросовAPI);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.РезультатЗапросаAPIНеСодержитДанных, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецПопытки;
	
	Регистратор.УстановитьДанныеРезультатаЗапросаAPIGZip(Данные, СтрокаДанныхЗапросовAPI);
	
	Если Данные.Свойство("result") = Неопределено Тогда
		ПолучениеДанныхНеобработанныхЗаказовОшибкаВРезультате(Запрос, Данные);
		Регистратор.УстановитьРезультатЗапросаAPIGZip(Результат, СтрокаДанныхЗапросовAPI);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.ДанныеРезультатаЗапросаAPIНеСодержатОбязательныхСвойств, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецЕсли;
	
	Регистратор.УстановитьРезультатОбменаУспешно(СтрокаДанныхЗапросовAPI, "Озон");
	
	Возврат Данные;
КонецФункции

Функция ВыполнитьЗапросПодтвержденияКомплектацииЗаказа(Сессия, ДанныеМагазина, ПараметрыЗапроса, НомерПорции = 1, Регистратор, Заказ)
	Запрос        = ЗапросПодтвержденияКомплектацииЗаказа(ПараметрыЗапроса);
	ДанныеЗапроса = КоннекторHTTP.ОбъектВJson(Запрос, ПолучитьПараметрыПреобразованияJSON(), Новый Структура("СимволыОтступа", Символы.Таб));
	
	СтрокаДанныхЗапросовAPI = Регистратор.ДобавитьСтрокуДанныхЗапросовAPI(НомерПорции, Перечисления.мс_ВидыОбменовСМаркетами.ПодтверждениеКомплектации);
	Регистратор.УстановитьДанныеЗапросаAPIGZip(ДанныеЗапроса, СтрокаДанныхЗапросовAPI);
	
	Адрес = СтрШаблон("%1/v4/posting/fbs/ship", ДанныеМагазина.Сервер);
	Попытка
		Результат = КоннекторHTTP.Post(Адрес, ДанныеЗапроса, , Сессия);
	Исключение
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПодтверждениеКомплектацииЗаказаОшибкаВыполненияЗапроса(ПараметрыЗапроса, ИнформацияОбОшибке);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.ОшибкаВыполненияЗапросаAPI, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецПопытки;
	Если Результат = Неопределено Тогда
		ПодтверждениеКомплектацииЗаказаОшибкаПустойРезультатаЗапроса(Запрос);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.РезультатЗапросаAPIНеСодержитДанных, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецЕсли;
	Если Результат.КодСостояния <> 200 Тогда
		ПодтверждениеКомплектацииЗаказаОшибкаРезультата(Запрос, Результат);
		Регистратор.УстановитьРезультатЗапросаAPIGZip(Результат, СтрокаДанныхЗапросовAPI);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.НекорректныйКодРезультатаЗапросаAPI, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецЕсли;
	Попытка
		Данные = КоннекторHTTP.КакJson(Результат, Новый Структура("ПрочитатьВСоответствие", Ложь));
	Исключение
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПодтверждениеКомплектацииЗаказаОшибкаПолученияДанныхРезультата(Запрос, Результат, ИнформацияОбОшибке);
		Регистратор.УстановитьРезультатЗапросаAPIGZip(Результат, СтрокаДанныхЗапросовAPI);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.РезультатЗапросаAPIНеСодержитДанных, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецПопытки;
	
	Регистратор.УстановитьДанныеРезультатаЗапросаAPIGZip(Данные, СтрокаДанныхЗапросовAPI);
	Регистратор.УстановитьРезультатОбменаУспешно(СтрокаДанныхЗапросовAPI, "Озон");
	
	Возврат Данные; 
КонецФункции

Функция ВыполнитьЗапросПолученияИнформацииОЗаказе(Сессия, ДанныеМагазина, ПараметрыЗапроса, Регистратор)
	Запрос = ЗапросПолученияСпискаМаркируемыхТоваровЗаказа(ПараметрыЗапроса);
	ДанныеЗапроса = КоннекторHTTP.ОбъектВJson(Запрос);
	
	СтрокаДанныхЗапросовAPI = Регистратор.ДобавитьСтрокуДанныхЗапросовAPI( , Перечисления.мс_ВидыОбменовСМаркетами.ЗапросAPIПолученияСпискаМаркируемыхТоваров);
	Регистратор.УстановитьДанныеЗапросаAPIGZip(ДанныеЗапроса, СтрокаДанныхЗапросовAPI);
	
	Адрес = СтрШаблон("%1/v3/posting/fbs/get", ДанныеМагазина.Сервер);
	Попытка
		Результат = КоннекторHTTP.Post(Адрес, КоннекторHTTP.ОбъектВJson(Запрос), , Сессия);
	Исключение
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПолучениеСпискаМаркируемыхТоваровЗаказаОшибкаЗапроса(ИнформацияОбОшибке);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.ОшибкаВыполненияЗапросаAPI, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецПопытки;
	Если Результат = Неопределено Тогда
		ПолучениеСпискаМаркируемыхТоваровЗаказаОшибкаПустойРезультатаЗапроса(Запрос);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.РезультатЗапросаAPIНеСодержитДанных, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецЕсли;
	Если Результат.КодСостояния <> 200 Тогда
		ПолучениеСпискаМаркируемыхТоваровЗаказаОшибкаРезультата(Результат);
		Регистратор.УстановитьРезультатЗапросаAPIGZip(Результат, СтрокаДанныхЗапросовAPI);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.НекорректныйКодРезультатаЗапросаAPI, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецЕсли;
	Попытка
		Данные = КоннекторHTTP.КакJson(Результат, Новый Структура("ПрочитатьВСоответствие", Ложь));
	Исключение
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПолучениеСпискаМаркируемыхТоваровЗаказаОшибкаПолученияДанныхРезультата(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		Регистратор.УстановитьРезультатЗапросаAPIGZip(Результат, СтрокаДанныхЗапросовAPI);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.РезультатЗапросаAPIНеСодержитДанных, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецПопытки;
	
	Регистратор.УстановитьДанныеРезультатаЗапросаAPIGZip(Данные, СтрокаДанныхЗапросовAPI);
	
	Если Данные.Свойство("result") = Неопределено Тогда
		ПолучениеСпискаМаркируемыхТоваровЗаказаОшибкаВРезультате(Запрос, Данные);
		Регистратор.УстановитьРезультатЗапросаAPIGZip(Результат, СтрокаДанныхЗапросовAPI);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.ДанныеРезультатаЗапросаAPIНеСодержатОбязательныхСвойств, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецЕсли;
	
	//Если Данные.result.requirements.products_requiring_mandatory_mark.Количество() = 0 Тогда
	//	ПолучениеСпискаМаркируемыхТоваровЗаказаНетДанных();
	//	Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.ЗапросAPIВернулОтрицательныйРезультат, СтрокаДанныхЗапросовAPI);
	//	
	//	Возврат Неопределено;
	//КонецЕсли;
	
	Регистратор.УстановитьРезультатОбменаУспешно(СтрокаДанныхЗапросовAPI, "Озон");
	
	Возврат Данные;
КонецФункции

Функция ВыполнитьЗапросСозданияДанныхМаркируемыхТоваровЗаказа(Сессия, ДанныеМагазина, ПараметрыЗапроса, Регистратор)
	Запрос = ЗапросПолученияСпискаМаркируемыхТоваровЗаказа(ПараметрыЗапроса);
	ДанныеЗапроса = КоннекторHTTP.ОбъектВJson(Запрос);
	
	СтрокаДанныхЗапросовAPI = Регистратор.ДобавитьСтрокуДанныхЗапросовAPI( , Перечисления.мс_ВидыОбменовСМаркетами.ЗапросAPIПолученияДанныхМаркируемыхТоваров);
	Регистратор.УстановитьДанныеЗапросаAPIGZip(ДанныеЗапроса, СтрокаДанныхЗапросовAPI);
	
	Адрес = СтрШаблон("%1/v5/fbs/posting/product/exemplar/create-or-get", ДанныеМагазина.Сервер);
	Попытка
		Результат = КоннекторHTTP.Post(Адрес, КоннекторHTTP.ОбъектВJson(Запрос), , Сессия);
	Исключение
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПолучениеДанныхМаркируемыхТоваровЗаказаОшибкаЗапроса(ИнформацияОбОшибке);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.ОшибкаВыполненияЗапросаAPI, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецПопытки;
	Если Результат = Неопределено Тогда
		ПолучениеДанныхМаркируемыхТоваровЗаказаОшибкаПустойРезультатаЗапроса(Запрос);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.РезультатЗапросаAPIНеСодержитДанных, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецЕсли;
	Если Результат.КодСостояния <> 200 Тогда
		ПолучениеДанныхМаркируемыхТоваровЗаказаОшибкаРезультата(Результат);
		Регистратор.УстановитьРезультатЗапросаAPIGZip(Результат, СтрокаДанныхЗапросовAPI);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.НекорректныйКодРезультатаЗапросаAPI, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецЕсли;
	Попытка
		Данные = КоннекторHTTP.КакJson(Результат, Новый Структура("ПрочитатьВСоответствие", Ложь));
	Исключение
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПолучениеДанныхМаркируемыхТоваровЗаказаОшибкаПолученияДанныхРезультата(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		Регистратор.УстановитьРезультатЗапросаAPIGZip(Результат, СтрокаДанныхЗапросовAPI);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.РезультатЗапросаAPIНеСодержитДанных, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецПопытки;
	
	Регистратор.УстановитьДанныеРезультатаЗапросаAPIGZip(Данные, СтрокаДанныхЗапросовAPI);
	
	Если Данные.Свойство("products") = Неопределено Тогда
		ОбновлениеЦенОшибкаВРезультате(Запрос, Данные);
		Регистратор.УстановитьРезультатЗапросаAPIGZip(Результат, СтрокаДанныхЗапросовAPI);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.ДанныеРезультатаЗапросаAPIНеСодержатОбязательныхСвойств, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецЕсли;
	
	Регистратор.УстановитьРезультатОбменаУспешно(СтрокаДанныхЗапросовAPI, "Озон");
	
	Возврат Данные;
КонецФункции

Функция ВыполнитьЗапросПередачиДанныхМаркировкиЗаказа(Сессия, ДанныеМагазина, ПараметрыЗапроса, Регистратор)
	Запрос = ЗапросПередачиДанныхМаркировкиЗаказа(ПараметрыЗапроса);
	ДанныеЗапроса = КоннекторHTTP.ОбъектВJson(Запрос, ПолучитьПараметрыПреобразованияJSON(), Новый Структура("СимволыОтступа", Символы.Таб));
	
	СтрокаДанныхЗапросовAPI = Регистратор.ДобавитьСтрокуДанныхЗапросовAPI( , Перечисления.мс_ВидыОбменовСМаркетами.ЗапросAPIПередачиДанныхМаркировкиЗаказа);
	Регистратор.УстановитьДанныеЗапросаAPIGZip(ДанныеЗапроса, СтрокаДанныхЗапросовAPI);
	
	Адрес = СтрШаблон("%1/v5/fbs/posting/product/exemplar/set", ДанныеМагазина.Сервер);
	Попытка
		Результат = КоннекторHTTP.Post(Адрес, ДанныеЗапроса, , Сессия);
	Исключение
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПередачаДанныхМаркировкиЗаказаОшибкаВыполненияЗапроса(ПараметрыЗапроса, ИнформацияОбОшибке);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.ОшибкаВыполненияЗапросаAPI, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецПопытки;
	Если Результат = Неопределено Тогда
		ПередачаДанныхМаркировкиЗаказаОшибкаПустойРезультатаЗапроса(Запрос);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.РезультатЗапросаAPIНеСодержитДанных, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецЕсли;
	Если Результат.КодСостояния <> 200 Тогда
		ПередачаДанныхМаркировкиЗаказаОшибкаРезультата(Запрос, Результат);
		Регистратор.УстановитьРезультатЗапросаAPIGZip(Результат, СтрокаДанныхЗапросовAPI);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.НекорректныйКодРезультатаЗапросаAPI, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецЕсли;
	Попытка
		Данные = КоннекторHTTP.КакJson(Результат, Новый Структура("ПрочитатьВСоответствие", Ложь));
	Исключение
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПередачаДанныхМаркировкиЗаказаОшибкаПолученияДанныхРезультата(Запрос, Результат, ИнформацияОбОшибке);
		Регистратор.УстановитьРезультатЗапросаAPIGZip(Результат, СтрокаДанныхЗапросовAPI);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.РезультатЗапросаAPIНеСодержитДанных, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецПопытки;
	
	Регистратор.УстановитьДанныеРезультатаЗапросаAPIGZip(Данные, СтрокаДанныхЗапросовAPI);
	
	Если Данные.Свойство("result") = Неопределено Тогда
		ПередачаДанныхМаркировкиЗаказаОшибкаВРезультате(Запрос, Данные);
		Регистратор.УстановитьРезультатЗапросаAPIGZip(Результат, СтрокаДанныхЗапросовAPI);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.ДанныеРезультатаЗапросаAPIНеСодержатОбязательныхСвойств, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецЕсли;
	
	Регистратор.УстановитьРезультатОбменаУспешно(СтрокаДанныхЗапросовAPI, "Озон");
	
	Возврат Данные;
КонецФункции

Функция ВыполнитьЗапросПолученияСтатусаПередачиДанныхМаркировкиЗаказа(Сессия, ДанныеМагазина, ПараметрыЗапроса, НомерПопытки, Регистратор)
	Запрос = ЗапросПолученияСтатусаПередачиДанныхМаркировкиЗаказа(ПараметрыЗапроса);
	ДанныеЗапроса = КоннекторHTTP.ОбъектВJson(Запрос, ПолучитьПараметрыПреобразованияJSON(), Новый Структура("СимволыОтступа", Символы.Таб));
	
	СтрокаДанныхЗапросовAPI = Регистратор.ДобавитьСтрокуДанныхЗапросовAPI(НомерПопытки, Перечисления.мс_ВидыОбменовСМаркетами.ЗапросAPIПолученияСтатусаПередачиДанныхМаркировкиЗаказа);
	Регистратор.УстановитьДанныеЗапросаAPIGZip(ДанныеЗапроса, СтрокаДанныхЗапросовAPI);
	
	Адрес = СтрШаблон("%1/v4/fbs/posting/product/exemplar/status", ДанныеМагазина.Сервер);
	Попытка
		Результат = КоннекторHTTP.Post(Адрес, ДанныеЗапроса, , Сессия);
	Исключение
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПолучениеСтатусаПередачиДанныхМаркировкиЗаказаОшибкаВыполненияЗапроса(ПараметрыЗапроса, ИнформацияОбОшибке);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.ОшибкаВыполненияЗапросаAPI, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецПопытки;
	Если Результат = Неопределено Тогда
		ПередачаДанныхМаркировкиЗаказаОшибкаПустойРезультатаЗапроса(Запрос);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.РезультатЗапросаAPIНеСодержитДанных, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецЕсли;
	Если Результат.КодСостояния <> 200 Тогда
		ПолучениеСтатусаПередачиДанныхМаркировкиЗаказаОшибкаРезультата(Запрос, Результат);
		Регистратор.УстановитьРезультатЗапросаAPIGZip(Результат, СтрокаДанныхЗапросовAPI);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.НекорректныйКодРезультатаЗапросаAPI, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецЕсли;
	Попытка
		Данные = КоннекторHTTP.КакJson(Результат, Новый Структура("ПрочитатьВСоответствие", Ложь));
	Исключение
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПолучениеСтатусаПередачиДанныхМаркировкиЗаказаОшибкаПолученияДанныхРезультата(Запрос, Результат, ИнформацияОбОшибке);
		Регистратор.УстановитьРезультатЗапросаAPIGZip(Результат, СтрокаДанныхЗапросовAPI);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.РезультатЗапросаAPIНеСодержитДанных, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецПопытки;
	
	Регистратор.УстановитьДанныеРезультатаЗапросаAPIGZip(Данные, СтрокаДанныхЗапросовAPI);
	
	Если Данные.Свойство("status") = Неопределено Тогда
		ПолучениеСтатусаПередачиДанныхМаркировкиЗаказаОшибкаВРезультате(Запрос, Данные);
		Регистратор.УстановитьРезультатЗапросаAPIGZip(Результат, СтрокаДанныхЗапросовAPI);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.ДанныеРезультатаЗапросаAPIНеСодержатОбязательныхСвойств, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецЕсли;
	
	Регистратор.УстановитьРезультатОбменаУспешно(СтрокаДанныхЗапросовAPI, "Озон");
	
	Возврат Данные;
КонецФункции

Функция ВыполнитьЗапросПолученияЭтикетки(Сессия, ДанныеМагазина, ПараметрыЗапроса, Регистратор, Заказ)
	Запрос       = ЗапросПолученияЭтикетки(ПараметрыЗапроса);
	ДанныеЗапроса = КоннекторHTTP.ОбъектВJson(Запрос, ПолучитьПараметрыПреобразованияJSON(), Новый Структура("СимволыОтступа", Символы.Таб));
	
	СтрокаДанныхЗапросовAPI = Регистратор.ДобавитьСтрокуДанныхЗапросовAPI( , Перечисления.мс_ВидыОбменовСМаркетами.ПолучениеЭтикетки);
	Регистратор.УстановитьДанныеЗапросаAPIGZip(ДанныеЗапроса, СтрокаДанныхЗапросовAPI);
	
	Адрес = СтрШаблон("%1/v2/posting/fbs/package-label", ДанныеМагазина.Сервер);
	Попытка
		Результат = КоннекторHTTP.Post(Адрес, ДанныеЗапроса, , Сессия);
	Исключение
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПолучениеЭтикеткиОшибкаВыполненияЗапроса(ПараметрыЗапроса, ИнформацияОбОшибке);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.ОшибкаВыполненияЗапросаAPI, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецПопытки;
	Если Результат = Неопределено Тогда
		ПолучениеЭтикеткиОшибкаПустойРезультатаЗапроса(Запрос);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.РезультатЗапросаAPIНеСодержитДанных, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецЕсли;
	Если Результат.КодСостояния <> 200 Тогда
		ПолучениеЭтикеткиОшибкаРезультата(Запрос, Результат);
		Регистратор.УстановитьРезультатЗапросаAPIGZip(Результат, СтрокаДанныхЗапросовAPI);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.НекорректныйКодРезультатаЗапросаAPI, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецЕсли;
	Попытка
		Данные = КоннекторHTTP.КакДвоичныеДанные(Результат);
	Исключение
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПолучениеЭтикеткиОшибкаПолученияДанныхРезультата(Запрос, Результат, ИнформацияОбОшибке);
		Регистратор.УстановитьРезультатЗапросаAPIGZip(Результат, СтрокаДанныхЗапросовAPI);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.РезультатЗапросаAPIНеСодержитДанных, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецПопытки;
	
	//Для этикетки результат запрса пока не сраняем, т.к. это ДвоичныеДанные
	//Регистратор.УстановитьДанныеРезультатаЗапросаAPIGZip(Данные, СтрокаДанныхЗапросовAPI);
	Регистратор.УстановитьРезультатОбменаУспешно(СтрокаДанныхЗапросовAPI, "Озон");
	
	Возврат Данные; 
КонецФункции

Функция ВыполнитьЗапросПолученияДереваКатегорий(Сессия, ДанныеМагазина, ПараметрыЗапроса)
	Запрос = ЗапросПолученияДереваКатегорий(ПараметрыЗапроса);
	
	Адрес = СтрШаблон("%1/v2/category/tree", ДанныеМагазина.Сервер);
	Попытка
		Результат = КоннекторHTTP.Post(Адрес, КоннекторHTTP.ОбъектВJson(Запрос, ПолучитьПараметрыПреобразованияJSON(), Новый Структура("СимволыОтступа", Символы.Таб)), , Сессия);
	Исключение
		ПолучениеДереваКатегорийОшибкаВыполненияЗапроса(ПараметрыЗапроса, ИнформацияОбОшибке());
		Возврат Неопределено;
	КонецПопытки;
	Если Результат = Неопределено Тогда
		ПолучениеДереваКатегорийОшибкаПустойРезультатаЗапроса(Запрос);
		Возврат Неопределено;
	КонецЕсли;
	Попытка
		Данные = КоннекторHTTP.КакJson(Результат, Новый Структура("ПрочитатьВСоответствие", Ложь));
	Исключение
		ПолучениеДереваКатегорийОшибкаПолученияДанныхРезультата(Запрос, Результат, ИнформацияОбОшибке());
		Возврат Неопределено;
	КонецПопытки;
	Если Результат.КодСостояния <> 200 Тогда
		ПолучениеДереваКатегорийОшибкаРезультата(Запрос, Результат);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Данные; 
КонецФункции

Функция ВыполнитьЗапросПолученияХарактеристик(Сессия, ДанныеМагазина, ПараметрыЗапроса)
	Запрос = ЗапросПолученияХарактеристик(ПараметрыЗапроса);
	
	Адрес = СтрШаблон("%1/v3/category/attribute", ДанныеМагазина.Сервер);
	Попытка
		Результат = КоннекторHTTP.Post(Адрес, КоннекторHTTP.ОбъектВJson(Запрос, ПолучитьПараметрыПреобразованияJSON(), Новый Структура("СимволыОтступа", Символы.Таб)), , Сессия);
	Исключение
		ПолучениеДереваКатегорийОшибкаВыполненияЗапроса(ПараметрыЗапроса, ИнформацияОбОшибке());
		Возврат Неопределено;
	КонецПопытки;
	Если Результат = Неопределено Тогда
		ПолучениеДереваКатегорийОшибкаПустойРезультатаЗапроса(Запрос);
		Возврат Неопределено;
	КонецЕсли;
	Попытка
		Данные = КоннекторHTTP.КакJson(Результат, Новый Структура("ПрочитатьВСоответствие", Ложь));
	Исключение
		ПолучениеДереваКатегорийОшибкаПолученияДанныхРезультата(Запрос, Результат, ИнформацияОбОшибке());
		Возврат Неопределено;
	КонецПопытки;
	Если Результат.КодСостояния <> 200 Тогда
		ПолучениеДереваКатегорийОшибкаРезультата(Запрос, Результат);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Данные; 
КонецФункции

Функция ВыполнитьЗапросПолученияЗначенияХарактеристики(Сессия, ДанныеМагазина, ПараметрыЗапроса)
	Запрос = ЗапросПолученияЗначенияХарактеристики(ПараметрыЗапроса);
	
	Адрес = СтрШаблон("%1/v2/category/attribute/values", ДанныеМагазина.Сервер);
	Попытка
		Результат = КоннекторHTTP.Post(Адрес, КоннекторHTTP.ОбъектВJson(Запрос, ПолучитьПараметрыПреобразованияJSON(), Новый Структура("СимволыОтступа", Символы.Таб)), , Сессия);
	Исключение
		ПолучениеДереваКатегорийОшибкаВыполненияЗапроса(ПараметрыЗапроса, ИнформацияОбОшибке());
		Возврат Неопределено;
	КонецПопытки;
	Если Результат = Неопределено Тогда
		ПолучениеДереваКатегорийОшибкаПустойРезультатаЗапроса(Запрос);
		Возврат Неопределено;
	КонецЕсли;
	Попытка
		Данные = КоннекторHTTP.КакJson(Результат, Новый Структура("ПрочитатьВСоответствие", Ложь));
	Исключение
		ПолучениеДереваКатегорийОшибкаПолученияДанныхРезультата(Запрос, Результат, ИнформацияОбОшибке());
		Возврат Неопределено;
	КонецПопытки;
	Если Результат.КодСостояния <> 200 Тогда
		ПолучениеДереваКатегорийОшибкаРезультата(Запрос, Результат);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Данные; 
КонецФункции

Функция ВыполнитьЗапросПолученияСтатусаЗаказа(Сессия, ДанныеМагазина, ПараметрыЗапроса, Регистратор)
	#Если Сервер И Не Сервер Тогда
		Регистратор = Документы.мс_РегистраторИсторииОбменовСМаркетами.СоздатьДокумент();
	#КонецЕсли
	Запрос        = ЗапросПолученияСтатусаЗаказа(ПараметрыЗапроса);
	ДанныеЗапроса = КоннекторHTTP.ОбъектВJson(Запрос, , Новый Структура("СимволыОтступа", Символы.Таб));
	
	СтрокаДанныхЗапросовAPI = Регистратор.ДобавитьСтрокуДанныхЗапросовAPI( , Перечисления.мс_ВидыОбменовСМаркетами.ПодтверждениеКомплектации);
	Регистратор.УстановитьДанныеЗапросаAPIGZip(ДанныеЗапроса, СтрокаДанныхЗапросовAPI);
	
	Адрес = СтрШаблон("%1/v3/posting/fbs/get", ДанныеМагазина.Сервер);
	Попытка
		//Результат = КоннекторHTTP.Post(Адрес, ДанныеЗапроса, , Сессия);
		Результат = ПолучитьФиктивныйРезультатЗапросаПолученияСтатусаЗаказа(ПараметрыЗапроса.posting_number);
	Исключение
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПолучениеСтатусаЗаказаОшибкаВыполненияЗапроса(ИнформацияОбОшибке);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.ОшибкаВыполненияЗапросаAPI, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецПопытки;
	Если Результат = Неопределено Тогда
		ПолучениеСтатусаЗаказаОшибкаПустойРезультатаЗапроса(Запрос);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.РезультатЗапросаAPIНеСодержитДанных, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецЕсли;
	Если Результат.КодСостояния <> 200 Тогда
		ПолучениеСтатусаЗаказаОшибкаРезультата(Результат);
		Регистратор.УстановитьРезультатЗапросаAPIGZip(Результат, СтрокаДанныхЗапросовAPI);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.НекорректныйКодРезультатаЗапросаAPI, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецЕсли;
	Попытка
		Данные = КоннекторHTTP.КакJson(Результат, Новый Структура("ПрочитатьВСоответствие", Ложь));
	Исключение
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПолучениеСтатусаЗаказаОшибкаПолученияДанныхРезультата(ИнформацияОбОшибке);
		Регистратор.УстановитьРезультатЗапросаAPIGZip(Результат, СтрокаДанныхЗапросовAPI);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.РезультатЗапросаAPIНеСодержитДанных, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецПопытки;
	
	Регистратор.УстановитьДанныеРезультатаЗапросаAPIGZip(Данные, СтрокаДанныхЗапросовAPI);
	Регистратор.УстановитьРезультатОбменаУспешно(СтрокаДанныхЗапросовAPI, "Озон");
	
	Возврат Данные;
КонецФункции

Функция ВыполнитьЗапросПолученияАкций(Сессия, ДанныеМагазина, Регистратор)
	СтрокаДанныхЗапросовAPI = Регистратор.ДобавитьСтрокуДанныхЗапросовAPI( , Перечисления.мс_ВидыОбменовСМаркетами.ПодтверждениеКомплектации);
	
	Адрес = СтрШаблон("%1/v1/actions", ДанныеМагазина.Сервер);
	Попытка
		Результат = КоннекторHTTP.Get(Адрес, , , Сессия);
	Исключение
		АкцииОшибкаВыполненияЗапроса(ИнформацияОбОшибке());
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.ОшибкаВыполненияЗапросаAPI, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецПопытки;
	Если Результат = Неопределено Тогда
		АкцииОшибкаПустойРезультатаЗапроса();
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.РезультатЗапросаAPIНеСодержитДанных, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецЕсли;
	Если Результат.КодСостояния <> 200 Тогда
		АкцииОшибкаРезультата(Результат);
		Регистратор.УстановитьРезультатЗапросаAPIGZip(Результат, СтрокаДанныхЗапросовAPI);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.НекорректныйКодРезультатаЗапросаAPI, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецЕсли;
	Попытка
		СвойстваСДатой = "date_start, date_end";
		Данные = КоннекторHTTP.КакJson(Результат, Новый Структура("ПрочитатьВСоответствие, ИменаСвойствСоЗначениямиДата", Ложь, СтрРазделить(СвойстваСДатой, ", ", Ложь)));
	Исключение
		АкцииОшибкаПолученияДанныхРезультата(Результат, ИнформацияОбОшибке());
		Регистратор.УстановитьРезультатЗапросаAPIGZip(Результат, СтрокаДанныхЗапросовAPI);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.РезультатЗапросаAPIНеСодержитДанных, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецПопытки;
	
	Регистратор.УстановитьДанныеРезультатаЗапросаAPIGZip(Данные, СтрокаДанныхЗапросовAPI);
	
	Если Данные.Свойство("result") = Неопределено Тогда
		АкцииОшибкаВРезультате(Данные);
		Регистратор.УстановитьРезультатЗапросаAPIGZip(Результат, СтрокаДанныхЗапросовAPI);
		Регистратор.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.ДанныеРезультатаЗапросаAPIНеСодержатОбязательныхСвойств, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецЕсли;
	
	Регистратор.УстановитьРезультатОбменаУспешно(СтрокаДанныхЗапросовAPI, "Озон");
	
	Возврат Данные; 
КонецФункции

Функция ВыполнитьЗапросПолученияЦенТоваров(Сессия, ДанныеМагазина, ПараметрыЗапроса, НомерПорции, СеансОбменаОбъект)
	Запрос        = ЗапросПолученияЦенТоваров(ПараметрыЗапроса);
	ДанныеЗапроса = КоннекторHTTP.ОбъектВJson(Запрос);
	
	СтрокаДанныхЗапросовAPI = СеансОбменаОбъект.ДобавитьСтрокуДанныхЗапросовAPI(НомерПорции, Перечисления.мс_ВидыОбменовСМаркетами.ЗапросAPIПолученияЦенТоваров);
	СеансОбменаОбъект.УстановитьДанныеЗапросаAPIGZip(ДанныеЗапроса, СтрокаДанныхЗапросовAPI);
	
	Адрес = СтрШаблон("%1/v4/product/info/prices", ДанныеМагазина.Сервер);
	Попытка
		Результат = КоннекторHTTP.Post(Адрес, ДанныеЗапроса, , Сессия);
	Исключение
		ПолучениеЦенТоваровОшибкаЗапроса(ИнформацияОбОшибке());
		СеансОбменаОбъект.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.ОшибкаВыполненияЗапросаAPI, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецПопытки;
	Если Результат = Неопределено Тогда
		ПолучениеЦенТоваровОшибкаПустойРезультатаЗапроса(Запрос);
		СеансОбменаОбъект.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.РезультатЗапросаAPIНеСодержитДанных, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецЕсли;
	//Специфический случай. Ответ 200 приходит при не пустом last_id в параметрах запроса
	//Считаем, что в этом случае возвращаем структуру имитирующую данные запроса
	Если Результат.КодСостояния <> 200 Тогда
		#Если Сервер И Не Сервер Тогда
			ПараметрыЗапроса = Новый Структура;
		#КонецЕсли
		Если ЗначениеЗаполнено(ПараметрыЗапроса.last_id) Тогда
			Данные = Новый Структура("result", Новый Структура("items, last_id", Новый Массив, ""));
			
			Возврат Данные;
		КонецЕсли;
		ПолучениеЦенТоваровОшибкаРезультата(Результат);
		СеансОбменаОбъект.УстановитьРезультатЗапросаAPIGZip(Результат, СтрокаДанныхЗапросовAPI);
		СеансОбменаОбъект.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.НекорректныйКодРезультатаЗапросаAPI, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецЕсли;
	Попытка
		Данные = КоннекторHTTP.КакJson(Результат, Новый Структура("ПрочитатьВСоответствие", Ложь));
	Исключение
		ПолучениеЦенТоваровОшибкаПолученияДанныхРезультата(ИнформацияОбОшибке());
		СеансОбменаОбъект.УстановитьРезультатЗапросаAPIGZip(Результат, СтрокаДанныхЗапросовAPI);
		СеансОбменаОбъект.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.РезультатЗапросаAPIНеСодержитДанных, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецПопытки;
	
	СеансОбменаОбъект.УстановитьДанныеРезультатаЗапросаAPIGZip(Данные, СтрокаДанныхЗапросовAPI);
	
	Если Данные.Свойство("result") = Неопределено Тогда
		АкцииОшибкаВРезультате(Данные);
		СеансОбменаОбъект.УстановитьРезультатЗапросаAPIGZip(Результат, СтрокаДанныхЗапросовAPI);
		СеансОбменаОбъект.УстановитьРезультатОбмена(Перечисления.мс_РезультатыОбменов.ДанныеРезультатаЗапросаAPIНеСодержатОбязательныхСвойств, СтрокаДанныхЗапросовAPI);
		
		Возврат Неопределено;
	КонецЕсли;
	
	СеансОбменаОбъект.УстановитьРезультатОбменаУспешно(СтрокаДанныхЗапросовAPI, "Озон");
	
	Возврат Данные;
КонецФункции

//Шаблон {
Функция ВыполнитьЗапрос_ИмяЗапросаРодПад(Сессия, ДанныеМагазина, ПараметрыЗапроса, Регистратор)
	Запрос        = ЗапросПолученияСтатусаЗаказа(ПараметрыЗапроса);
	ДанныеЗапроса = КоннекторHTTP.ОбъектВJson(Запрос, , Новый Структура("СимволыОтступа", Символы.Таб));
	
	Регистратор.ДанныеЗапросаAPI = ДанныеЗапроса;
	
	Адрес = СтрШаблон("%1/v2/products/stocks", ДанныеМагазина.Сервер);
	Попытка
		//Результат = КоннекторHTTP.Post(Адрес, ДанныеЗапроса, , Сессия);
		Результат = ПолучитьФиктивныйРезультатЗапроса_ИмяЗапросаРодПад();
	Исключение
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ИмяЗапросаИмПадеж_ОшибкаВыполненияЗапроса(ИнформацияОбОшибке);
		Регистратор.РезультатОбмена = Перечисления.мс_РезультатыОбменов.ПустаяСсылка();
		Возврат Неопределено;
	КонецПопытки;
	Если Результат = Неопределено Тогда
		ИмяЗапросаИмПадеж_ОшибкаПустойРезультатаЗапроса(Запрос);
		Регистратор.РезультатОбмена = Перечисления.мс_РезультатыОбменов.ЗапросAPIПолученияОстатковВернулПустойРезультат;
		Возврат Неопределено;
	КонецЕсли;
	Регистратор.РезультатЗапросаAPI = КоннекторHTTP.КакТекст(Результат);
	Попытка
		Данные = КоннекторHTTP.КакJson(Результат, Новый Структура("ПрочитатьВСоответствие", Ложь));
		//Данные = КоннекторHTTP.КакДвоичныеДанные(Результат);
	Исключение
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ИмяЗапросаИмПадеж_ОшибкаПолученияДанныхРезультата(ИнформацияОбОшибке);
		Регистратор.РезультатОбмена = Перечисления.мс_РезультатыОбменов.РезультатЗапросаAPIНеСодержитДанных;
		Возврат Неопределено;
	КонецПопытки;
	Регистратор.ДанныеРезультатаЗапросаAPI = КоннекторHTTP.ОбъектВJson(Данные, , Новый Структура("СимволыОтступа", Символы.Таб));
	Если Результат.КодСостояния <> 200 Тогда
		ИмяЗапросаИмПадеж_ОшибкаРезультата(Результат);
		Регистратор.РезультатОбмена = Перечисления.мс_РезультатыОбменов.НекорректныйКодРезультатаЗапросаAPI;
		Возврат Неопределено;
	КонецЕсли;
	Если Данные.Свойство("ИмяСвойства") = Неопределено Или Данные.ИмяСвойства.Количество() = 0 Тогда
		ИмяЗапросаИмПадеж_ОшибкаВРезультате(Запрос, Данные);
		Регистратор.РезультатОбмена = Перечисления.мс_РезультатыОбменов.ДанныеРезультатаЗапросаAPIНеСодержатОбязательныхСвойств;
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Данные;
КонецФункции
//} Шаблон

#КонецОбласти

#Область ПолучениеЗапросовHTTP

Функция ЗапросОбновленияОстатков(ПараметрыЗапроса)
	Запрос = Новый Структура("stocks", Новый Массив);
	ДополнитьСтруктуруЗапросаОбновленияОстатков(Запрос, ПараметрыЗапроса);

	Возврат Запрос;
КонецФункции

Процедура ДополнитьСтруктуруЗапросаОбновленияОстатков(Данные, ПараметрыЗапроса)
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		Если Данные.Свойство(Параметр.Ключ) Тогда
			Данные.Вставить(Параметр.Ключ, Параметр.Значение);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ЗапросОбновленияЦен(ПараметрыЗапроса)
	Запрос = Новый Структура("prices", Новый Массив);
	ДополнитьСтруктуруЗапросаОбновленияЦен(Запрос, ПараметрыЗапроса);

	Возврат Запрос;
КонецФункции

Процедура ДополнитьСтруктуруЗапросаОбновленияЦен(Данные, ПараметрыЗапроса)
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		Если Данные.Свойство(Параметр.Ключ) Тогда
			Данные.Вставить(Параметр.Ключ, Параметр.Значение);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ЗапросПолученияСпискаТоваров(ПараметрыЗапроса)
	Запрос = Новый Структура("filter, last_id, limit", Новый Структура, "", 1000);
	ДополнитьСтруктуруЗапросаПолученияСпискаТоваров(Запрос, ПараметрыЗапроса);
	
	Возврат Запрос;
КонецФункции

Функция ЗапросПолученияСпискаТоваровПоИдентификаторам(ПараметрыЗапроса)
	Запрос = Новый Структура("offer_id, product_id, sku", Новый Массив, Новый Массив, Новый Массив);
	ДополнитьСтруктуруЗапросаПолученияСпискаТоваров(Запрос, ПараметрыЗапроса);
	
	Возврат Запрос;
КонецФункции

Процедура ДополнитьСтруктуруЗапросаПолученияСпискаТоваров(Данные, ПараметрыЗапроса)
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		Если Данные.Свойство(Параметр.Ключ) Тогда
			Данные.Вставить(Параметр.Ключ, Параметр.Значение);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ЗапросПолученияСпискаМаркируемыхТоваровЗаказа(ПараметрыЗапроса)
	Запрос = Новый Структура("posting_number");
	ДополнитьСтруктуруЗапросаПолученияСпискаМаркируемыхТоваровЗаказа(Запрос, ПараметрыЗапроса);
	
	Возврат Запрос;
КонецФункции

Процедура ДополнитьСтруктуруЗапросаПолученияСпискаМаркируемыхТоваровЗаказа(Данные, ПараметрыЗапроса)
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		Если Данные.Свойство(Параметр.Ключ) Тогда
			Данные.Вставить(Параметр.Ключ, Параметр.Значение);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ЗапросПолученияДанныхНеобработанныхЗаказов(ПараметрыЗапроса)
	Запрос = Новый Структура("dir, filter, limit, offset, with");
	ДополнитьСтруктуруЗапросаПолученияДанныхНеобработанныхЗаказов(Запрос, ПараметрыЗапроса);

	Возврат Запрос;
КонецФункции

Процедура ДополнитьСтруктуруЗапросаПолученияДанныхНеобработанныхЗаказов(Данные, ПараметрыЗапроса)
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		Если Данные.Свойство(Параметр.Ключ) Тогда
			Данные.Вставить(Параметр.Ключ, Параметр.Значение);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ЗапросПодтвержденияКомплектацииЗаказа(ПараметрыЗапроса)
	Запрос = Новый Структура("packages, posting_number, with");
	ДополнитьСтруктуруЗапросаПодтвержденияКомплектацииЗаказа(Запрос, ПараметрыЗапроса);

	Возврат Запрос;
КонецФункции

Процедура ДополнитьСтруктуруЗапросаПодтвержденияКомплектацииЗаказа(Данные, ПараметрыЗапроса)
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		Если Данные.Свойство(Параметр.Ключ) Тогда
			Данные.Вставить(Параметр.Ключ, Параметр.Значение);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ЗапросПередачиДанныхМаркировкиЗаказа(ПараметрыЗапроса)
	Запрос = Новый Структура("multi_box_qty, posting_number, products");
	ДополнитьСтруктуруЗапросаПередачиДанныхМаркировкиЗаказа(Запрос, ПараметрыЗапроса);
	
	Возврат Запрос;
КонецФункции

Процедура ДополнитьСтруктуруЗапросаПередачиДанныхМаркировкиЗаказа(Данные, ПараметрыЗапроса)
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		Если Данные.Свойство(Параметр.Ключ) Тогда
			Данные.Вставить(Параметр.Ключ, Параметр.Значение);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ЗапросПолученияСтатусаПередачиДанныхМаркировкиЗаказа(ПараметрыЗапроса)
	Запрос = Новый Структура("posting_number");
	ДополнитьСтруктуруЗапросаПолученияСтатусаПередачиДанныхМаркировкиЗаказа(Запрос, ПараметрыЗапроса);

	Возврат Запрос;
КонецФункции

Процедура ДополнитьСтруктуруЗапросаПолученияСтатусаПередачиДанныхМаркировкиЗаказа(Данные, ПараметрыЗапроса)
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		Если Данные.Свойство(Параметр.Ключ) Тогда
			Данные.Вставить(Параметр.Ключ, Параметр.Значение);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ЗапросПолученияЭтикетки(ПараметрыЗапроса)
	Запрос = Новый Структура("posting_number");
	ДополнитьСтруктуруЗапросаПолученияЭтикетки(Запрос, ПараметрыЗапроса);

	Возврат Запрос;
КонецФункции

Процедура ДополнитьСтруктуруЗапросаПолученияЭтикетки(Данные, ПараметрыЗапроса)
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		Если Данные.Свойство(Параметр.Ключ) Тогда
			Данные.Вставить(Параметр.Ключ, Параметр.Значение);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ЗапросПолученияДереваКатегорий(ПараметрыЗапроса)
	Запрос = Новый Структура("category_id, language");
	ДополнитьСтруктуруЗапросаПолученияДереваКатегорий(Запрос, ПараметрыЗапроса);

	Возврат Запрос;
КонецФункции

Процедура ДополнитьСтруктуруЗапросаПолученияДереваКатегорий(Данные, ПараметрыЗапроса)
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		Если Данные.Свойство(Параметр.Ключ) Тогда
			Данные.Вставить(Параметр.Ключ, Параметр.Значение);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ЗапросПолученияХарактеристик(ПараметрыЗапроса)
	Запрос = Новый Структура("attribute_type, category_id, language");
	ДополнитьСтруктуруЗапросаПолученияХарактеристик(Запрос, ПараметрыЗапроса);

	Возврат Запрос;
КонецФункции

Процедура ДополнитьСтруктуруЗапросаПолученияХарактеристик(Данные, ПараметрыЗапроса)
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		Если Данные.Свойство(Параметр.Ключ) Тогда
			Данные.Вставить(Параметр.Ключ, Параметр.Значение);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ЗапросПолученияЗначенияХарактеристики(ПараметрыЗапроса)
	Запрос = Новый Структура("attribute_id, category_id, last_value_id,  limit");
	ДополнитьСтруктуруЗапросаПолученияЗначенияХарактеристики(Запрос, ПараметрыЗапроса);

	Возврат Запрос;
КонецФункции

Процедура ДополнитьСтруктуруЗапросаПолученияЗначенияХарактеристики(Данные, ПараметрыЗапроса)
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		Если Данные.Свойство(Параметр.Ключ) Тогда
			Данные.Вставить(Параметр.Ключ, Параметр.Значение);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ЗапросПолученияСтатусаЗаказа(ПараметрыЗапроса)
	Запрос = Новый Структура("posting_number, with");
	ДополнитьСтруктуруЗапросаПолученияСтатусаЗаказа(Запрос, ПараметрыЗапроса);
	
	Возврат Запрос;
КонецФункции

Процедура ДополнитьСтруктуруЗапросаПолученияСтатусаЗаказа(Данные, ПараметрыЗапроса)
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		Если Данные.Свойство(Параметр.Ключ) Тогда
			Данные.Вставить(Параметр.Ключ, Параметр.Значение);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ЗапросПолученияЦенТоваров(ПараметрыЗапроса)
	Запрос = Новый Структура("filter, last_id, limit", Новый Структура, "", 1000);
	ДополнитьСтруктуруЗапросаПолученияЦенТоваров(Запрос, ПараметрыЗапроса);
	
	Возврат Запрос;
КонецФункции

Процедура ДополнитьСтруктуруЗапросаПолученияЦенТоваров(Данные, ПараметрыЗапроса)
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		Если Данные.Свойство(Параметр.Ключ) Тогда
			Данные.Вставить(Параметр.Ключ, Параметр.Значение);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//Шаблон {
Функция Запрос_ИмяЗапросаРодПадеж(ПараметрыЗапроса)
	Запрос = Новый Структура("ИмяСвойства", Новый Массив);
	ДополнитьСтруктуруЗапроса_ИмяЗапросаРодПадеж(Запрос, ПараметрыЗапроса);

	Возврат Запрос;
КонецФункции

Процедура ДополнитьСтруктуруЗапроса_ИмяЗапросаРодПадеж(Данные, ПараметрыЗапроса)
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		Если Данные.Свойство(Параметр.Ключ) Тогда
			Данные.Вставить(Параметр.Ключ, Параметр.Значение);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
//}Шаблон


#КонецОбласти

#КонецОбласти

#Область СтатусыЗаказов

Функция Статус_ИдетПриемка() Экспорт
	Возврат "acceptance_in_progress";
КонецФункции	

Функция Статус_ОжидаетУпаковки() Экспорт
	Возврат "awaiting_packaging";
КонецФункции	

Функция Статус_ОжидаетОтгрузки() Экспорт
	Возврат "awaiting_deliver";
КонецФункции	

Функция Статус_Отменен() Экспорт
	Возврат "cancelled";
КонецФункции	

#КонецОбласти

#Область СтатусыДобавленияЭкземпляров

Функция СтатусДобавленияЭкземпляраСборкаНедоступна()
	Возврат "ship_not_available";
КонецФункции

Функция СтатусДобавленияЭкземпляраСборкаДоступна()
	Возврат "ship_available";
КонецФункции

Функция СтатусДобавленияЭкземпляраНаПроверке()
	Возврат "validation_in_process";
КонецФункции

#КонецОбласти

#Область МоделиМагазинов

Функция МодельМагазинаФБСЭкспресс()
	Возврат Перечисления.мс_МодельМаркетплейса.ФБСЭкспресс;
КонецФункции

Функция МодельМагазинаФБС()
	Возврат Перечисления.мс_МодельМаркетплейса.ФБСЭкспресс;
КонецФункции

#КонецОбласти

Функция ДобавлятьЗаказыВНапоминания(ДанныеМагазина)
	Если ДанныеМагазина.Модель = Перечисления.мс_МодельМаркетплейса.ФБСЭкспресс Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

Процедура СоздатьНапоминанияПроЗаказыФБС(Заказы)
	Запрос = Новый Запрос(
	#Область ТекстЗапроса
		"ВЫБРАТЬ
		|	Заказ.Ссылка КАК Источник
		|ПОМЕСТИТЬ ВТ_Заказы
		|ИЗ
		|	Документ.Заказ КАК Заказ
		|ГДЕ
		|	Заказ.Ссылка В(&Заказы)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Источник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГруппыПользователейСостав.Пользователь КАК Пользователь
		|ПОМЕСТИТЬ ВТ_ПользователиГруппы
		|ИЗ
		|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
		|ГДЕ
		|	ГруппыПользователейСостав.Ссылка = &Группа
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Пользователь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПользователиГруппы.Пользователь КАК Пользователь,
		|	ВТ_Заказы.Источник КАК Источник
		|ПОМЕСТИТЬ ВТ_ЗаказыПользователей
		|ИЗ
		|	ВТ_Заказы КАК ВТ_Заказы,
		|	ВТ_ПользователиГруппы КАК ВТ_ПользователиГруппы
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Пользователь,
		|	Источник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ЗаказыПользователей.Пользователь КАК Пользователь,
		|	ВТ_ЗаказыПользователей.Источник КАК Источник,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ВТ_ЗаказыПользователей.Источник) КАК ИсточникПредставление
		|ИЗ
		|	ВТ_ЗаказыПользователей КАК ВТ_ЗаказыПользователей
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НапоминанияПользователя КАК НапоминанияПользователя
		|		ПО (ВТ_ЗаказыПользователей.Источник = (ВЫРАЗИТЬ(НапоминанияПользователя.Источник КАК Документ.Заказ)))
		|ГДЕ
		|	НапоминанияПользователя.Источник ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	Пользователь,
		|	Источник
		|АВТОУПОРЯДОЧИВАНИЕ");
	#КонецОбласти
	Запрос.Параметры.Вставить("Заказы", Заказы);
	Запрос.Параметры.Вставить("Группа", ЗначениеНастроекПовтИсп.ПолучитьЗначениеОбщейКонстанты(ПланыВидовХарактеристик.мс_ОбщиеКонстанты.НапоминанияПользователям));
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;

	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СоздатьНапоминаниеПроЗаказФБС(Выборка);
	КонецЦикла;
КонецПроцедуры

Процедура СоздатьНапоминаниеПроЗаказФБС(Выборка)
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НапоминанияПользователя");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Источник", Выборка.Заказ);
	ЭлементБлокировки.УстановитьЗначение("Пользователь", "Пользователь");

	МенеджерЗаписи = РегистрыСведений.НапоминанияПользователя.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Источник		= Выборка.Источник;
	МенеджерЗаписи.Пользователь = Выборка.Пользователь;
	МенеджерЗаписи.ВремяСобытия = ТекущаяДатаСеанса();

	МенеджерЗаписи.СрокНапоминания					 = МенеджерЗаписи.ВремяСобытия;
	МенеджерЗаписи.Описание							 = Выборка.ИсточникПредставление;
	МенеджерЗаписи.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ОтносительноВремениПредмета;
	МенеджерЗаписи.ИнтервалВремениНапоминания		 = 60;
	МенеджерЗаписи.ИмяРеквизитаИсточника			 = "Дата";
	МенеджерЗаписи.ПредставлениеИсточника			 = ОбщегоНазначения.ПредметСтрокой(МенеджерЗаписи.Источник);
	МенеджерЗаписи.Идентификатор					 = "ЗаказФБС";
	
	Попытка
		
		НачатьТранзакцию();
		
		Блокировка.Заблокировать();

		МенеджерЗаписи.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		СозданиеНапоминанияПроЗаказФБСОшибкаЗаписи(Выборка.Пользователь, Выборка.Заказ, ОписаниеОшибки);
	КонецПопытки;
КонецПроцедуры	
